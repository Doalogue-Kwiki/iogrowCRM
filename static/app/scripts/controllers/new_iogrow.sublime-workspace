{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"index",
				"index"
			],
			[
				"satg",
				"stage_selected	(contact_show.html)"
			],
			[
				"stag",
				"stage_number	(opportunitycontroller.js)"
			],
			[
				"new",
				"newcontacts"
			],
			[
				"oppo",
				"opportunity"
			],
			[
				"cus",
				"customfield"
			],
			[
				"email",
				"email"
			],
			[
				"websit",
				"websites"
			],
			[
				"web",
				"websites"
			],
			[
				"app",
				"apply	method.apply()"
			],
			[
				"last",
				"lastname"
			],
			[
				"wi",
				"width"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"pa",
				"payment"
			],
			[
				"font",
				"font-weight"
			],
			[
				"marg",
				"margin-top"
			],
			[
				"prepareInfonodes",
				"prepareInfonodesCase"
			],
			[
				"opp",
				"opportunities"
			],
			[
				"leng",
				"length==0"
			],
			[
				"sele",
				"selectedCases"
			],
			[
				"blanks",
				"blankStatecase"
			],
			[
				"inde",
				"indexInOpp"
			],
			[
				"case",
				"cases"
			],
			[
				"selectedCase",
				"selectedCases"
			],
			[
				"sta",
				"stat"
			],
			[
				"casesa",
				"casestatuses"
			],
			[
				"stat",
				"status"
			],
			[
				"re",
				"return"
			],
			[
				"curr",
				"current	(contactcontroller.js)"
			],
			[
				"shar",
				"sharing_with"
			],
			[
				"lunc",
				"lunchWindow	(leadcontrollers.js)"
			],
			[
				"bro",
				"browser	(leadcontrollers.js)"
			],
			[
				"cons",
				"console	(taskcontrollers.js)"
			],
			[
				"contact",
				"contact"
			],
			[
				"webs",
				"website"
			],
			[
				"logo",
				"logo_img_url"
			],
			[
				"prof",
				"profile_img"
			],
			[
				"image",
				"imageSrc"
			],
			[
				"add",
				"addresses"
			],
			[
				"soc",
				"sociallinks"
			],
			[
				"inf",
				"infonode"
			],
			[
				"exist",
				"exists"
			],
			[
				"socia",
				"social"
			],
			[
				"account",
				"account"
			],
			[
				"we",
				"websites"
			],
			[
				"socila",
				"sociallink"
			],
			[
				"socil",
				"sociallink"
			],
			[
				"com",
				"company"
			],
			[
				"loca",
				"locality=address"
			],
			[
				"loc",
				"locality=address"
			],
			[
				"for",
				"formatted"
			],
			[
				"con",
				"contact"
			],
			[
				"consol",
				"console"
			],
			[
				"isE",
				"isEmptyObject	(opportunitycontroller.js)"
			],
			[
				"exe",
				"executed	(opportunitycontroller.js)"
			],
			[
				"res",
				"resp"
			],
			[
				"pre",
				"preview	(leadcontrollers.js)"
			],
			[
				"embed",
				"embedLink"
			],
			[
				"emb",
				"embedLink	(opportunitycontroller.js)"
			],
			[
				"item",
				"item"
			],
			[
				"tr",
				"true"
			],
			[
				"bla",
				"blankStatdocuments	(accountservices.js)"
			],
			[
				"docum",
				"documents"
			],
			[
				"doc",
				"document"
			],
			[
				"selecte",
				"selectedTab==5"
			],
			[
				"seletedO",
				"selectedOpps	(leadcontrollers.js)"
			],
			[
				"selete",
				"selectedTab==2"
			],
			[
				"selectedOpp",
				"selectedOpps"
			],
			[
				"edite",
				"editbeforedelete"
			],
			[
				"seleted",
				"selectedTab==2"
			],
			[
				"curre",
				"current_stage"
			],
			[
				"even",
				"eventt"
			],
			[
				"adre",
				"addresses"
			],
			[
				"phone",
				"phones"
			],
			[
				"info",
				"infonodes"
			],
			[
				"created",
				"created_at	(opportunitycontroller.js)"
			],
			[
				"st",
				"style"
			],
			[
				"lo",
				"log($scope"
			],
			[
				"stage",
				"stageTo"
			],
			[
				"sle",
				"selectedCards"
			],
			[
				"acc",
				"access"
			],
			[
				"ent",
				"entityKey"
			],
			[
				"accoun",
				"account"
			],
			[
				"cas",
				"casee"
			],
			[
				"curso",
				"cursor:pointer"
			],
			[
				"lead",
				"leadstatuses"
			],
			[
				"Lea",
				"Leads	(lead_list.html)"
			],
			[
				"alwa",
				"alwaysVisible	(jquery.slimscroll.js)"
			],
			[
				"over",
				"overflow	(test.css)"
			],
			[
				"he",
				"height"
			],
			[
				"page",
				"pageToken"
			],
			[
				"toStri",
				"toString()	String"
			],
			[
				"next",
				"nextPageToken"
			],
			[
				"contcat",
				"contacts"
			],
			[
				"trigg",
				"triggered"
			],
			[
				"getRe",
				"getRequestParams"
			],
			[
				"getR",
				"getRequestParams"
			],
			[
				"apply",
				"apply"
			],
			[
				"padd",
				"padding"
			],
			[
				"trans",
				"transparent	(untitled.css)"
			],
			[
				"appl",
				"apply	(leadcontrollers.js)"
			],
			[
				"accounts",
				"accounts"
			],
			[
				"selected",
				"selectedTab"
			],
			[
				"file",
				"field"
			],
			[
				"inlien",
				"inlinepatch"
			],
			[
				"custom",
				"customfield"
			],
			[
				"fiel",
				"fields"
			],
			[
				"option",
				"option"
			],
			[
				"op",
				"option"
			],
			[
				"sche",
				"schemas	(settingservices.js)"
			],
			[
				"infonode",
				"infonode_key"
			],
			[
				"va",
				"value"
			],
			[
				"in",
				"infonodes"
			],
			[
				"prope",
				"property_type"
			],
			[
				"infono",
				"infonode"
			],
			[
				"related",
				"related_object"
			],
			[
				"optoin",
				"options"
			],
			[
				"options",
				"options"
			],
			[
				"custo",
				"customfields"
			],
			[
				"relate",
				"related_object"
			],
			[
				"enti",
				"entityKey	(accountcontrollers.js)"
			],
			[
				"dele",
				"delete	(custom_fields_edit.html)"
			],
			[
				"sp",
				"span"
			],
			[
				"rela",
				"related_object"
			],
			[
				"cle",
				"clear	(opportunity_new.html)"
			],
			[
				"cusF",
				"cusfield"
			],
			[
				"inse",
				"insert	(accountcontrollers.js)"
			],
			[
				"para",
				"params	(settingservices.js)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_show.html",
			"settings":
			{
				"buffer_size": 311792,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_new.html",
			"settings":
			{
				"buffer_size": 97126,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_show.html",
			"settings":
			{
				"buffer_size": 385660,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/leads/lead_show.html",
			"settings":
			{
				"buffer_size": 299462,
				"line_ending": "Unix"
			}
		},
		{
			"file": "leadcontrollers.js",
			"settings":
			{
				"buffer_size": 222925,
				"line_ending": "Unix"
			}
		},
		{
			"file": "casecontrollers.js",
			"settings":
			{
				"buffer_size": 93466,
				"line_ending": "Unix"
			}
		},
		{
			"file": "opportunitycontroller.js",
			"settings":
			{
				"buffer_size": 152593,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/taskservices.js",
			"settings":
			{
				"buffer_size": 16153,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/app.js",
			"settings":
			{
				"buffer_size": 15677,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/directives/directives.js",
			"settings":
			{
				"buffer_size": 33463,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/cases/case_show.html",
			"settings":
			{
				"buffer_size": 141724,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_show.html",
			"settings":
			{
				"buffer_size": 181623,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_list.html",
			"settings":
			{
				"buffer_size": 72762,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_new.html",
			"settings":
			{
				"buffer_size": 104143,
				"line_ending": "Unix"
			}
		},
		{
			"file": "accountcontrollers.js",
			"settings":
			{
				"buffer_size": 271701,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "app.controller('AccountShowCtrl', ['$scope','$http', '$filter', '$route', 'Auth', 'Account', 'Contact', 'Case', 'Opportunity', 'Topic', 'Note', 'Task', 'Event', 'Permission', 'User', 'Attachement', 'Email', 'Opportunitystage', 'Casestatus', 'Map', 'InfoNode', 'Tag','Edge','Linkedin','Customfield',\n    function($scope,$http,$filter, $route, Auth, Account, Contact, Case, Opportunity, Topic, Note, Task, Event, Permission, User, Attachement, Email, Opportunitystage, Casestatus, Map, InfoNode, Tag, Edge,Linkedin,Customfield) {\n        $(\"ul.page-sidebar-menu li\").removeClass(\"active\");\n        $(\"#id_Accounts\").addClass(\"active\");\n        trackMixpanelAction('ACCOUNT_SHOW_VIEW');\n\n        $scope.selectedTab = 2;\n        $scope.isSignedIn = false;\n        $scope.immediateFailed = false;\n        $scope.nextPageToken = undefined;\n        $scope.prevPageToken = undefined;\n        $scope.isLoading = false;\n        $scope.nbLoads=0;\n        $scope.pagination = {};\n        $scope.currentPage = 01;\n        //HKA 10.12.2013 Var topic to manage Next & Prev\n        $scope.topicCurrentPage = 01;\n        $scope.topicpagination = {};\n        $scope.topicpages = [];\n        //HKA 10.12.2013 Var Contact to manage Next & Prev\n        $scope.contactpagination = {};\n        $scope.contactCurrentPage = 01;\n        $scope.contactpages = [];\n        //HKA 11.12.2013 var Opportunity to manage Next & Prev\n        $scope.opppagination = {};\n        $scope.oppCurrentPage = 01;\n        $scope.opppages = [];\n        $scope.customfields=[];\n        $scope.companydetails={};\n        $scope.twitterProfile={};\n        //HKA 11.12.2013 var Case to manage Next & Prev\n        $scope.casepagination = {};\n        $scope.caseCurrentPage = 01;\n        $scope.casepages = [];\n        $scope.needspagination = {};\n        $scope.needsCurrentPage = 1;\n        $scope.needspages = [];\n        $scope.documentpagination = {};\n        $scope.documentCurrentPage = 1;\n        $scope.documentpages = [];\n        $scope.collaborators_list=[]\n        $scope.pages = [];\n        $scope.accounts = [];\n        $scope.account={};\n        $scope.users = [];\n        $scope.user = undefined;\n        $scope.slected_memeber = undefined;\n        $scope.email = {};\n        $scope.stage_selected = {};\n        $scope.status_selected = {};\n        $scope.infonodes = {};\n        $scope.phone = {};\n        $scope.phone.type = 'work';\n        $scope.need = {};\n        $scope.need.need_status = 'pending';\n        $scope.need.priority = 'Medium';\n        $scope.casee = {};\n        $scope.casee.priority = 4;\n        $scope.casee.status = 'pending';\n        $scope.addingTask = false;\n        $scope.sharing_with = [];\n        $scope.edited_email = null;\n        $scope.currentParam = {};\n        $scope.showPhoneForm = false;\n        $scope.showEmailForm = false;\n        $scope.showWebsiteForm = false;\n        $scope.showSociallinkForm = false;\n        $scope.showCustomFieldForm = false;\n        $scope.opportunities = [];\n        $scope.phones = [];\n        $scope.emails = [];\n        $scope.newTaskform = false;\n        $scope.selected_members = [];\n        $scope.selected_member = {};\n        $scope.opportunities = {};\n        $scope.inIsLoading=false;\n        $scope.inIsSearching=false;        \n        $scope.inShortProfiles=[];\n        $scope.inProfile={};\n        $scope.inNoResults=false;\n        $scope.statuses = [\n            {value: 'Home', text: 'Home'},\n            {value: 'Work', text: 'Work'},\n            {value: 'Mob', text: 'Mob'},\n            {value: 'Other', text: 'Other'}\n        ];\n        $scope.showUpload = false;\n        $scope.logo = {\n            'logo_img_id': null,\n            'logo_img_url': null\n        };\n\n        $scope.editdata = {'edit': 'test()'};\n        $scope.percent = 0;\n        $scope.chartOptions = {animate:{duration:0,enabled:false},size:100,barColor:'#58a618',scaleColor:false,lineWidth:7,lineCap:'circle'};\n        $scope.closed_date = new Date();\n        $scope.newTaskform=false;\n        $scope.newEventform=false;\n        $scope.newTask={};\n        $scope.ioevent = {};\n        $scope.showNewOpp=false;\n        $scope.showNewCase=false;\n        $scope.showNewContact=false;\n        $scope.opportunity={access:'public',currency:'USD',duration_unit:'fixed',closed_date:new Date()};\n        $scope.selectedItem={};\n        $scope.relatedCase=true;\n        $scope.relatedOpp=true;\n        $scope.selected_tags=[];\n        $scope.showPage=true;\n        $scope.ownerSelected={};\n        $scope.sendWithAttachments = [];\n        $scope.smallModal=false;\n        $scope.invites=[];\n        $scope.allday=false;\n        $scope.guest_modify=false;\n        $scope.guest_invite=true;\n        $scope.guest_list=true;\n        $('#some-textarea').wysihtml5();\n        $scope.relatedInfonode={};\n        $scope.savedSociallink=null;\n        $scope.newcontact={};\n        $scope.newcontact.phones=[];\n        $scope.newphone,$scope.newemail,$scope.newwebsite,$scope.website={};\n        $scope.newcontact.addresses=[];\n        $scope.newcontact.emails=[];\n        $scope.newcontact.websites=[];\n        $scope.newcontact.sociallinks=[];        \n        $scope.newcontact.customfields=[];        \n        $scope.newcontact.notes=[]; \n        $scope.newcontact.access='public';               \n        $scope.account.access='public';\n        $scope.industries=[\"Accounting \",\"Airlines/Aviation \",\"Alternative Dispute Resolution \",\"Alternative Medicine \",\"Animation \",\"Apparel &amp; Fashion \",\"Architecture &amp; Planning \",\"Arts &amp; Crafts \",\"Automotive \",\"Aviation &amp; Aerospace \",\"Banking \",\"Biotechnology \",\"Broadcast Media \",\"Building Materials \",\"Business Supplies &amp; Equipment \",\"Capital Markets \",\"Chemicals \",\"Civic &amp; Social Organization \",\"Civil Engineering \",\"Commercial Real Estate \",\"Computer &amp; Network Security \",\"Computer Games \",\"Computer Hardware \",\"Computer Networking \",\"Computer Software \",\"Construction \",\"Consumer Electronics \",\"Consumer Goods \",\"Consumer Services \",\"Cosmetics \",\"Dairy \",\"Defense &amp; Space \",\"Design \",\"Education Management \",\"E-learning \",\"Electrical &amp; Electronic Manufacturing \",\"Entertainment \",\"Environmental Services \",\"Events Services \",\"Executive Office \",\"Facilities Services \",\"Farming \",\"Financial Services \",\"Fine Art \",\"Fishery \",\"Food &amp; Beverages \",\"Food Production \",\"Fundraising \",\"Furniture \",\"Gambling &amp; Casinos \",\"Glass, Ceramics &amp; Concrete \",\"Government Administration \",\"Government Relations \",\"Graphic Design \",\"Health, Wellness &amp; Fitness \",\"Higher Education \",\"Hospital &amp; Health Care \",\"Hospitality \",\"Human Resources \",\"Import &amp; Export \",\"Individual &amp; Family Services \",\"Industrial Automation \",\"Information Services \",\"Information Technology &amp; Services \",\"Insurance \",\"International Affairs \",\"International Trade &amp; Development \",\"Internet \",\"Investment Banking/Venture \",\"Investment Management \",\"Judiciary \",\"Law Enforcement \",\"Law Practice \",\"Legal Services \",\"Legislative Office \",\"Leisure &amp; Travel \",\"Libraries \",\"Logistics &amp; Supply Chain \",\"Luxury Goods &amp; Jewelry \",\"Machinery \",\"Management Consulting \",\"Maritime \",\"Marketing &amp; Advertising \",\"Market Research \",\"Mechanical or Industrial Engineering \",\"Media Production \",\"Medical Device \",\"Medical Practice \",\"Mental Health Care \",\"Military \",\"Mining &amp; Metals \",\"Motion Pictures &amp; Film \",\"Museums &amp; Institutions \",\"Music \",\"Nanotechnology \",\"Newspapers \",\"Nonprofit Organization Management \",\"Oil &amp; Energy \",\"Online Publishing \",\"Outsourcing/Offshoring \",\"Package/Freight Delivery \",\"Packaging &amp; Containers \",\"Paper &amp; Forest Products \",\"Performing Arts \",\"Pharmaceuticals \",\"Philanthropy \",\"Photography \",\"Plastics \",\"Political Organization \",\"Primary/Secondary \",\"Printing \",\"Professional Training \",\"Program Development \",\"Public Policy \",\"Public Relations \",\"Public Safety \",\"Publishing \",\"Railroad Manufacture \",\"Ranching \",\"Real Estate \",\"Recreational Facilities &amp; Services \",\"Religious Institutions \",\"Renewables &amp; Environment \",\"Research \",\"Restaurants \",\"Retail \",\"Security &amp; Investigations \",\"Semiconductors \",\"Shipbuilding \",\"Sporting Goods \",\"Sports \",\"Staffing &amp; Recruiting \",\"Supermarkets \",\"Telecommunications \",\"Textiles \",\"Think Tanks \",\"Tobacco \",\"Translation &amp; Localization \",\"Transportation/Trucking/Railroad \",\"Utilities \",\"Venture Capital \",\"Veterinary \",\"Warehousing \",\"Wholesale \",\"Wine &amp; Spirits \",\"Wireless \",\"Writing &amp; Editing\"];\n        $scope.selectedOpps=[];\n        $scope.selectedDocs=[];\n        $scope.opportunity.timeline=[];\n        $scope.competitors=[];\n        $scope.opportunity.notes=[];\n        $scope.allOppsSelected=false;\n        $scope.allCasesSelected=false;\n        $scope.selectedCases=[];\n        $scope.newDoc=true;\n        $scope.docInRelatedObject=true;\n        $scope.relatedOpp=true;\n        $scope.opportunity.competitors=[];\n        $scope.opportunities=[];\n        $scope.caseCustomfields=[];\n\n   $scope.timezone=document.getElementById('timezone').value;\n\n\n       if ($scope.timezone==\"\"){\n        $scope.timezone=moment().format(\"Z\");\n     }\n\n\n\n        $scope.inProcess=function(varBool,message){\n          if (varBool) {  \n            console.log(\"inProcess starts\");      \n            if (message) {\n              console.log(\"starts of :\"+message);\n             \n            };\n            $scope.nbLoads=$scope.nbLoads+1;\n             var d = new Date();\n             console.log(d.getTime());\n            if ($scope.nbLoads==1) {\n              $scope.isLoading=true;\n            };\n          }else{\n            if (message) {\n              console.log(\"ends of :\"+message);\n            };\n            console.log(\"inProcess ends\");\n            var d = new Date();\n            console.log(d.getTime());\n            $scope.nbLoads=$scope.nbLoads-1;\n            if ($scope.nbLoads==0) {\n               $scope.isLoading=false;\n \n            };\n\n          };\n        }\n\n\n  $scope.emailSignature=document.getElementById(\"signature\").value;\n  if($scope.emailSignature ==\"None\"){\n    $scope.emailSignature=\"\";\n  }else{\n    $scope.emailSignature=\"<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\"+$scope.emailSignature;\n  }\n\n   document.getElementById(\"some-textarea\").value=$scope.emailSignature;\n                \n        $scope.apply=function(){\n         \n          if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {\n               $scope.$apply();\n              }\n              return false;\n        }\n        $scope.contact_img={};\n        $scope.imageSrcContact= '/static/img/avatar_contact.jpg';\n        $scope.imageSrcnewContact= '/static/img/avatar_contact.jpg';\n        // What to do after authentication\n        $scope.endError = function() {\n            //alert(\"okkkkkkkkkkkkkkk\");\n        }\n              $scope.isEmpty=function(obj){\n        return jQuery.isEmptyObject(obj);\n      }\n      $scope.isEmptyArray=function(Array){\n                if (Array!=undefined && Array.length>0) {\n                return false;\n                }else{\n                    return true;\n                };    \n            \n        }\n        $scope.prepareInfonodes = function(){\n            var infonodes = [];\n\n            angular.forEach($scope.customfields, function(customfield){\n                var infonode = {\n                                'kind':'customfields',\n                                'fields':[\n                                        {\n                                        'field':customfield.field,\n                                        'value':customfield.value\n                                        }\n                                ]\n\n                              }\n                infonodes.push(infonode);\n            });\n            return infonodes;\n        };\n        $scope.existsInfonode=function(elem,property,kind){\n            var exists=false;\n            angular.forEach($scope.infonodes[kind], function (infonode) {\n                console.log(infonode[property]);\n                console.log(elem[property]);\n                if (infonode[property]==elem[property]) { \n                    exists= true;\n                    console.log('exists');\n                };\n            });\n            return exists;\n\n        }\n         $scope.messageFromSocialLinkCallback = function(event){\n                  if (event.origin!=='https://accounts.google.com'&&event.origin!=='https://gcdc2013-iogrow.appspot.com'&&event.origin!=='http://localhost:8090'){\n                      console.log(event.origin);\n                      $scope.saveLinkedinData(event.data);\n                      window.removeEventListener(\"message\", $scope.messageFromSocialLinkCallback, false);\n                  }\n        };\n        $scope.saveLinkedinData=function(data){\n                    console.log(data);\n                    //company Data\n                    if (data.firstname||data.lastname) {\n                        $scope.clearContact();\n                        var params={\n                          'firstname':data.firstname,\n                          'lastname':data.lastname,\n                          'title':data.title,\n                          'phone':data.phone,\n                          'email':data.email,\n                          'address':data.locality,\n                          'sociallink':data.linkedin_url\n                        }\n                        $scope.currentContact=$.extend(true, $scope.currentContact, params);\n                        $scope.apply();\n                    }else{\n                      if (data.name) {\n                          var params={\n                              'id':$scope.account.id,\n                              'name':data.name,\n                              'industry':data.industry,\n                              'logo_img_url':data.logo_img_url,\n                              'introduction':data.introduction\n                            }\n                            Account.patch($scope,params);\n                            $scope.imageSrc=data.logo_img_url;\n                            if (data.phone) $scope.addPhone({'number':data.phone,'type':'work'});\n                            console.log(\"test url2\");\n                            console.log(data.website);\n                            if (data.website) $scope.addWebsite({'url':data.website});\n                            if (data.linkedin_url) $scope.addSocial({'url':data.linkedin_url});\n                            if (data.locality) $scope.addGeo({'formatted':data.locality,'country':' '});\n                        $scope.apply();\n                      };\n                    };\n                     \n                  }\n\n        $scope.socialLinkOpener = function(socialLinkUrl){\n            $scope.showLinkedinWindown=$scope.prepareUrl(socialLinkUrl);\n            if (navigator.isChrome(navigator.sayswho)) {\n                if (typeof (sessionStorage.isChromeExtensionInstalled) === 'undefined'){\n                    $scope.browser='chrome';\n                    $('#extensionNotInstalled').modal({backdrop: 'static', keyboard: false});\n                }else{\n                    window.open($scope.showLinkedinWindown+'#iogrow','winname','width=700,height=550');\n                    window.addEventListener(\"message\", $scope.messageFromSocialLinkCallback, false);\n                }\n            }else{\n                $scope.browser='other';\n                $('#extensionNotInstalled').modal({backdrop: 'static', keyboard: false});\n            };    \n        };\n        $scope.lunchWindow=function(){\n            window.open($scope.showLinkedinWindown+'#iogrow','winname','width=700,height=550');\n            window.addEventListener(\"message\", $scope.messageFromSocialLinkCallback, false);\n        }\n        $scope.showSelectButton=function(index){\n     \n          $(\"#select_\"+index).removeClass('selectLinkedinButton');\n        }\n        $scope.hideSelectButton=function(index){\n       \n          if (!$(\"#select_\"+index).hasClass('alltimeShowSelect')) {\n            $(\"#select_\"+index).addClass('selectLinkedinButton');\n          };\n          \n        }\n        $scope.addRelatedNote= function(note) {\n            $scope.newcontact.push\n            Note.insert($scope, params);\n            $scope.note.title = '';\n            $scope.note.content = '';\n        };\n         $scope.linkedinUrl=function(url){\n                         var match=\"\";\n                         var matcher = new RegExp(\"linkedin\");\n                         var test = matcher.test(url);                        \n                         return test;\n        }\n        $scope.saveLinkedinUrl=function(shortProfile){\n             $scope.inProfile=shortProfile;\n            var link={'url':$scope.inProfile.url}\n            $scope.addSocial(link);\n            var params ={'id':$scope.account.id};\n             params['logo_img_url'] = $scope.inProfile.logo;\n             params.industry=$scope.inProfile.industry;\n             params.name=$scope.inProfile.name;\n             Account.patch($scope,params);\n            $scope.imageSrc=$scope.inProfile.logo;\n            if ($scope.infonodes.addresses==undefined||$scope.infonodes.addresses==[]) {\n              $scope.addGeo({'formatted':$scope.inProfile.headquarters});\n            };\n             if ($scope.inProfile.website!=\"\"&&$scope.inProfile.website!=undefined) {\n                params = {'parent': $scope.account.entityKey,\n                'kind': 'websites',\n                'fields': [\n                    {\n                        \"field\": \"url\",\n                        \"value\": $scope.inProfile.website\n                    }\n                ]}\n            };\n            InfoNode.insert($scope, params);\n            $scope.apply();\n          }\n           $scope.lunchMaps=function(lat,lng,address){\n              if (lat&&lng) {\n                window.open('http://www.google.com/maps/place/'+lat+','+lng,'winname',\"width=700,height=550\");\n              }else{\n                 console.log(address);\n                 var locality=address.formatted || address.street+' '+address.city+' '+address.state+' '+address.country;\n                 window.open('http://www.google.com/maps/search/'+locality,'winname',\"width=700,height=550\");\n              };\n             }\n             $scope.lunchMapsLinkedin=function(address){\n                 window.open('http://www.google.com/maps/search/'+address,'winname',\"width=700,height=550\");\n             }\n\n\n $scope.getLinkedinByUrl=function(url){\n               $scope.inIsLoading=true;\n               var par={'url' : url};\n               Linkedin.getCompany(par,function(resp){\n                      if(!resp.code){\n                       var prof={};                       \n                       prof.company_size=resp.company_size;\n                       prof.headquarters=resp.headquarters;\n                       prof.followers=resp.followers;\n                       prof.founded=resp.founded;\n                       prof.industry=resp.industry;\n                       prof.logo=resp.logo;\n                       prof.name=resp.name;\n                       prof.summary=resp.summary;\n                       prof.top_image=resp.top_image;\n                       prof.type=resp.type;\n                       prof.url=resp.url;\n                       prof.website=resp.website; \n                       prof.workers=JSON.parse(resp.workers);\n                       $scope.inShortProfiles.push(prof);   \n                       console.log(\"after push of elements\");\n                       $scope.inIsLoading=false;\n                       $scope.apply();\n                      }else {\n                         if(resp.code==401){\n                          $scope.inIsLoading=false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n            }\n\n          /*$scope.getLinkedinByUrl=function(url){\n              console.log('innnnnn getLinkedinByUrl');\n               $scope.linkedLoader=true;\n               var par={'url' : url};\n               Linkedin.getCompany(par,function(resp){\n                      if(!resp.code){\n                       $scope.linkedShortProfile={};\n                       $scope.linkedShortProfile.company_size=resp.company_size;\n                       $scope.linkedShortProfile.headquarters=resp.headquarters;\n                       $scope.linkedShortProfile.followers=resp.followers;\n                       $scope.linkedShortProfile.founded=resp.founded;\n                       $scope.linkedShortProfile.industry=resp.industry;\n                       $scope.linkedShortProfile.logo=resp.logo;\n                       $scope.linkedShortProfile.name=resp.name;\n                       $scope.linkedShortProfile.summary=resp.summary;\n                       $scope.linkedShortProfile.top_image=resp.top_image;\n                       $scope.linkedShortProfile.type=resp.type;\n                       $scope.linkedShortProfile.url=resp.url;\n                       $scope.linkedShortProfile.website=resp.website; \n                       $scope.linkedShortProfile.workers=JSON.parse(resp.workers); \n                       if (!$scope.isEmpty($scope.account.contacts)) {\n                          console.log('contacts is not empty  ');\n                          angular.forEach($scope.linkedProfile.workers, function(worker){                            \n                              angular.forEach($scope.account.contacts.items, function(contact){\n                                  console.log('in workers list ');\n                                  var exists = ((worker.firstname==contact.firstname)&&(worker.lastname==contact.lastname))||((worker.firstname==contact.lastname)&&(worker.lastname==contact.firstname));\n                                  if (exists) {\n                                    console.log(\"this name exists\");\n                                    console.log(worker.firstname+worker.lastname);\n                                    $scope.linkedProfile.workers.splice($scope.linkedProfile.workers.indexOf(worker), 1);\n                                  };\n                              }); \n                          });      \n                       }else{\n                        console.log(\"is empty\");\n                        console.log($scope.account.contacts);\n                       };                   \n                       $scope.linkedLoader=false;\n                       $scope.apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                         console.log(\"no resp\");\n                          $scope.linkedLoader=false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n            }*/\n \n\n            $scope.getLinkedinProfile=function(){\n                  var params={\n                   \"company\":$scope.account.name\n                  }                \n                  if ($scope.infonodes.sociallinks==undefined) {\n                    $scope.infonodes.sociallinks=[];\n                  };\n                  var savedEntityKey=null;\n                  var linkedurl=null;\n                  if ($scope.infonodes.sociallinks.length > 0) {\n                     angular.forEach($scope.infonodes.sociallinks, function(link){\n\n                                      if ($scope.linkedinUrl(link.url)) {\n                                        linkedurl=link.url;\n                                        savedEntityKey=link.entityKey;\n                                      };\n                                  });\n                  };\n                 if (!linkedurl) {\n                   Linkedin.listCompanies(params,function(resp){\n                   $scope.inIsSearching=true;\n                   $scope.inShortProfiles=[];\n                   $scope.inProfile={};\n                   if(!resp.code){\n                    $scope.inIsSearching=false;\n                    if (resp.items==undefined) {\n                      $scope.inList=[];\n                      $scope.inNoResults=true;\n                      $scope.inIsSearching=false;\n                      console.log('finishing companies list');\n                    }else{\n                      $scope.inList=resp.items;\n                      console.log(\"resp.items\");\n                      console.log(resp.items);\n                      console.log('finishing companies list');\n                    };  \n                         $scope.isLoading = false;\n                         $scope.apply();\n                        }else {\n                          console.log(\"no 401\");\n                           if(resp.code==401){\n                            // $scope.refreshToken();\n                            $scope.isLoading = false;\n                            $scope.apply();\n                           };\n                          if (resp.code >= 503) {\n                                  $scope.inNoResults = true;\n                                  $scope.inIsSearching = false;\n                                  $scope.apply();\n                              }\n                        }\n                  });  \n                 }\n            }\n\n\n/*\n            $scope.getLinkedinProfile=function(){\n                console.log($scope.contact);\n                var params={\n                 \"company\":$scope.account.name\n                }\n                var linkedurl=null\n                if ($scope.infonodes.sociallinks==undefined) {\n                  $scope.infonodes.sociallinks=[];\n                };\n                var savedEntityKey=null;\n                if ($scope.infonodes.sociallinks.length > 0) {\n                   angular.forEach($scope.infonodes.sociallinks, function(link){\n\n                                    if ($scope.linkedinUrl(link.url)) {\n                                      linkedurl=link.url;\n                                      savedEntityKey=link.entityKey;\n                                      console.log(\"linkedin exists\");\n                                      console.log(link.entityKey);\n                                      \n                                    };\n                                });\n                };\n                console.log(\"linkedurl\");\n                console.log(linkedurl);\n                if (linkedurl) {\n                    var par={'url' : linkedurl};\n                   Linkedin.getCompany(par,function(resp){\n                      if(!resp.code){\n                       console.log(\"getting linkedin profile\");\n                       console.log(resp);\n                       $scope.linkedProfile={};\n                       $scope.linkedProfile.company_size=resp.company_size;\n                       $scope.linkedProfile.entityKey=savedEntityKey;\n                       $scope.linkedProfile.headquarters=resp.headquarters;\n                       $scope.linkedProfile.followers=resp.followers;\n                       $scope.linkedProfile.founded=resp.founded;\n                       $scope.linkedProfile.industry=resp.industry;\n                       $scope.linkedProfile.logo=resp.logo;\n                       console.log(\"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhheeeeeeeeeeeer\");\n                       console.log($scope.linkedProfile);\n                       $scope.linkedProfile.name=resp.name;\n                       $scope.linkedProfile.summary=resp.summary;\n                       $scope.linkedProfile.top_image=resp.top_image;\n                       $scope.linkedProfile.type=resp.type;\n                       $scope.linkedProfile.url=resp.url;\n                       $scope.linkedProfile.website=resp.website;\n                      /* $scope.linkedProfile.workers=JSON.parse(resp.workers);\n                       $scope.linkedContacts=JSON.parse(resp.workers);\n                       $scope.linkedProfile.workers=[];\n                       if (!$scope.isEmpty($scope.account.contacts)) {\n                          angular.forEach($scope.linkedContacts, function(worker){    \n                              var contactExist=false;                       \n                              angular.forEach($scope.account.contacts.items, function(contact){\n                                  console.log('in workers list ');\n                                  var exists = ((worker.firstname==contact.firstname)&&(worker.lastname==contact.lastname))||((worker.firstname==contact.lastname)&&(worker.lastname==contact.firstname));\n                                  if (exists) {\n                                    contactExist=true;                                   \n                                  };\n                              }); \n                              if (!contactExist) {\n                                 $scope.linkedProfile.workers.push(worker);\n                              };\n                          });      \n                       }else{\n                        console.log(\"is empty\");\n                        console.log($scope.account.contacts);\n                        $scope.linkedProfile.workers=$scope.linkedContacts;\n                       }; \n                       $scope.linkedLoader=false;\n                       $scope.isLoading = false;\n                       console.log($scope.linkedProfile);\n                       $scope.apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                         console.log(\"no resp\");\n                          $scope.isLoading = false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n                }else{\n                  Linkedin.listCompanies(params,function(resp){\n                    console.log(\"in list of companies\");\n                   if(!resp.code){\n                    console.log($scope.lead);\n                    if (resp.items==undefined) {\n                      $scope.listPeople=[];\n                      $scope.noLinkedInResults=true;\n                    }else{\n                      $scope.listPeople=resp.items;\n                      //$scope.hilightLinkedin();\n                    };\n                       $scope.isLoading = false;\n                       $scope.$apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                         console.log(\"no resp\");\n                          $scope.isLoading = false;\n                          $scope.$apply();\n                         };\n                      }\n                });            \n                };\n\n            }*/\n      $scope.deleteSocialLink = function(link,kind){\n        console.log('innnnn delete')\n        if (link.entityKey) {\n          var pars = {'entityKey':link.entityKey,'kind':kind};\n                console.log(\"pars\");\n      console.log(pars);\n        InfoNode.delete($scope,pars);\n        if ($scope.linkedinUrl(link.url)) {\n          $scope.inProfile={};\n          $scope.inShortProfiles={};\n          var params={\n              \"company\":$scope.account.name\n              }\n          Linkedin.listCompanies(params,function(resp){\n                   $scope.inIsSearching=true;\n                   $scope.inShortProfiles=[];\n                   $scope.inProfile={};\n                   if(!resp.code){\n                    $scope.inIsSearching=false;\n                    if (resp.items==undefined) {\n                      $scope.inList=[];\n                      $scope.inNoResults=true;\n                      $scope.inIsSearching=false;\n                      console.log('finishing companies list');\n                    }else{\n                      $scope.inList=resp.items;\n                      console.log(\"resp.items\");\n                      console.log(resp.items);\n                      if (resp.items.length < 4) {\n                          console.log(\"in check of 3\");\n                          angular.forEach(resp.items, function(item){\n                              console.log(item.url);\n                              $scope.getLinkedinByUrl(item.url);\n                        });\n                      }\n                      console.log('finishing companies list');\n                    };  \n                       $scope.isLoading = false;\n                       $scope.$apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                          $scope.isLoading = false;\n                          $scope.$apply();\n                         };\n                        if (resp.code >= 503) {\n                                $scope.inNoResults = true;\n                                $scope.inIsSearching = false;\n                                $scope.apply();\n                            }\n                      }\n                });\n        };\n            if ($scope.twitterUrl(link.url)) {\n      console.log(\"in twitttttttttttttter url\");\n      $scope.twProfile={};\n      $scope.twShortProfiles=[];\n      var params={\n          \"company\":$scope.account.name\n          }\n      Linkedin.getTwitterList(params,function(resp){\n                     $scope.twIsSearching=true;\n                     $scope.twShortProfiles=[];\n                     $scope.twProfile={};\n                     if(!resp.code){\n                      console.log(\"in twitttttter\");\n                      console.log(resp.code);\n                      $scope.twIsSearching=false;\n                      if (resp.items==undefined) {\n                        $scope.twList=[];\n                        $scope.twNoResults=true;\n                        $scope.twIsSearching=false;\n                      }else{\n                        $scope.twList=resp.items;\n                        if (resp.items.length < 4) {\n                          console.log(\"in check of 3\");\n                          angular.forEach(resp.items, function(item){\n                              console.log(item.url);\n                              $scope.getTwitterByUrl(item.url);\n                        });\n                        }\n                      };\n                         $scope.isLoading = false;\n                         $scope.$apply();\n                        }else {\n                          console.log(\"no 401\");\n                           if(resp.code==401){\n                            // $scope.refreshToken();\n                           console.log(\"no resp\");\n                            $scope.isLoading = false;\n                            $scope.$apply();\n                           };\n                         if (resp.code >= 503) {\n                            console.log(\"503 error\")\n                            $scope.twNoResults = true;\n                            $scope.twIsSearching = false;\n                            $scope.apply();\n                        }\n                        }\n                  });\n    };\n      }else{\n\n          $scope.linkedShortProfile={};\n          $scope.linkedProfile={};\n          $scope.apply()\n\n      };\n        };\n\n        $scope.gotosendMail = function(email){\n            $scope.email.to = email;\n             $('#testnonefade').modal(\"show\");\n            $scope.smallSendMail();\n            //  $(\".wysihtml5-toolbar\").hide();\n        }\n         $scope.switchwysihtml=function(){\n          if ($(\".wysihtml5-toolbar\").is(\":visible\")) {\n\n            $(\".wysihtml5-toolbar\").hide();\n            $(\".wysihtml5-sandbox\").addClass(\"withoutTools\");\n\n          }else{\n\n            $(\".wysihtml5-sandbox\").removeClass(\"withoutTools\")\n            $(\".wysihtml5-toolbar\").show();\n\n          };  \n        }\n        $scope.closeEmailModel=function(){\n          $(\".modal-backdrop\").remove();\n           $('#testnonefade').hide();\n\n        }\n        $scope.showAssigneeTagsToAccount=function(){\n            $('#assigneeTagsToAccount').modal('show');\n         };\n        $scope.switchEmailModal=function(){\n          if ($( \"#testnonefade\" ).hasClass( \"emailModalOnBottom\" )) {\n              $scope.bigSendMail();\n              $scope.smallModal=true;\n          }else{\n               $scope.smallSendMail();\n               $scope.smallModal=false;\n          };\n        }\n        \n        $scope.smallSendMail=function(){\n          $(\".modal-backdrop\").remove();\n          $('#testnonefade').addClass(\"emailModalOnBottom\");\n        }\n        $scope.bigSendMail=function(){\n          $('#testnonefade').removeClass(\"emailModalOnBottom\");\n          $( \"body\" ).append( '<div class=\"modal-backdrop fade in\"></div>' );\n\n        }\n        $scope.savecontact = function(contact) {\n               $scope.contact_err={};\n              if (!contact.firstname) $scope.contact_err.firstname=true;\n                    else $scope.contact_err.firstname=false;\n              if (!contact.lastname) $scope.contact_err.lastname=true;\n                    else $scope.contact_err.lastname=false;\n              if (!$scope.contact_err.firstname&&!$scope.contact_err.lastname) {\n                var params ={\n                        'firstname':contact.firstname,\n                        'lastname':contact.lastname,\n                        'title':contact.title,\n                        'tagline':contact.tagline,\n                        'introduction':contact.introduction,\n                        'phones':contact.phones,\n                        'emails':contact.emails,\n                        'addresses':$scope.addresses,\n                        'infonodes':$scope.prepareRelated(),\n                        'access': contact.access||'public',\n                        'account': $scope.account.entityKey\n                         };\n                         if ($scope.contact_img.id){\n\n                                params['profile_img_id'] = $scope.contact_img.id;\n                                params['profile_img_url'] = 'https://docs.google.com/uc?id='+$scope.contact_img.id;\n                        }else{\n                          if ($scope.imageSrcnewContact) {\n                              params['profile_img_url'] = $scope.imageSrcnewContact;\n                          };\n                        }\n                        Contact.insert($scope,params);\n                        $scope.contact={};\n                        $scope.newcontact={};\n                        $scope.newcontact.phones=[];\n                        $scope.newcontact.emails=[];\n                        $scope.newcontact.websites=[];\n              }\n            \n        };\n        $scope.savecontactFromLinkedin = function(contact) {\n            var params ={\n                        'firstname':contact.firstname,\n                        'lastname':contact.lastname,\n                        'title':contact.function,\n                        'infonodes': [{'kind': 'sociallinks','fields': [{'field': \"url\",'value': contact.url}]}],\n                        'access': $scope.account.access||'public',\n                        'account': $scope.account.entityKey\n                         };\n                         params['profile_img_url'] = contact.img;\n                         Contact.insert($scope,params);\n                         $scope.savedSociallink=contact.url;\n                         $scope.inProfile.workers.splice($scope.inProfile.workers.indexOf(contact),1);\n        };\n        $scope.contactInserted=function(resp){\n            console.log(resp)\n            if ($scope.savedSociallink!=null) {\n              $scope.contacts[0].sociallinks=[];\n              $scope.contacts[0].sociallinks.push({url:$scope.savedSociallink});\n              $scope.savedSociallink=null;\n            };    \n            $scope.contacts[0].emails=[];\n            $scope.contacts[0].emails.items=[];\n            $scope.contacts[0].phones=[];\n            $scope.contacts[0].phones.items=[];\n            $scope.contacts[0].emails.items.push(resp.emails[0]);\n            $scope.contacts[0].phones.items.push(resp.phones[0]);\n            console.log($scope.contacts[0]);\n            $scope.apply();\n            $scope.selectedTab=2;      \n        };\n        $scope.addPhoneToContact=function(phone,contact){           \n            if (phone.number) {\n                params = {'parent': contact.entityKey,\n                    'kind': 'phones',\n                    'fields': [\n                        {\n                            \"field\": \"type\",\n                            \"value\": \"work\"\n                        },\n                        {\n                            \"field\": \"number\",\n                            \"value\": phone.number\n                        }\n                    ]\n                };\n                $scope.relatedInfonode={\n                  contact:contact,\n                  infonode:{\n                    'kind':'phones',\n                    'item':{\n                       \"type\": phone.type,\n                       \"number\": phone.number\n                    }\n                  }\n                };\n                InfoNode.insert($scope, params);\n            }\n        }\n   $scope.addEmailToContact=function(email,contact){  \n                console.log(email) ;\n                console.log(email) ;\n                if (email.email) {\n                    params = {'parent': contact.entityKey,\n                        'kind': 'emails',\n                        'fields': [\n                            {\n                                \"field\": \"email\",\n                                \"value\": email.email\n                            }\n                        ]\n                    };\n                }        \n                $scope.relatedInfonode={\n                  contact:contact,\n                  infonode:{\n                    'kind':'emails',\n                    'item':{\n                       \"email\": email.email\n                    }\n                  }\n                };\n                InfoNode.insert($scope, params);\n            }\n  $scope.saveOpp = function(opportunity){\n             $scope.oppo_err={};\n           if (!opportunity.name) $scope.oppo_err.name=true;\n            else $scope.oppo_err.name=false;  \n          if (!opportunity.amount_per_unit) $scope.oppo_err.amount_per_unit=true;\n            else $scope.oppo_err.amount_per_unit=false;\n\n          if (!$scope.oppo_err.amount_per_unit&&!$scope.oppo_err.name) {\n               opportunity.closed_date = $filter('date')(opportunity.closed_date,['yyyy-MM-dd']);\n            opportunity.stage = $scope.initialStage.entityKey;\n            opportunity.infonodes = $scope.prepareInfonodes();\n            if (opportunity.duration_unit=='fixed'){\n\n              opportunity.amount_total = opportunity.amount_per_unit;\n              opportunity.opportunity_type = 'fixed_bid';\n\n            }else{\n\n              opportunity.opportunity_type = 'per_' + opportunity.duration;\n\n            }\n            opportunity.account=$scope.account.entityKey;\n            Opportunity.insert($scope,opportunity);\n            $scope.showNewOpp=false;\n            $scope.opportunity={access:'public',currency:'USD',duration_unit:'fixed',closed_date:new Date()};\n            $scope.apply();\n          }\n           \n\n};\n       $scope.priorityColor=function(pri){\n          if (pri<4) {\n              return '#BBE535';\n          }else{\n            if (pri<6) {\n                 return '#EEEE22';\n            }else{\n              if (pri<8) {\n                   return '#FFBB22';\n               }else{\n                   return '#F7846A';\n               }    \n            }  \n          }\n         }\n          \n          $scope.hideNewContactForm=function(){\n            $scope.contact={};\n            $scope.showNewContact=false;\n            $( window ).trigger( 'resize' ); \n         }\n         $scope.hideNewCaseForm=function(){\n            $scope.casee={};\n            $scope.casee.priority = 4;\n            $scope.showNewCase=false;\n            $( window ).trigger( 'resize' ); \n         }\n         $scope.hideNewOppForm=function(){\n            $scope.opportunity={};\n            $scope.showNewOpp=false;\n            $( window ).trigger( 'resize' ); \n         }\n        // HKA 01.12.2013 Add Case related to Contact\n        $scope.saveCase = function(casee) {\n          $scope.case_err={};\n          if (!casee.name) $scope.case_err.name=true;\n                else $scope.case_err.name=false;\n          if (!$scope.case_err.name) { \n            casee.account=$scope.account.entityKey;\n            casee.access=$scope.account.access;\n            casee.infonodes = $scope.prepareInfonodesCase();\n            casee.status = $scope.status_selected.entityKey;           \n            Case.insert($scope,casee);      \n            $scope.showNewCase=false;\n            $scope.casee={};\n            $scope.apply()\n          }\n        };\n        $scope.addTagsTothis=function(){\n              var tags=[];\n              var items = [];\n              tags=$('#select2_sample2').select2(\"val\");\n              $('#assigneeTagsToAccount').modal('hide');\n              console.log(tags);\n                  angular.forEach(tags, function(tag){\n                    var params = {\n                          'parent': $scope.account.entityKey,\n                          'tag_key': tag\n                    };\n                    Tag.attach($scope,params);\n                  });\n          };\n         $scope.edgeInserted = function() {\n          /* $scope.tags.push()*/\n          };\n         $scope.removeTag = function(tag,$index) {\n            var params = {'tag': tag,'index':$index}\n            Edge.delete($scope, params);\n        }\n        $scope.edgeDeleted=function(index){\n         $scope.account.tags.splice(index, 1);\n         $scope.apply();\n        }\n        $scope.editbeforedelete = function (item, typee, index) {\n            $scope.selectedItem={'item':item,'typee':typee,'index':index};\n            $('#BeforedeleteAccount').modal('show');\n         };\n         $scope.editbeforedisassociate = function(item,typee,index){\n            $scope.selectedItem={'item':item,'typee':typee,'index':index};\n            $('#beforedelinkContact').modal('show');\n         };\n         $scope.deleteItem=function(){\n            var params = {'entityKey':$scope.selectedItem.item.entityKey};\n            console.log(params);\n            if ($scope.selectedItem.typee=='account') {\n                Account.delete($scope, params);\n            }else{\n                if ($scope.selectedItem.typee=='contact') {\n                 Contact.delete($scope, params);                 \n                }else{\n                    if ($scope.selectedItem.typee=='opportunity') {\n                         Opportunity.delete($scope, params);\n                    }else{\n                        if ($scope.selectedItem.typee=='case') {\n                             Case.delete($scope, params);\n                        };\n                    }\n                }    \n            }\n            \n             $('#BeforedeleteAccount').modal('hide');\n         }\n         $scope.disassociateItem=function(){\n            var params ={'start_node':$scope.account.entityKey,'end_node':$scope.selectedItem.item.entityKey,'kind':'contacts'};\n            console.log(params);\n            Edge.delete($scope,params);            \n            $('#beforedelinkContact').modal('hide');\n         }\n         $scope.itemDisassociated=function(){\n            if ($scope.selectedItem.typee==\"contact\") {\n              console.log(\"in typpe==contact\")\n              $scope.contacts.splice($scope.selectedItem.index, 1);\n            };\n            $scope.selectedItem={};\n         }\n         $scope.contactDeleted = function(resp){\n               $scope.contacts.splice($scope.selectedItem.index, 1);\n               $scope.apply();\n               $scope.waterfallTrigger();\n         };\n         $scope.caseDeleted = function(resp){\n               $scope.cases.splice($scope.selectedItem.index, 1);\n               $scope.apply();\n               $scope.waterfallTrigger();\n         };\n        $scope.oppDeleted = function(resp){\n               $scope.opportunities.splice($scope.selectedItem.index, 1);\n               $scope.apply();\n               $scope.waterfallTrigger();\n         };\n\n\n        $scope.fromNow = function(fromDate){\n            return moment(fromDate,\"YYYY-MM-DD HH:mm Z\").fromNow();\n        }\n         $scope.prepareEmbedLink=function(link){\n                return link.replace(/preview/gi, \"edit\");\n        }\n        $scope.editbeforedeleteDoc=function(){\n            $('#beforedeleteDoc').modal('show');\n        }\n        $scope.deleteDocs=function(){\n            var params={}\n            angular.forEach($scope.selectedDocs, function (doc) {\n                params={\n                    entityKey:doc.entityKey\n                }\n                Attachement.delete($scope, params);\n            });\n            $('#beforedeleteDoc').modal('hide');\n        }\n        $scope.docDeleted=function(entityKey){\n            var ind=null;\n            var listIndex=null;\n            console.log(\"in docDeleted\");\n            console.log(\"entityKey\");\n            console.log(entityKey);\n            angular.forEach($scope.selectedDocs, function (doc) {\n                if (doc.entityKey==entityKey) {\n                    ind=$scope.selectedDocs.indexOf(doc);\n                    listIndex=$scope.documents.indexOf(doc);\n                    console.log(\"doc index found\");\n                    console.log(\"listIndex\",ind);\n                    console.log(\"listIndex\",listIndex);\n                };\n            });\n            if (ind!=-1) {\n                console.log(\"in if ind\");\n                $scope.documents.splice(listIndex,1);\n                $scope.selectedDocs.splice(ind,1);\n                $scope.apply(); \n                if ($scope.documents.length==0) {\n                    $scope.blankStatdocuments=true;\n                };\n                console.log($scope.documents);\n                console.log($scope.selectedDocs);\n            };\n    };\n    $scope.docCreated=function(url){\n            console.log('here docCreated');\n            window.open($scope.prepareEmbedLink(url),'_blank');\n        }\n    $scope.isSelectedDoc = function (doc) {\n            return ($scope.selectedDocs.indexOf(doc) >= 0);\n        };\n    $scope.selectDocWithCheck=function($event,index,doc){\n\n              var checkbox = $event.target;\n\n               if(checkbox.checked){\n                  if ($scope.selectedDocs.indexOf(doc) == -1) {             \n                    $scope.selectedDocs.push(doc);\n                    console.log(\"opp pushed\");\n                    console.log($scope.selectedDocs);\n                  }\n               }else{       \n\n                    $scope.selectedDocs.splice($scope.selectedDocs.indexOf(doc) , 1);\n               }\n\n        }\n        //$tocopy\n        $scope.runTheProcess = function() {\n\n            var params = {\n                'id': $route.current.params.accountId,\n                'topics': {\n                    'limit': '7'\n                },\n                'contacts': {\n                    'limit': '15'\n                },\n                'opportunities': {\n                    'limit': '15'\n                },\n                'cases': {\n                    'limit': '15'\n                },\n                'documents': {\n                    'limit': '15'\n                },\n                'tasks': {\n                },\n                'events': {\n                }\n\n\n            };\n            $scope.getCustomFields(\"opportunities\");\n            $scope.getCustomFields(\"cases\");\n            Account.get($scope, params);\n            User.list($scope, {});\n            Opportunitystage.list($scope, {'order':'probability'});\n            Casestatus.list($scope, {});\n            var paramsTag = {'about_kind': 'Account'};\n            Tag.list($scope, paramsTag);\n            console.log(\"aaaaaafteeeer\");\n            ga('send', 'pageview', '/accounts/show');\n            window.Intercom('update');\n            $scope.mapAutocompleteCalendar();\n            $scope.mapAutocomplete();\n        };\n\n  $scope.oppAction=function(){\n        if ($scope.showNewOpp) {\n            console.log('in save opp');\n            $scope.saveOpp($scope.opportunity);\n        }else{\n             $scope.showNewOpp=true;\n        };\n      }\n   $scope.caseAction=function(){ \n        if ($scope.showNewCase) {\n            console.log('in save opp');\n            $scope.saveCase($scope.casee);\n        }else{\n             $scope.showNewCase=true;\n        };\n      }\n     $scope.editbeforedeletecase = function(casee){\n         $scope.selectedCase=casee;\n         $('#BeforedeleteCase').modal('show');\n       };\n        $scope.deletecase = function(){\n          var params={};\n            angular.forEach($scope.selectedCases, function (casee) {\n                    params = {'entityKey': casee.entityKey};\n                    Case.delete($scope, params);\n                });\n            $('#BeforedeleteCase').modal('hide');\n            $scope.allCasesSelected=false;\n       };\n         $scope.caseDeleted = function(entityKey){\n               var caseTodelete=null;\n               console.log(\"entityKey to search\");\n               console.log(entityKey);\n            angular.forEach($scope.selectedCases, function (casee) {\n                    if (casee.entityKey==entityKey) {\n                      console.log(\"entityKey found\");\n                      console.log(casee.entityKey);\n                        caseTodelete=casee;\n                    };\n                });\n            var indexInCases=$scope.cases.indexOf(caseTodelete);\n            console.log(indexInCases);\n            var indexInSelection=$scope.selectedCases.indexOf(caseTodelete);\n             console.log(indexInSelection);\n            $scope.cases.splice(indexInCases, 1);\n            $scope.selectedCases.splice(indexInSelection, 1);\n            $scope.apply();\n         };\n          $scope.unselectAllCases = function ($event) {\n            var element = $($event.target);\n            $scope.selectedCases=[];\n        };\n        $scope.selectAllCases = function ($event) {\n\n            var checkbox = $event.target;\n            if (checkbox.checked) {\n                $scope.selectedCases = [];\n                $scope.selectedCases = $scope.selectedCases.concat($scope.cases);\n\n                $scope.allCasesSelected = true;\n\n            } else {\n\n                $scope.selectedCases = [];\n                $scope.allCasesSelected = false;\n\n            }\n        };\n      $scope.isSelectedCase = function (casee) {\n            return ($scope.selectedCases.indexOf(casee) >= 0);\n        };\n      $scope.selectCaseWithCheck=function($event,index,casee){\n\n              var checkbox = $event.target;\n\n               if(checkbox.checked){\n                  if ($scope.selectedCases.indexOf(casee) == -1) {             \n                    $scope.selectedCases.push(casee);\n                    console.log(\"opp pushed\");\n                    console.log($scope.selectedCases);\n                  }\n               }else{       \n\n                    $scope.selectedCases.splice($scope.selectedCases.indexOf(casee) , 1);\n               }\n\n        }\n     $scope.addCustomFieldForCase = function (customField,option) {  \n            if (customField) {\n                    if (!customField.field) {\n                        customField.field=customField.name;\n                    };\n                    var custom_value=null;\n                        if (option) {\n                            \n                            if (!customField.value) {\n                                customField.value=[];\n                            };\n                            customField.value.push(option);\n                            custom_value=JSON.stringify(customField.value);\n                        }else{\n\n                             custom_value=customField.value;\n                        };\n\n                        \n                        \n                    if (customField.field && customField.value) {\n\n                        var params = {\n                                    \"field\": customField.field,\n                                    \"property_type\":customField.id,\n                                    \"value\": custom_value\n                                };\n                        $scope.caseCustomfields.push(params);\n                        console.log(' $scope.caseCustomfields');\n                        console.log( $scope.caseCustomfields);\n\n                    }\n            }\n            $('#customfields').modal('hide');\n            $scope.customfield = {};\n            $scope.showCustomFieldForm = false;\n        };\n        $scope.prepareInfonodesCase = function(){\n            var infonodes = [];\n\n            angular.forEach($scope.caseCustomfields, function(customfield){\n                var infonode = {\n                                'kind':'customfields',\n                                'fields':[\n                                        {\n                                        'field':customfield.field,\n                                        'property_type':customfield.property_type,\n                                        'value':customfield.value\n                                        }\n                                ]\n\n                              }\n                infonodes.push(infonode);\n            });\n            return infonodes;\n        };\n  $scope.editbeforedeleteopp = function(opportunity){\n         $scope.selectedOpportunity=opportunity;\n         $('#BeforedeleteOpportunity').modal('show');\n       };\n        $scope.deleteopportunity = function(){\n          var params={};\n            angular.forEach($scope.selectedOpps, function (opp) {\n                    params = {'entityKey': opp.entityKey};\n                    Opportunity.delete($scope, params);\n                });\n            $('#BeforedeleteOpportunity').modal('hide');\n            $scope.allOppsSelected=false;\n       };\n         $scope.oppDeleted = function(entityKey){\n               var oppTodelete=null;\n            angular.forEach($scope.selectedOpps, function (opp) {\n                    if (opp.entityKey==entityKey) {\n                        oppTodelete=opp;\n                    };\n                });\n            var indexInOpp=$scope.opportunities.indexOf(oppTodelete);\n            var indexInSelection=$scope.selectedOpps.indexOf(oppTodelete);\n            $scope.opportunities.splice(indexInOpp, 1);\n            $scope.selectedOpps.splice(indexInSelection, 1);\n            $scope.apply();\n         };\n         $scope.saveOpp = function(opportunity){\n          $scope.oppo_err={};\n           if (!opportunity.name) $scope.oppo_err.name=true;\n            else $scope.oppo_err.name=false;  \n          if (!opportunity.amount_per_unit) $scope.oppo_err.amount_per_unit=true;\n            else $scope.oppo_err.amount_per_unit=false;\n\n          if (!$scope.oppo_err.amount_per_unit&&!$scope.oppo_err.name) {\n          opportunity.account=$scope.account.entityKey;\n          opportunity.infonodes = $scope.prepareInfonodesOpp();\n            \n            if (opportunity.duration_unit=='fixed'){\n              opportunity.amount_total = parseInt(opportunity.amount_per_unit);\n              opportunity.opportunity_type = 'fixed_bid';\n            }else{\n              opportunity.opportunity_type = 'per_' + opportunity.duration_unit;\n              opportunity.amount_total = opportunity.amount_per_unit * opportunity.duration;\n            }\n          var closed_date = $filter('date')(opportunity.closed_date,['yyyy-MM-dd']);\n          opportunity.stage=$scope.initialStage.entityKey;\n          opportunity.closed_date=closed_date;\n          Opportunity.insert($scope,opportunity);\n          $scope.showNewOpp = false;\n          $scope.opportunity={};\n          $scope.opportunity.duration_unit='fixed'\n          $scope.opportunity.currency='USD';\n            $scope.apply();\n          }\n      \n        };\n                $scope.addCustomFieldForOpp = function (customField,option) {  \n            if (customField) {\n                    if (!customField.field) {\n                        customField.field=customField.name;\n                    };\n                    var custom_value=null;\n                        if (option) {\n                            \n                            if (!customField.value) {\n                                customField.value=[];\n                            };\n                            customField.value.push(option);\n                            custom_value=JSON.stringify(customField.value);\n                        }else{\n\n                             custom_value=customField.value;\n                        };\n\n                        \n                        \n                    if (customField.field && customField.value) {\n\n                        var params = {\n                                    \"field\": customField.field,\n                                    \"property_type\":customField.id,\n                                    \"value\": custom_value\n                                };\n                        $scope.oppCustomfields.push(params);\n                        console.log($scope.customfields);\n\n                    }\n            }\n            $('#customfields').modal('hide');\n            $scope.customfield = {};\n            $scope.showCustomFieldForm = false;\n\n        };\n        $scope.prepareInfonodesOpp = function(){\n            var infonodes = [];\n\n            angular.forEach($scope.oppCustomfields, function(customfield){\n                var infonode = {\n                                'kind':'customfields',\n                                'fields':[\n                                        {\n                                        'field':customfield.field,\n                                        'property_type':customfield.property_type,\n                                        'value':customfield.value\n                                        }\n                                ]\n\n                              }\n                infonodes.push(infonode);\n            });\n            return infonodes;\n        };\n        $scope.changeInitialStage=function(stage){\n            $scope.initialStage=stage;\n            console.log($scope.initialStage.probability);\n          }\n     $scope.showAddTimeScale = function () {\n            console.log('in account time scale');\n            $('#newTimeModalForm2').modal('show');\n        }\n                //HKA 10.11.2013 Add event\n        $scope.addTimeScale = function (timescale) {\n            console.log(\"in time scale function\");\n            if (timescale.title != null && timescale.title != \"\") {\n                console.log(\"in condition\");\n                var params = {}\n                $scope.allday = true;\n                var ends_at = moment(moment(timescale.starts_at_allday).format('YYYY-MM-DDT00:00:00.000000'))\n\n                params = {\n                    'title': timescale.title,\n                    'starts_at': $filter('date')(timescale.starts_at_allday, ['yyyy-MM-ddT00:00:00.000000']),\n                    'ends_at': ends_at.add('hours', 23).add('minute', 59).add('second', 59).format('YYYY-MM-DDTHH:mm:00.000000'),\n                    'allday': \"true\",\n                    'access': $scope.opportunity.access||'public',\n                    'parent': $scope.opportunity.entityKey,\n                    'reminder': $scope.reminder,\n                    'timezone': $scope.timezoneChosen\n                }\n                $scope.opportunity.timeline.push(params);\n                console.log($scope.opportunity.timeline);\n                $('#newTimeModalForm2').modal('hide');\n\n                $scope.timescale = {};\n                $scope.timezonepicker = false;\n                $scope.timezone = \"\";\n                $scope.remindme_show = \"\";\n                $scope.show_choice = \"\";\n                $scope.parent_related_to = \"\";\n                $scope.Guest_params = false;\n                $scope.searchRelatedQuery = \"\";\n                $scope.something_picked = false;\n                $scope.newEventform = false;\n                $scope.remindmeby = false;\n\n            }\n        }\n        $scope.addNoteOpp = function () {\n            $scope.opportunity.notes.push($scope.newOppNote)\n            $scope.newOppNote = {}\n        }\n        $scope.deleteEventTime =function(eventt){\n          var ind=$scope.opportunity.timeline.indexOf(eventt)\n          $scope.opportunity.timeline.splice(ind,1);\n           //$('#addLeadModal').modal('show');\n         }\n         $scope.deletePicked= function(){\n              $scope.something_picked=false;\n              $scope.remindme_show=\"\";\n              $scope.remindmeby=false;\n            }\n\n\n            $scope.reminder=0;\n            $scope.Remindme=function(choice){\n              $scope.reminder=0;\n              $scope.something_picked=true;\n             $scope.remindmeby=true;  \n              switch(choice){\n                case 0: \n                $scope.remindme_show=\"No notification\";\n                $scope.remindmeby=false;  \n                break;\n                case 1:\n                $scope.remindme_show=\"At time of event\"; \n                $scope.reminder=1;\n                break;\n                case 2:\n                $scope.remindme_show=\"30 minutes before\";\n                $scope.reminder=2;  \n                break;\n                case 3: \n                $scope.remindme_show=\"1 hour\";\n                $scope.reminder=3; \n                break;\n                case 4: \n                $scope.remindme_show=\"1 day\"; \n                $scope.reminder=4;\n                break;\n                case 5:\n                $scope.remindme_show=\"1 week\";\n                $scope.reminder=5;  \n                break;\n              }\n             \n              }\n           $scope.selectCompetitor = function(){\n        console.log(\"enter fired\");\n        console.log($scope.searchCompetitorQuery);\n        if (typeof($scope.searchCompetitorQuery)=='object') {\n           console.log(\"enter object\");\n           $scope.competitors.push($scope.searchCompetitorQuery);\n            if ($scope.opportunity.competitors==undefined) {\n                $scope.opportunity.competitors=[];\n            };\n           $scope.opportunity.competitors.push($scope.searchCompetitorQuery.entityKey);\n        }else{\n           if ($scope.searchCompetitorQuery!=\"\") {\n             console.log(\"enter string\");\n            $scope.competitors.push({name:$scope.searchCompetitorQuery});\n             if ($scope.opportunity.competitors==undefined) {\n                $scope.opportunity.competitors=[];\n            };\n            $scope.opportunity.competitors.push($scope.searchCompetitorQuery);\n           };          \n        };   \n        $scope.searchCompetitorQuery=\"\";  \n        $scope.apply();        \n      };\n        $scope.unselectAllOpp = function ($event) {\n            var element = $($event.target);\n            $scope.selectedOpps=[];\n        };\n        $scope.selectAllOpp = function ($event) {\n\n            var checkbox = $event.target;\n            if (checkbox.checked) {\n                $scope.selectedOpps = [];\n                $scope.selectedOpps = $scope.selectedOpps.concat($scope.opportunities);\n\n                $scope.allOppsSelected = true;\n\n            } else {\n\n                $scope.selectedOpps = [];\n                $scope.allOppsSelected = false;\n\n            }\n        };\n      $scope.isSelectedOpp = function (opp) {\n            return ($scope.selectedOpps.indexOf(opp) >= 0);\n        };\n        $scope.selectOppWithCheck=function($event,index,opportunity){\n\n              var checkbox = $event.target;\n\n               if(checkbox.checked){\n                  if ($scope.selectedOpps.indexOf(opportunity) == -1) {             \n                    $scope.selectedOpps.push(opportunity);\n                    console.log(\"opp pushed\");\n                    console.log($scope.selectedOpps);\n                  }\n               }else{       \n\n                    $scope.selectedOpps.splice($scope.selectedOpps.indexOf(opportunity) , 1);\n               }\n\n        }\n  $scope.getCustomFields=function(related_object){\n            Customfield.list($scope,{related_object:related_object});\n        }\n        $scope.listResponse=function(items,related_object){\n            //infonodes.customfields\n            if (related_object==\"accounts\") {\n                $scope[related_object].customfields=items;\n                var additionalCustomFields=[];\n                angular.forEach($scope.infonodes.customfields, function (infonode) {\n                    \n                    infonode.property_type=infonode.fields[0].property_type;\n                    infonode.value=infonode.fields[0].value;\n                    infonode.field=infonode.fields[0].field;\n                if (infonode.property_type==\"\"||infonode.property_type==\"StringProperty\"||infonode.property_type==null) {\n                    console.log('in stringtype______________________________________ ');\n                    console.log(infonode);\n                    additionalCustomFields.push(infonode);\n                }else{\n                        var schemaExists=false;\n                        angular.forEach($scope[related_object].customfields, function (customfield) {\n                        if (customfield.id==infonode.property_type) {\n                            console.log('in not stringprope ______________________________');\n                            console.log(infonode);\n                            schemaExists=true;\n                            var info_value=null;\n                            if (infonode.fields[0].field==\"property_type\") {\n                                info_value=infonode.fields[1].value;\n                            }else{\n                                info_value=infonode.fields[0].value;\n                            };\n                            if (customfield.field_type==\"checkbox\") {\n                                customfield.value=JSON.parse(info_value);\n                            }else{\n                                customfield.value=info_value;\n                            };\n                          \n                            customfield.infonode_key=infonode.entityKey;\n                            \n                             \n                            };\n                        });\n                        if (!schemaExists) {\n                             \n                            additionalCustomFields.push(infonode);\n                        };\n                };\n                    \n            });\n            $scope.infonodes.customfields=additionalCustomFields;\n            $scope.apply();\n            }else{\n              if (related_object==\"opportunities\") {\n                 $scope.opp={};\n                 $scope.opp.customfields=$.extend(true, [], items);\n              };\n              if (related_object==\"cases\") {\n                 $scope.reCase={};\n                 $scope.reCase.customfields=$.extend(true, [], items);\n              };\n             \n              $scope.apply();\n            }\n            \n            \n        }\n  $scope.mapAutocompleteCalendar=function(){\n         \n            $scope.addresses = {};/*$scope.billing.addresses;*/\n            Map.autocompleteCalendar($scope,\"pac-input2\");\n        }\n\n\n      $scope.addGeoCalendar = function(address){\n     \n         $scope.ioevent.where=address.formatted\n           $scope.locationShosen=true;\n         $scope.$apply();\n      };\n\n$scope.lunchMapsCalendar=function(){\n   \n        // var locality=address.formatted || address.street+' '+address.city+' '+address.state+' '+address.country;\n         window.open('http://www.google.com/maps/search/'+$scope.ioevent.where,'winname',\"width=700,height=550\");\n    \n     }\n\n\n\n        $scope.mapAutocomplete=function(){\n            $scope.addresses = $scope.account.addresses;\n            Map.autocomplete ($scope,\"pac-input\");\n            Map.autocomplete ($scope,\"relatedaddressInput\");\n        }\n        $scope.getColaborators=function(){\n          Permission.getColaborators($scope,{\"entityKey\":$scope.account.entityKey});  \n        } \n        // $scope.getCompanyDetails=function(entityKey){\n        //        Account.getCompanyDetails($scope,{'entityKey':entityKey})\n        //        Account.get_twitter($scope,{'entityKey':entityKey})\n        //        console.log('getCompanyDetails');\n        //        console.log( $scope.companydetails);\n        //        console.log('get-twitter');\n        //        console.log($scope.twitterProfile);\n                \n        // }\n        $scope.noCompanyDetails=function(){\n            if (jQuery.isEmptyObject($scope.companydetails)&&jQuery.isEmptyObject($scope.twitterProfile)) {\n                return true;\n            }else{\n                return false;\n            };\n        }\n        $scope.isEmptyArray=function(Array){\n                if (Array!=undefined && Array.length>0) {\n                return false;\n                }else{\n                    return true;\n                };    \n            \n        }\n        $scope.companydetailsEmpty=function(){\n            if (jQuery.isEmptyObject($scope.companydetails)) {\n                return true;\n            }else{\n                return false;\n            };\n        }\n        $scope.twitterProfileEmpty=function(){\n            if (jQuery.isEmptyObject($scope.companydetails)) {\n                return true;\n            }else{\n                return false;\n            };\n        }\n        $scope.selectMemberToTask = function() {\n            console.log($scope.selected_members);\n            if ($scope.selected_members.indexOf($scope.user) == -1) {\n                $scope.selected_members.push($scope.user);\n                $scope.selected_member = $scope.user;\n                $scope.user = $scope.selected_member.google_display_name;\n            }\n            $scope.user = '';\n        };\n        $scope.unselectMember = function(index) {\n            $scope.selected_members.splice(index, 1);\n            console.log($scope.selected_members);\n        };\n        $scope.preparePercent = function(percent) {\n\n            return parseInt(percent);\n        };\n        $scope.getPosition = function(index) {\n            if (index < 4) {\n\n                return index + 1;\n            } else {\n                return (index % 4) + 1;\n            }\n        };\n        $scope.waterfallTrigger = function() {\n\n\n            /* $('.waterfall').hide();\n             $('.waterfall').show();*/\n            $(window).trigger(\"resize\");\n        };\n\n        // We need to call this to refresh token when user credentials are invalid\n        $scope.refreshToken = function() {\n            Auth.refreshToken();\n        };\n        //HKA 06.12.2013  Manage Next & Prev Page of Topics\n        $scope.TopiclistNextPageItems = function() {\n\n\n            var nextPage = $scope.topicCurrentPage + 1;\n            var params = {};\n            if ($scope.topicpages[nextPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'topics': {\n                        'limit': '7',\n                        'pageToken': $scope.topicpages[nextPage]\n                    }\n                }\n                $scope.topicCurrentPage = $scope.topicCurrentPage + 1;\n                Account.get($scope, params);\n            }\n\n\n        }\n        $scope.editTrigger = function(name) {\n            name.$show();\n        }\n        // HKA 08.05.2014 Delete infonode\n\n        $scope.deleteInfonode = function (entityKey, kind) {\n            var params = {'entityKey': entityKey, 'kind': kind};\n            if (params.kind==\"customfields\") {\n                InfoNode.deleteCustom($scope, params);\n            }else{\n                InfoNode.delete($scope, params);\n            };\n        };\n        $scope.customfieldDeleted=function(entityKey){\n            var index=null;\n            angular.forEach($scope.infonodes.customfields, function (cus) {\n              if (cus.entityKey==entityKey) {\n                index=$scope.infonodes.customfields.indexOf(cus);\n              };\n            });\n            if (index!=null) {\n                $scope.infonodes.customfields.splice(index,1);\n                $scope.apply();\n            };\n        };\n        $scope.TopiclistPrevPageItems = function() {\n\n            var prevPage = $scope.topicCurrentPage - 1;\n            var params = {};\n\n            if ($scope.topicpages[prevPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'topics': {\n                        'limit': '7',\n                        'pageToken': $scope.topicpages[prevPage]\n                    }\n                }\n            } else {\n                params = {\n                    'id': $scope.account.id,\n                    'topics': {\n                        'limit': '7'\n                    }\n                }\n            }\n            $scope.topicCurrentPage = $scope.topicCurrentPage - 1;\n            Account.get($scope, params);\n\n        }\n        $scope.listTags=function(){\n              var paramsTag = {'about_kind':'Account'}\n              Tag.list($scope,paramsTag);\n             };\n        $scope.tagattached = function(tag, index) {\n            if ($scope.account.tags == undefined) {\n                $scope.account.tags = [];\n            }\n            var ind = $filter('exists')(tag, $scope.account.tags);\n            if (ind == -1) {\n                $scope.account.tags.push(tag);\n                \n            } else {\n            }\n            $('#select2_sample2').select2(\"val\", \"\");\n            $scope.apply();\n        };\n//HKA 06.12.2013 Manage Prev & Next Page on Related List Contact\n        $scope.ContactlistNextPageItems = function() {\n\n\n            var nextPage = $scope.contactCurrentPage + 1;\n            var params = {};\n            if ($scope.contactpages[nextPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'contacts': {\n                        'limit': '15',\n                        'pageToken': $scope.contactpages[nextPage]\n                    }\n                }\n                $scope.contactCurrentPage = $scope.contactCurrentPage + 1;\n                Account.get($scope, params);\n            }\n        }\n        $scope.ContactlistPrevPageItems = function() {\n\n            var prevPage = $scope.contactCurrentPage - 1;\n            var params = {};\n            if ($scope.contactpages[prevPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'contacts': {\n                        'limit': '6',\n                        'pageToken': $scope.contactpages[prevPage]\n                    }\n                }\n            } else {\n                params = {\n                    'id': $scope.account.id,\n                    'contacts': {\n                        'limit': '6'\n                    }\n                }\n            }\n            $scope.contactCurrentPage = $scope.contactCurrentPage - 1;\n            Account.get($scope, params);\n        }\n/// update account with inlineEdit\n        $scope.inlinePatch = function(kind, edge, name, entityKey, value) {\n            console.log(\"in account inlinePatch\");\n            if (kind == 'Account') {\n               console.log(\"in account kind\");\n              var params={};\n                switch(name){\n                  case \"name\": \n                  params.name=value;  \n                  break;\n                  case \"owner\":\n                  params.owner=value; \n                  break;\n                  case \"type\":\n                  params.account_type=value; \n                  break;\n                  case \"industry\":\n                  params.industry=value; \n                  break;\n                }\n                if (!$scope.isEmpty(params)) {\n                  params.id=entityKey;\n                  Account.patch($scope, params);  \n                }                \n            } else {\n                console.log('name');\n                console.log(name);\n                params = {\n                    'entityKey': entityKey,\n                    'parent': $scope.account.entityKey,\n                    'kind': edge,\n                    'fields': [\n                        {\n                            \"field\": name,\n                            \"value\": value\n                        }\n                    ]\n                };\n                console.log('Infonode params');\n                console.log(params);\n                InfoNode.patch($scope, params);\n            }\n\n\n        };\n\n\n//HKA 07.12.2013 Manage Prev & Next Page on Related List Opportunities\n        $scope.OpplistNextPageItems = function() {\n\n\n            var nextPage = $scope.oppCurrentPage + 1;\n            var params = {};\n            if ($scope.opppages[nextPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'opportunities': {\n                        'limit': '15',\n                        'pageToken': $scope.opppages[nextPage]\n                    }\n                }\n                $scope.oppCurrentPage = $scope.oppCurrentPage + 1;\n                Account.get($scope, params);\n            }\n\n        }\n\n        //HKA 07.12.2013 Manage Prev & Next Page on Related List Cases\n        $scope.CaselistNextPageItems = function() {\n\n\n            var nextPage = $scope.caseCurrentPage + 1;\n            var params = {};\n            if ($scope.casepages[nextPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'cases': {\n                        'limit': '15',\n                        'pageToken': $scope.casepages[nextPage]\n                    }\n                }\n                $scope.caseCurrentPage = $scope.caseCurrentPage + 1;\n                Account.get($scope, params);\n            }\n\n        }\n        $scope.CasePrevPageItems = function() {\n\n            var prevPage = $scope.caseCurrentPage - 1;\n            var params = {};\n            if ($scope.casepages[prevPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'cases': {\n                        'limit': '6',\n                        'pageToken': $scope.casepages[prevPage]\n                    }\n                }\n            } else {\n                params = {\n                    'id': $scope.account.id,\n                    'cases': {\n                        'limit': '6'\n                    }\n                }\n            }\n            $scope.caseCurrentPage = $scope.caseCurrentPage - 1;\n            Account.get($scope, params);\n        };\n        $scope.NeedlistNextPageItems = function() {\n\n\n            var nextPage = $scope.needsCurrentPage + 1;\n            var params = {};\n            if ($scope.needspages[nextPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'needs': {\n                        'limit': '6',\n                        'pageToken': $scope.needspages[nextPage]\n                    }\n                }\n\n            } else {\n                params = {\n                    'id': $scope.account.id,\n                    'needs': {\n                        'limit': '6'\n                    }\n                }\n            }\n            $scope.needsCurrentPage = $scope.needsCurrentPage + 1;\n            Account.get($scope, params);\n        }\n        $scope.NeedPrevPageItems = function() {\n\n            var prevPage = $scope.needsCurrentPage - 1;\n            var params = {};\n            if ($scope.needspages[prevPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'needs': {\n                        'limit': '6',\n                        'pageToken': $scope.needspages[prevPage]\n                    }\n                }\n            } else {\n                params = {\n                    'id': $scope.account.id,\n                    'needs': {\n                        'limit': '6'\n                    }\n                }\n            }\n            $scope.needsCurrentPage = $scope.needsCurrentPage - 1;\n            Account.get($scope, params);\n        };\n        // HKA 09.02.2014 Manage Next Prev page on ducument list\n        $scope.DocumentlistNextPageItems = function() {\n\n\n            var nextPage = $scope.documentCurrentPage + 1;\n            var params = {};\n            if ($scope.documentpages[nextPage]) {\n                params = {\n                    'id': $scope.account.id,\n                    'documents': {\n                        'limit': '15',\n                        'pageToken': $scope.documentpages[nextPage]\n                    }\n                }\n                $scope.documentCurrentPage = $scope.documentCurrentPage + 1;\n\n                Account.get($scope, params);\n            }\n\n\n        }\n       $scope.getResults=function(val,location){\n          console.log('here executed');\n          var url=ROOT+location+'?alt=json'\n          var config={\n            headers:  {\n                'Authorization': 'Bearer '+localStorage['access_token'],\n                'Accept': 'application/json'\n            }\n          }\n          var params= {\n                    \"q\": val\n                  } ;\n         return $http.post(url,params,config).then(function(response){\n                  if (response.data.items) {\n                    return response.data.items;\n                  }else{\n                    return [];\n                  };\n                  return response.data.items;\n                });\n      }\n      $scope.selectContact = function(){\n        console.log('$scope.searchAccountQuery ....');\n        console.log($scope.searchRelatedContactQuery);\n\n        if (typeof($scope.searchRelatedContactQuery)=='object'){\n            var params={\n            'id':$scope.account.id,\n              'new_contact':{\n               'contact':$scope.searchRelatedContactQuery.entityKey,\n               'is_decesion_maker':false\n              }\n            };  \n            Account.patch($scope,params);\n        }\n        $scope.searchRelatedContactQuery=\"\";\n      };\n\n        $scope.listTopics = function(account) {\n            var params = {\n                'id': $scope.account.id,\n                'topics': {\n                    'limit': '7'\n                }\n            };\n            Account.get($scope, params);\n\n        }\n        $scope.listDocuments = function() {\n            var params = {\n                'id': $scope.account.id,\n                'documents': {\n                    'limit': '15'\n                }\n            }\n            Account.get($scope, params);\n\n        }\n\n        $scope.hilightTopic = function() {\n\n            $('#topic_0').effect(\"bounce\", \"slow\");\n            $('#topic_0 .message').effect(\"highlight\", \"slow\");\n        }\n\n\n        $scope.selectMember = function() {\n            $scope.slected_memeber = $scope.user;\n            $scope.user = '';\n            $scope.sharing_with.push($scope.slected_memeber);\n\n        };\n        $scope.showCreateDocument = function(type) {\n\n            $scope.mimeType = type;\n            $('#newDocument').modal('show');\n        };\n        $scope.createDocument = function(newdocument) {\n            var mimeType = 'application/vnd.google-apps.' + $scope.mimeType;\n            var params = {\n                'parent': $scope.account.entityKey,\n                'title': newdocument.title,\n                'mimeType': mimeType\n            };\n            Attachement.insert($scope, params);\n\n        };\n        $scope.createPickerUploader = function() {\n            var projectfolder = $scope.account.folder;\n            var developerKey = 'AIzaSyDHuaxvm9WSs0nu-FrZhZcmaKzhvLiSczY';\n            var docsView = new google.picker.DocsView()\n                    .setIncludeFolders(true)\n                    .setSelectFolderEnabled(true);\n            var picker = new google.picker.PickerBuilder().\n                    addView(new google.picker.DocsUploadView().setParent(projectfolder)).\n                    addView(docsView).\n                    setCallback($scope.uploaderCallback).\n                    setOAuthToken(window.authResult.access_token).\n                    setDeveloperKey(developerKey).\n                    setAppId('935370948155-qm0tjs62kagtik11jt10n9j7vbguok9d').\n                    enableFeature(google.picker.Feature.MULTISELECT_ENABLED).\n                    build();\n            picker.setVisible(true);\n        };\n        // A simple callback implementation.\n        $scope.uploaderCallback = function(data) {\n            if (data.action == google.picker.Action.PICKED) {\n                var params = {\n                    'access': $scope.account.access||'public',\n                    'parent': $scope.account.entityKey\n                };\n                params.items = new Array();\n                $.each(data.docs, function(index) {\n                    var item = {'id': data.docs[index].id,\n                        'title': data.docs[index].name,\n                        'mimeType': data.docs[index].mimeType,\n                        'embedLink': data.docs[index].url\n\n                    };\n                    params.items.push(item);\n                });\n               Attachement.attachfiles($scope, params);}\n        }\n        $scope.createLogoPickerUploader = function() {\n            var developerKey = 'AIzaSyDHuaxvm9WSs0nu-FrZhZcmaKzhvLiSczY';\n            var picker = new google.picker.PickerBuilder().\n                addView(new google.picker.DocsUploadView()).\n                setCallback($scope.logoUploaderCallback).\n                setOAuthToken(window.authResult.access_token).\n                setDeveloperKey(developerKey).\n                setAppId('935370948155-qm0tjs62kagtik11jt10n9j7vbguok9d').\n                build();\n            picker.setVisible(true);\n        };\n        // A simple callback implementation.\n        $scope.logoUploaderCallback = function(data) {\n            if (data.action == google.picker.Action.PICKED) {\n                if (data.docs) {\n                    $scope.logo.logo_img_id = data.docs[0].id;\n                    $scope.logo.logo_img_url = data.docs[0].url;\n                    $scope.imageSrc = 'https://docs.google.com/uc?id=' + data.docs[0].id;\n                    $scope.apply();\n                    var params = {'id': $scope.account.id};\n                    params['logo_img_id'] = $scope.logo.logo_img_id;\n                    params['logo_img_url'] = $scope.logo.logo_img_url;\n                    Account.patch($scope, params);\n                }\n            }\n        }\n      $scope.createPickerUploaderContact= function() {\n            var projectfolder = $scope.account.folder;\n            var developerKey = 'AIzaSyDHuaxvm9WSs0nu-FrZhZcmaKzhvLiSczY';\n            var docsView = new google.picker.DocsView()\n                    .setIncludeFolders(true)\n                    .setSelectFolderEnabled(true);\n            var picker = new google.picker.PickerBuilder().\n                    addView(new google.picker.DocsUploadView().setParent(projectfolder)).\n                    addView(docsView).\n                    setCallback(function(data){\n                      if (data.action == google.picker.Action.PICKED) {\n                          if (data.docs) {\n                              $scope.contact_img.id = data.docs[0].id;\n                              $scope.contact_img.url = data.docs[0].url;\n                              $scope.imageSrcContact='https://docs.google.com/uc?id=' + data.docs[0].id;\n                              $scope.$apply();\n                          }\n                      }\n                    }).\n                    setOAuthToken(window.authResult.access_token).\n                    setDeveloperKey(developerKey).\n                    setAppId('935370948155-qm0tjs62kagtik11jt10n9j7vbguok9d').\n                    enableFeature(google.picker.Feature.MULTISELECT_ENABLED).\n                    build();\n            picker.setVisible(true);\n        };\n        $scope.share = function(slected_memeber) {\n\n        \n                var body = {'access': $scope.account.access||'public'};\n                var id = $scope.account.id;\n                var params = {'id': id,\n                    'access': $scope.account.access||'public'}\n                Account.patch($scope, params);\n                  // who is the parent of this event .hadji hicham 21-07-2014.\n\n                params[\"parent\"]=\"account\";\n                Event.permission($scope,params);\n                Task.permission($scope,params);\n        \n\n            if ($scope.sharing_with.length > 0) {\n\n                var items = [];\n\n                angular.forEach($scope.sharing_with, function(user) {\n                    var item = {\n                        'type': \"user\",\n                        'value': user.entityKey\n                    };\n                    items.push(item);\n                });\n\n                if (items.length > 0) {\n                    var params = {\n                        'about': $scope.account.entityKey,\n                        'items': items\n                    }\n                    Permission.insert($scope, params);\n                }\n\n\n                $scope.sharing_with = [];\n\n\n            }\n\n        };\n        $scope.showModal = function() {\n            $('#addAccountModal').modal('show');\n        };\n        $scope.addNote = function(note) {\n            var params = {\n                'about': $scope.account.entityKey,\n                'title': note.title,\n                'content': note.content\n            };\n            Note.insert($scope, params);\n            $scope.note.title = '';\n            $scope.note.content = '';\n        };\n        $scope.editaccount = function() {\n            $('#EditAccountModal').modal('show');\n        };\n        //HKA 22.11.2013 Edit tagline of Account\n        $scope.edittagline = function() {\n            $('#EditTagModal').modal('show');\n        };\n        //HKA Edit Introduction on Account\n        $scope.editintro = function() {\n            $('#EditIntroModal').modal('show');\n        };\n        //HKA 09.11.2013 Add a new Tasks\n        $scope.addTask = function(task) {\n                if ($scope.newTaskform==false) {\n                      $scope.newTaskform=true;\n               }else{\n                if (task.title!=null) {\n                        //  $('#myModal').modal('hide');\n                if (task.due){\n                    var dueDate= $filter('date')(task.due,['yyyy-MM-ddT00:00:00.000000']);\n                    params ={'title': task.title,\n                              'due': dueDate,\n                              'parent': $scope.account.entityKey,\n                              'access':$scope.account.access||'public'\n                    }\n\n                }else{\n                    params ={'title': task.title,\n                             'parent': $scope.account.entityKey,\n                             'access':$scope.account.access\n                           }\n                };\n                if ($scope.selected_members!=[]) {\n                      params.assignees=$scope.selected_members;\n                    };\n                    var tags=[];\n                    tags=$('#select2_sample2').select2(\"val\");\n                    if (tags!=[]) {\n                      var tagitems = [];\n                      angular.forEach(tags, function(tag){\n                      var item = {'entityKey': tag };\n                      tagitems.push(item);\n                    });\n                      params.tags=tagitems;\n                    };\n\n               Task.insert($scope,params);\n                $scope.newTask={};\n                $scope.newTaskform=false;\n                $scope.selected_members=[];\n            }else{\n                $scope.newTask={};\n                $scope.newTaskform=false;\n          }\n         }\n        };\n\n    //HKA 27.07.2014 Add button cancel on Task form\n       $scope.closeTaskForm=function(newTask){\n               $scope.newTask={};\n                $scope.newTaskform=false;\n    };\n\n        $scope.hilightTask = function() {\n\n            $('#task_0').effect(\"highlight\", \"slow\");\n            $('#task_0').effect(\"bounce\", \"slow\");\n\n        };\n      $scope.lunchNew=function(){\n            console.log('wwwwwwwwwwwwork');\n            $('#testnonefade').modal(\"show\");\n            $(\".modal-backdrop\").remove();\n        }\n        $scope.listTasks = function() {\n            var params = {\n                'id': $scope.account.id,\n                'events': {},\n                'tasks': {}\n            };\n            Account.get($scope, params);\n        };\n\n\n\n\n//*************new form event*******************/\n// HADJI HICHAM 31/05/2015 \n\n$scope.showAddEventPopup=function(){  \n          $scope.locationShosen=false;\n         $('#newEventModalForm').modal('show');\n       }\n\n// HADJI HICHAM 31/05/2015\n//auto complete \n//auto complete \n\n     var invitesparams ={};\n     $scope.inviteResults =[];\n     $scope.inviteResult = undefined;\n     $scope.q = undefined;\n     $scope.invite = undefined;\n$scope.$watch('invite', function(newValue, oldValue) {\n      if($scope.invite!=undefined){\n        \n\n           invitesparams['q'] = $scope.invite;\n           gapi.client.crmengine.autocomplete(invitesparams).execute(function(resp) {\n              if (resp.items){\n          \n                $scope.filterInviteResult(resp.items);\n                $scope.$apply();\n              };\n\n            });\n        }\n\n     });\n\n\n\n$scope.filterInviteResult=function(items){\n\n      filtredInvitedResult=[];\n\n       for(i in items){\n      \n\n        if(items[i].emails!=\"\"){\n              var email= items[i].emails.split(\" \");\n               if(items[i].title==\" \"){\n                items[i].title=items[i].emails.split(\"@\")[0];\n               }\n\n              if(email.length>1){\n             \n              for (var i = email.length - 1; i >= 0; i--) {\n\n               filtredInvitedResult.push({emails:email[i], id: \"\", rank: \"\", title:items[i].title, type: \"Gcontact\"});\n              }\n\n              }else{\n                filtredInvitedResult.push(items[i]);\n              }   \n              \n\n                    }\n                \n       }\n        $scope.inviteResults=filtredInvitedResult;\n        $scope.$apply();\n}\n\n// select invite result \n$scope.selectInviteResult=function(){\n        $scope.invite=$scope.invite.emails ;\n\n}\n\n\n\n// add invite \n$scope.addInvite=function(invite){\n\n\n  $scope.invites.push(invite);\n  $scope.checkGuests();\n  $scope.invite=\"\";\n}\n\n$scope.deleteInvite=function(index){\n      $scope.invites.splice(index, 1);\n      $scope.checkGuests();\n}\n\n$scope.checkGuests=function(){\n   if($scope.invites.length !=0){\n   $scope.Guest_params=true;\n }else{\n  $scope.Guest_params=false;\n }\n}\n\n\n/***************reminder**************************/\n\n$scope.deletePicked= function(){\n  $scope.something_picked=false;\n  $scope.remindme_show=\"\";\n  $scope.remindmeby=false;\n}\n\n\n$scope.reminder=0;\n$scope.Remindme=function(choice){\n  $scope.reminder=0;\n  $scope.something_picked=true;\n $scope.remindmeby=true;  \n  switch(choice){\n    case 0: \n    $scope.remindme_show=\"No notification\";\n    $scope.remindmeby=false;  \n    break;\n    case 1:\n    $scope.remindme_show=\"At time of event\"; \n    $scope.reminder=1;\n    break;\n    case 2:\n    $scope.remindme_show=\"30 minutes before\";\n    $scope.reminder=2;  \n    break;\n    case 3: \n    $scope.remindme_show=\"1 hour\";\n    $scope.reminder=3; \n    break;\n    case 4: \n    $scope.remindme_show=\"1 day\"; \n    $scope.reminder=4;\n    break;\n    case 5:\n    $scope.remindme_show=\"1 week\";\n    $scope.reminder=5;  \n    break;\n  }\n \n  }\n/*******************************************/ \n$scope.timezoneChosen=$scope.timezone;\n$('#timeZone').on('change', function() {\n     $scope.timezoneChosen=this.value;\n});\n\n// $scope.checkallday=function(){\n//   $scope.allday=$scope.alldaybox;  \n//    }\n\n    \n/********************************************/\n //HKA 10.11.2013 Add event\n $scope.addEvent = function(ioevent){\n\n           // $scope.allday=$scope.alldaybox;  \n\n     \n\n\n            if (ioevent.title!=null&&ioevent.title!=\"\") {\n\n                    var params ={}\n\n\n                  // hadji hicham 13-08-2014.\n                  if($scope.allday){\n                  var ends_at=moment(moment(ioevent.starts_at_allday).format('YYYY-MM-DDT00:00:00.000000'))\n             \n                       params ={'title': ioevent.title,\n                      'starts_at':$filter('date')(ioevent.starts_at_allday,['yyyy-MM-ddT00:00:00.000000']),\n                      'ends_at': ends_at.add('hours',23).add('minute',59).add('second',59).format('YYYY-MM-DDTHH:mm:00.000000'),\n                      'where': ioevent.where,\n                      'allday':\"true\",\n                      'access':$scope.account.access||'public',\n                      'description':$scope.ioevent.note,\n                      'invites':$scope.invites,\n                      'parent':  $scope.account.entityKey,\n                      'guest_modify':$scope.guest_modify.toString(),\n                      'guest_invite':$scope.guest_invite.toString(),\n                      'guest_list':$scope.guest_list.toString(),\n                      'reminder':$scope.reminder,\n                      'method':$scope.method,\n                      'timezone':$scope.timezoneChosen\n\n                        }\n\n\n\n                  }else{\n\n                        console.log(\"yeah babay\");\n                        console.log($scope.allday);\n\n                  if (ioevent.starts_at){\n                    if (ioevent.ends_at){\n                      // params ={'title': ioevent.title,\n                      //         'starts_at': $filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      //         'ends_at': $filter('date')(ioevent.ends_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      //         'where': ioevent.where,\n                      //         'parent':$scope.lead.entityKey,\n                      //         'allday':\"false\",\n                      //         'access':$scope.lead.access\n                      // }\n                    params ={'title': ioevent.title,\n                      'starts_at':$filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      'ends_at': $filter('date')(ioevent.ends_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      'where': ioevent.where,\n                      'allday':\"false\",\n                      'access':$scope.account.access,\n                      'description':$scope.ioevent.note,\n                      'invites':$scope.invites,\n                      'parent':  $scope.account.entityKey,\n                      'guest_modify':$scope.guest_modify.toString(),\n                      'guest_invite':$scope.guest_invite.toString(),\n                      'guest_list':$scope.guest_list.toString(),\n                      'reminder':$scope.reminder,\n                      'method':$scope.method,\n                      'timezone':$scope.timezoneChosen\n\n                        }\n\n                    }else{\n                      // params ={\n                      //   'title': ioevent.title,\n                      //         'starts_at': $filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      //         'where': ioevent.where,\n                      //         'parent':$scope.lead.entityKey,\n                      //         'ends_at':moment(ioevent.ends_at).add('hours',2).format('YYYY-MM-DDTHH:mm:00.000000'),\n                      //         'allday':\"false\",\n                      //         'access':$scope.lead.access\n                      // }\n\n                            params ={'title': ioevent.title,\n                      'starts_at':$filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      'ends_at': moment(ioevent.ends_at).add('hours',2).format('YYYY-MM-DDTHH:mm:00.000000'),\n                      'where': ioevent.where,\n                      'allday':\"false\",\n                      'access':$scope.account.access||'public',\n                      'description':$scope.ioevent.note,\n                      'invites':$scope.invites,\n                      'parent':  $scope.account.entityKey,\n                      'guest_modify':$scope.guest_modify.toString(),\n                      'guest_invite':$scope.guest_invite.toString(),\n                      'guest_list':$scope.guest_list.toString(),\n                      'reminder':$scope.reminder,\n                      'method':$scope.method,\n                      'timezone':$scope.timezoneChosen\n\n                        }\n\n\n                    }\n\n\n\n\n                  }\n\n\n                  }\n     \n\n                  Event.insert($scope,params);\n                  $('#newEventModalForm').modal('hide');\n                 \n                  $scope.ioevent={};\n                  $scope.timezonepicker=false;\n                  $scope.timezoneChosen=$scope.timezone;\n                  $scope.invites=[]\n                  $scope.invite=\"\";\n                  $scope.remindme_show=\"\";\n                  $scope.show_choice=\"\";\n                  $scope.parent_related_to=\"\";\n                  $scope.Guest_params=false;\n                  $scope.searchRelatedQuery=\"\";\n                  $scope.something_picked=false;\n                  $scope.newEventform=false;\n                  $scope.remindmeby=false;\n                  $scope.locationShosen=false;\n        \n     }\n    }\n\n//*************************************************/\n\n$scope.cancelAddOperation= function(){\n  $scope.timezonepicker=false;\n      $scope.start_event=\"\" ;\n    $scope.end_event=\"\";\n  \n        $scope.invites=[]\n        $scope.invite=\"\";\n        $scope.remindme_show=\"\";\n        $scope.show_choice=\"\";\n        $scope.parent_related_to=\"\";\n        $scope.Guest_params=false;\n        $scope.something_picked=false;\n        $scope.picked_related=false;\n        $scope.ioevent={}\n        $scope.locationShosen=false;\n}\n\n$scope.updateEventRenderAfterAdd= function(){};\n\n       $scope.deleteEvent =function(eventt){\n    var params = {'entityKey':eventt.entityKey};\n     Event.delete($scope,params);\n     //$('#addLeadModal').modal('show');\n   }\n      $scope.eventDeleted = function(resp){\n   };\n        $scope.closeEventForm=function(ioevent){\n      $scope.ioevent={};\n      $scope.newEventform=false;\n    }\n        $scope.hilightEvent = function() {\n\n            $('#event_0').effect(\"highlight\", \"slow\");\n            $('#event_0').effect(\"bounce\", \"slow\");\n\n        };\n        $scope.listEvents = function() {\n            var params = {\n                'id': $scope.account.id,\n                'events': {\n                }\n            };\n            Account.get($scope, params);\n\n        };\n\n        //HKA 18.11.2013 Show modal Related list (Contact)\n\n        $scope.addContactModal = function() {\n            $('#addContactModal').modal('show');\n        };\n\n        // HKA 18.11.2013 Show modal Related list (Opportunity)\n        $scope.addOppModal = function() {\n            $('#addOpportunityModal').modal('show');\n        };\n\n        //HKA 18.11.2013 Show modal Related list (Case)\n        $scope.addCaseModal = function() {\n            $('#addCaseModal').modal('show');\n        };\n        $scope.addNeedModal = function() {\n            $('#addNeedModal').modal('show');\n        };\n\n        //HKA 22.11.2013 List of Contacts related to account\n        $scope.listContacts = function() {\n            var params = {\n                'id': $scope.account.id,\n                'contacts': {\n                    'limit': '6'\n                }\n            };\n            Account.get($scope, params);\n        };\n\n        //HKA 22.11.2013 List of Opportunities related to account\n        $scope.listOpportunities = function() {\n            var params = {\n                'id': $scope.account.id,\n                'opportunities': {\n                    'limit': '6'\n                }\n            };\n            Account.get($scope, params);\n        };\n\n        //HKA 22.11.2013 List of Cases related to account\n        $scope.listCases = function() {\n\n            var params = {\n                'id': $scope.account.id,\n                'cases': {\n                    'limit': '6'\n                }\n            };\n            Account.get($scope, params);\n\n        };\n        $scope.listNeeds = function() {\n\n            var params = {\n                'id': $scope.account.id,\n                'needs': {\n                    'limit': '6'\n                }\n            };\n            Account.get($scope, params);\n\n        };\n\n  \n        // HKA 19.11.2013 Add Opportunty related to account\n $scope.opportunityInserted = function(resp){\n          window.location.replace('#/accounts');\n      };\n        // HKA 19.11.2013 Add Case related to account\n\n        $scope.saveNeed = function(need) {\n\n\n            var params = {'name': need.name,\n                'description': need.description,\n                'priority': need.priority,\n                'need_status': need.need_status,\n                'folder': $scope.account.folder,\n                'parent': $scope.account.entityKey,\n                'access': $scope.account.access\n            };\n\n            Need.insert($scope, params);\n            $('#addNeedModal').modal('hide');\n\n        };\n        $scope.listInfonodes = function(kind) {\n\n            if (!$scope.isEmpty($scope.relatedInfonode)) {\n                console.log('phone inserted');\n                console.log($scope.relatedInfonode);\n                if ($scope.relatedInfonode.contact[$scope.relatedInfonode.infonode.kind]==undefined) {\n                  $scope.relatedInfonode.contact[$scope.relatedInfonode.infonode.kind]={};\n                  $scope.relatedInfonode.contact[$scope.relatedInfonode.infonode.kind].items=[];\n                };\n                $scope.relatedInfonode.contact[$scope.relatedInfonode.infonode.kind].items.push($scope.relatedInfonode.infonode.item);\n                $scope.apply();\n            }else{\n              params = {'parent': $scope.account.entityKey,\n                'connections': kind\n                  };\n                          InfoNode.list($scope, params);\n            };            \n\n        }\n//HKA 19.11.2013 Add Phone\n        $scope.addPhone = function(phone) {\n            console.log(phone)\n            if (phone.number && !$scope.existsInfonode(phone,'number','phones')) {\n                params = {'parent': $scope.account.entityKey,\n                    'kind': 'phones',\n                    'fields': [\n                        {\n                            \"field\": \"type\",\n                            \"value\": phone.type\n                        },\n                        {\n                            \"field\": \"number\",\n                            \"value\": phone.number\n                        }\n                    ]\n                };\n                InfoNode.insert($scope, params);\n            }\n            $scope.phone = {};\n            $scope.phone.type = 'work';\n            $scope.phone.number = '';\n\n            $scope.showPhoneForm = false;\n\n\n        };\n\n        $scope.patchPhoneNumber = function(entityKey, data) {\n\n\n            params = {\n                'entityKey': entityKey,\n                'parent': $scope.account.entityKey,\n                'kind': 'phones',\n                'fields': [\n                    {\n                        \"field\": \"number\",\n                        \"value\": data\n                    }\n                ]\n            };\n            InfoNode.patch($scope, params);\n        };\n\n\n//HKA 20.11.2013 Add Email\n        $scope.addEmail = function(email) {\n            if (email.email && !$scope.existsInfonode(email,'email','emails')) {\n                params = {'parent': $scope.account.entityKey,\n                    'kind': 'emails',\n                    'fields': [\n                        {\n                            \"field\": \"email\",\n                            \"value\": email.email\n                        }\n                    ]\n                };\n                InfoNode.insert($scope, params);\n            }\n            $scope.email = {};\n            $scope.showEmailForm = false;\n        };\n\n\n        $scope.prepareUrl=function(url){\n                    var pattern=/^[a-zA-Z]+:\\/\\//;\n                     if(!pattern.test(url)){                        \n                         url = 'http://' + url;\n                     }\n                     return url;\n        }\n        $scope.urlSource=function(url){\n            var links=[\"apple\",\"bitbucket\",\"dribbble\",\"dropbox\",\"facebook\",\"flickr\",\"foursquare\",\"github\",\"instagram\",\"linkedin\",\"pinterest\",\"trello\",\"tumblr\",\"twitter\",\"youtube\"];\n                    var match=\"\";\n                    angular.forEach(links, function(link){\n                         var matcher = new RegExp(link);\n                         var test = matcher.test(url);\n                         if(test){  \n                             match=link;\n                         }\n                    });\n                    if (match==\"\") {\n                        match='globe';\n                    };\n                    return match;\n        }\n//HKA 22.11.2013 Add Website\n        $scope.addWebsite = function(website) {\n                      \n            if (website.url!=\"\"&&website.url!=undefined && !$scope.existsInfonode(website,'url','websites')) {\n                console.log(\"test url\");\n                console.log(website.url);\n                params = {'parent': $scope.account.entityKey,\n                'kind': 'websites',\n                'fields': [\n                    {\n                        \"field\": \"url\",\n                        \"value\": website.url\n                    }\n                ]\n            };\n            console.log(\"in add website +++++++++++++++++++++\");\n            InfoNode.insert($scope, params);\n            $scope.website = {};\n            $scope.showWebsiteForm = false;\n\n            };            \n        };\n\n//HKA 22.11.2013 Add Social\n        $scope.addSocial = function(social) {\n             if (social.url!=\"\"&&social.url!=undefined && !$scope.existsInfonode(social,'url','sociallinks')) {\n            params = {'parent': $scope.account.entityKey,\n                'kind': 'sociallinks',\n                'fields': [\n                    {\n                        \"field\": \"url\",\n                        \"value\": social.url\n                    }\n                ]\n            };\n            InfoNode.insert($scope, params);\n            $scope.sociallink = {};\n            $scope.showSociallinkForm = false;\n            };  \n        };\n        $scope.addCustomField = function (customField,option) {\n               \n               \n            if (customField) {\n                if (customField.infonode_key) {\n                    \n                    $scope.inlinePatch('Infonode','customfields', customField.name,customField.infonode_key,customField.value)\n                }else{\n                    \n                    if (!customField.field) {\n                        customField.field=customField.name;\n                    };\n                    var custom_value=null;\n                        if (option) {\n                            \n                            if (!customField.value) {\n                                customField.value=[];\n                            };\n                            customField.value.push(option);\n                            custom_value=JSON.stringify(customField.value);\n                        }else{\n                            \n                             custom_value=customField.value;\n                        };\n\n                        \n                        \n                    if (customField.field && customField.value) {\n                        \n                        params = {\n                            'parent': $scope.account.entityKey,\n                            'kind': 'customfields',\n                            'fields': [\n                                {\n                                    \"field\": customField.field,\n                                    \"property_type\":customField.id,\n                                    \"value\": custom_value\n                                }\n                            ]\n                        };\n                        InfoNode.insertCustom($scope, params,customField);\n                    }\n                };\n                \n            }\n            $('#customfields').modal('hide');\n            $scope.customfield = {};\n            $scope.showCustomFieldForm = false;\n\n        };\n//HKA 22.11.2013 Add Tagline\n        $scope.updateTagline = function(account) {\n\n            var params = {\n                'id': account.id,\n                'tagline': account.tagline\n            }\n            console.log(params);\n            Account.patch($scope, params);\n        };\n\n//HKA 22.11.2013 Add Introduction\n        $scope.updateintro = function(account) {\n\n            var params = {\n                'id':account.id,\n                'introduction': account.introduction\n                }\n            Account.patch($scope, params);\n        };\n//HKA 22.11.2013 Add Account\n\n        $scope.updatAccountHeader = function(account){\n\n          params = {'id':$scope.account.id,\n                     'name':account.name,\n                   'account_type':account.account_type,\n                   'industry':account.industry}\n          Account.patch($scope,params);\n          $('#EditAccountModal').modal('hide');\n        };\n    // arezki lebdiri 03/07/2014 send email\n/*$scope.sendEmailSelected=function(){\n  $scope.email.to = '';\n  angular.forEach($scope.infonodes.emails, function(value, key){\n    console.log(value)\n    if (value.email) $scope.email.to = $scope.email.to + value.email + ',';\n    });\n\n};\n      $scope.sendEmail = function(email){\n        email.body = $('#some-textarea').val();\n        var params = {\n                  'to': email.to,\n                  'cc': email.cc,\n                  'bcc': email.bcc,\n                  'subject': email.subject,\n                  'body': email.body,\n                  'about':$scope.account.entityKey\n                  };\n\n        Email.send($scope,params);\n      };*/\n        $scope.beforedeleteInfonde = function(){\n            $('#BeforedeleteInfonode').modal('show');\n        }\n        $scope.deleteaccount = function(){\n             var accountKey = {'entityKey':$scope.account.entityKey};\n             Account.delete($scope,accountKey);\n             $('#BeforedeleteAccount').modal('hide');\n        };\n       /* $scope.renderMaps = function(){\n        /*console.log('in renderMaps');\n        */\n        /*console.log(\"enter to account controller\");\n        $scope.addresses = $scope.account.addresses;\n        Map.renderwith($scope);\n        };*/\n        $scope.addAddress = function(address){\n\n        Map.searchLocation($scope,address);\n\n        $('#addressmodal').modal('hide');\n        $scope.address={};\n        };\n      $scope.locationUpdated = function(addressArray){\n\n          var params = {'id':$scope.account.id,\n                         'addresses':addressArray};\n\n          Account.patch($scope,params);\n      };\n      $scope.addGeo = function(address){\n        if (!$scope.existsInfonode(address,'formatted','addresses')) {\n           params = {'parent':$scope.account.entityKey,\n            'kind':'addresses',\n            'fields':[\n                {\n                  \"field\": \"formatted\",\n                  \"value\": address.formatted\n                }\n            ]\n          };\n          if (address.lat){\n            console.log(\"addresses lat exists\");\n            params = {'parent':$scope.account.entityKey,\n            'kind':'addresses',\n            'fields':[\n                {\n                  \"field\": \"lat\",\n                  \"value\": address.lat.toString()\n                },\n                {\n                  \"field\": \"lon\",\n                  \"value\": address.lng.toString()\n                },\n                {\n                  \"field\": \"formatted\",\n                  \"value\": address.formatted\n                }\n              ]\n            };\n          }\n          console.log(params);\n          console.log(\"hhhhhhhhhhhhhhhhhhere parms before infonode\");\n          InfoNode.insert($scope,params);\n        }\n      };\n\n        $scope.updatAccountHeader = function(account) {\n\n            params = {'id': $scope.account.id,\n                'owner':$scope.ownerSelected.google_user_id,\n                'name': account.name,\n                'account_type': account.account_type,\n                'industry': account.industry}\n            Account.patch($scope, params);\n            $('#EditAccountModal').modal('hide');\n        };\n        // arezki lebdiri 03/07/2014 send email\n        $scope.sendEmailSelected = function() {\n            $scope.email.to = '';\n            angular.forEach($scope.infonodes.emails, function(value, key) {\n                console.log(value)\n                if (value.email)\n                    $scope.email.to = $scope.email.to + value.email + ',';\n            });\n\n        };\n        $scope.showAttachFilesPicker = function() {\n          var developerKey = 'AIzaSyDHuaxvm9WSs0nu-FrZhZcmaKzhvLiSczY';\n          var docsView = new google.picker.DocsView()\n              .setIncludeFolders(true)\n              .setSelectFolderEnabled(true);\n          var picker = new google.picker.PickerBuilder().\n              addView(new google.picker.DocsUploadView()).\n              addView(docsView).\n              setCallback($scope.attachmentUploaderCallback).\n              setOAuthToken(window.authResult.access_token).\n              setDeveloperKey(developerKey).\n              setAppId('935370948155-qm0tjs62kagtik11jt10n9j7vbguok9d').\n                enableFeature(google.picker.Feature.MULTISELECT_ENABLED).\n              build();\n          picker.setVisible(true);\n      };\n      $scope.attachmentUploaderCallback= function(data){\n        if (data.action == google.picker.Action.PICKED) {\n                $.each(data.docs, function(index) {\n                    var file = { 'id':data.docs[index].id,\n                                  'title':data.docs[index].name,\n                                  'mimeType': data.docs[index].mimeType,\n                                  'embedLink': data.docs[index].url\n                    };\n                    $scope.sendWithAttachments.push(file);\n                });\n                $scope.apply();\n        }\n      }\n\n      $scope.sendEmail = function(email){\n        \n        email.body = $('#some-textarea').val();\n        var params = {\n                  'to': email.to,\n                  'cc': email.cc,\n                  'bcc': email.bcc,\n                  'subject': email.subject,\n                  'body': email.body,\n                  'about':$scope.account.entityKey\n                  };\n        if ($scope.sendWithAttachments){\n            params['files']={\n                            'parent':$scope.account.entityKey,\n                            'access':$scope.account.access||'public',\n                            'items':$scope.sendWithAttachments\n                            };\n        };\n        \n        Email.send($scope,params);       \n      };\n        $scope.emailSent=function(){\n            console.log('$scope.email');\n            console.log($scope.email);\n            $scope.email={};\n            $scope.showCC=false;\n            $scope.showBCC=false;\n            $('#testnonefade').modal(\"hide\");\n             $scope.email={};\n             console.log('$scope.email');\n        }\n        $scope.emailSentConfirmation=function(){\n            console.log('$scope.email');\n            console.log($scope.email);\n            $scope.email={};\n            $scope.showCC=false;\n            $scope.showBCC=false;\n            $('#testnonefade').modal(\"hide\");\n             $scope.emailSentMessage=true;\n             setTimeout(function(){  $scope.emailSentMessage=false; $scope.apply() }, 2000);\n        }\n        $scope.beforedeleteInfonde = function() {\n            $('#BeforedeleteInfonode').modal('show');\n        }\n        $scope.deleteaccount = function() {\n            var accountKey = {'entityKey': $scope.account.entityKey};\n            Account.delete($scope, accountKey);\n\n            $('#BeforedeleteAccount').modal('hide');\n        };\n        \n        $scope.addAddress = function(address) {\n\n            Map.searchLocation($scope, address);\n\n            $('#addressmodal').modal('hide');\n            $scope.address = {};\n        };\n        $scope.locationUpdated = function(addressArray) {\n\n            var params = {'id': $scope.account.id,\n                'addresses': addressArray};\n\n            Account.patch($scope, params);\n        };\n        $scope.addGeo = function(address){\n          if ($scope.isRelatedAddress) {\n               console.log(\"innnnnnnnnnnn related\");\n               console.log(address);\n               $scope.pushElement(address, $scope.newcontact.addresses,'addresses');\n               $scope.isRelatedAddress=false;\n               $scope.apply();\n        }else{\n          params = {'parent':$scope.account.entityKey,\n            'kind':'addresses',\n            'fields':[\n                /*{\n                  \"field\": \"street\",\n                  \"value\": address.street\n                },\n                {\n                  \"field\": \"city\",\n                  \"value\": address.city\n                },\n                {\n                  \"field\": \"state\",\n                  \"value\": address.state\n                },\n                {\n                  \"field\": \"postal_code\",\n                  \"value\": address.postal_code\n                },\n                {\n                  \"field\": \"country\",\n                  \"value\": address.country\n                },*/\n                {\n                  \"field\": \"formatted\",\n                  \"value\": address.formatted\n                }\n            ]\n          };\n          if (address.lat){\n            console.log(\"addresses lat exists\");\n            params = {'parent':$scope.account.entityKey,\n            'kind':'addresses',\n            'fields':[\n              \n                {\n                  \"field\": \"lat\",\n                  \"value\": address.lat.toString()\n                },\n                {\n                  \"field\": \"lon\",\n                  \"value\": address.lng.toString()\n                },\n                {\n                  \"field\": \"formatted\",\n                  \"value\": address.formatted\n                }\n              ]\n            };\n          }\n          console.log(params);\n          InfoNode.insert($scope,params);\n        }\n      };\n        $scope.deleteInfos = function(arr, index) {\n            console.log(\"work\");\n            console.log(arr[index]);\n            arr.splice(index, 1);\n            $scope.apply();\n        }\n        //HKA 08.01.2014\n        $scope.About_render = function(accid) {\n\n            var acc = Account.get($scope, accountid);\n\n            $scope.addresses = acc.addresses;\n            Map.render($scope);\n        };\n\n        $scope.idealTextColor = function(bgColor) {\n            var nThreshold = 105;\n            var components = getRGBComponents(bgColor);\n            var bgDelta = (components.R * 0.299) + (components.G * 0.587) + (components.B * 0.114);\n\n            return ((255 - bgDelta) < nThreshold) ? \"#000000\" : \"#ffffff\";\n        };\n        function getRGBComponents(color) {\n\n            var r = color.substring(1, 3);\n            var g = color.substring(3, 5);\n            var b = color.substring(5, 7);\n\n            return {\n                R: parseInt(r, 16),\n                G: parseInt(g, 16),\n                B: parseInt(b, 16)\n\n            };\n        }\n\n        $scope.getTopicUrl = function(type, id) {\n            return Topic.getUrl(type, id);\n        };\n        $scope.setLocation=function(address){\n            console.log(\"wooooork\");\n            Map.setLocation($scope,address);\n        }\n//HKA 12.03.2014 Edit infonode\n        $scope.edit_email = function(email) {\n\n            $scope.edited_email = email;\n        };\n\n        $scope.editTag = function(tag) {\n            $scope.edited_tag = tag;\n        }\n        $scope.doneEditTag = function(tag) {\n            $scope.edited_tag = null;\n            $scope.updateTag(tag);\n        };\n\n        $scope.initObject = function(obj) {\n            for (var key in obj) {\n                obj[key] = null;\n            }\n        }\n                $scope.pushAddressTocontact=function(elem, arr){\n          if (arr==undefined) {\n            arr=[];\n          };\n          if (elem) {\n            console.log('element pushed');\n            arr.push(elem);  \n          };\n          \n        }\n      $scope.pushElement = function(elem, arr, infos) {\n            if (arr==undefined) {\n              arr=[];\n            };\n            if (arr.indexOf(elem) == -1) {\n                switch (infos) {\n                    case 'phones' :\n                        if (elem.number) {\n                            var copyOfElement = angular.copy(elem);\n                            arr.push(copyOfElement);\n                            $scope.initObject(elem);\n                        }\n                        $scope.showPhoneForm = false;\n                        $scope.phone.type = 'work';\n                        $scope.phone.number = '';\n                        break;\n                    case 'emails' :\n                        if (elem.email) {\n                            var copyOfElement = angular.copy(elem);\n                            arr.push(copyOfElement);\n                            $scope.initObject(elem);\n                        }\n                        $scope.showEmailForm = false;\n                        $scope.email.email = ''\n                        break;\n                    case 'websites' :\n                        if (elem.url) {\n                            var copyOfElement = angular.copy(elem);\n                            arr.push(copyOfElement);\n                            $scope.initObject(elem);\n                        }\n                        $scope.website.url = '';\n                        $scope.showWebsiteForm = false;\n                        break;\n                    case 'sociallinks' :\n                        if (elem.url) {\n                            var copyOfElement = angular.copy(elem);\n                            arr.push(copyOfElement);\n                            $scope.initObject(elem);\n                        }\n                      \n                        if ($scope.sociallink) {\n                            $scope.sociallink.url = '';\n                            $scope.showSociallinkForm = false;\n                        }\n                        if ($scope.newsociallink) {\n                           $scope.newsociallink.url = '';\n                        };\n                        break;\n                    case 'customfields' :\n                        if (elem.field && elem.value) {\n                            var copyOfElement = angular.copy(elem);\n                            arr.push(copyOfElement);\n                            $scope.initObject(elem);\n                        }\n                        if ($scope.customfield) {\n                          $scope.customfield.field = '';\n                          $scope.customfield.value = '';\n                          $scope.showCustomFieldForm = false;\n                        }\n                        if ($scope.newcustom) {\n                           $scope.newcustom.field = '';\n                          $scope.newcustom.value = '';\n                        };\n\n                        break;\n                    case 'addresses' :\n                        if (elem.formatted) {\n                            console.log('push in addresses');\n                            var copyOfElement = angular.copy(elem);\n                            arr.push(copyOfElement);\n                            $scope.initObject(elem);\n                        }\n\n                        $('#addressmodal').modal('hide');\n\n                        break;\n                    case 'notes' :\n                        if (elem.title||elem.content) {\n                            var copyOfElement = angular.copy(elem);\n                            arr.push(copyOfElement);\n                            $scope.initObject(elem);\n                        }\n\n                        break;\n  \n                }\n            } else {\n                alert(\"item already exit\");\n            }\n        };\n\n        $scope.listMoreOnScroll = function() {\n            switch ($scope.selectedTab)\n            {\n                case 3:\n                    $scope.ContactlistNextPageItems();\n                    break;\n                case 5:\n                    $scope.OpplistNextPageItems();\n                    break;\n                case 6:\n                    $scope.CaselistNextPageItems();\n                    break;\n                case 7:\n                    $scope.DocumentlistNextPageItems();\n                    break;\n                case 1:\n                    $scope.TopiclistNextPageItems();\n                    break;\n\n\n            }\n        };\n        $scope.saveRelatedinUrl=function(shortProfile){\n          //$scope.clearContact();\n          $scope.relatedinList=[];\n          $scope.inRelatedShortProfiles=[];\n          $scope.relatedinProfile={};\n          $scope.relatedinProfile=shortProfile;\n          console.log(\"shoooort profile\");\n          console.log($scope.relatedinProfile);\n          $scope.linkedShortProfile={};\n          $scope.newcontact.sociallink={'url':$scope.relatedinProfile.url};\n          $scope.savedSociallink=$scope.relatedinProfile.url;\n          $scope.newcontact.sociallinks.push($scope.newcontact.sociallink);\n          $scope.imageSrcnewContact = $scope.relatedinProfile.profile_picture;\n          if (!$scope.newcontact.title) {\n            $scope.newcontact.title = $scope.relatedinProfile.title;\n          };\n          $scope.newcontact.account=$scope.account.entityKey;\n           \n          /*if ($scope.newcontact.addresses==undefined|| $scope.newcontact.addresses==[]) {\n            $scope.addGeo({'formatted':$scope.relatedinProfile.locality});\n          };*/\n          $scope.relatedAddressModel=$scope.relatedinProfile.locality;\n          $scope.apply();\n      }\n          $scope.getRelatedinByUrl=function(url){\n               $scope.inIsLoading=true;\n               var par={'url' : url};\n               Linkedin.profileGet(par,function(resp){\n                      if(!resp.code){\n                         prof={};\n                         prof.fullname=resp.fullname;\n                         prof.url=url;\n                         prof.profile_picture=resp.profile_picture;\n                         prof.title=resp.title;\n                         prof.locality=resp.locality;\n                         prof.industry=resp.industry; \n                         prof.formations=resp.formations\n                         prof.resume=resp.resume;\n                         prof.skills=resp.skills;\n                         prof.current_post=resp.current_post;\n                         prof.past_post=resp.past_post;\n                         prof.experiences=JSON.parse(resp.experiences);  \n                         if(prof.experiences){\n                          prof.experiences.curr=prof.experiences['current-position'];\n                          prof.experiences.past=prof.experiences['past-position'];\n                         }         \n                         $scope.inRelatedShortProfiles.push(prof);\n                         $scope.inIsLoading=false;\n                         $scope.apply();\n                      }else {\n                         if(resp.code==401){\n                          $scope.inIsLoading=false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n            }\n             $scope.getRelatedinProfile=function(){\n              var params={\n                \"firstname\":$scope.newcontact.firstname,\n                \"lastname\":$scope.newcontact.lastname\n                }\n                var linkedurl=null;\n                $scope.inNoResults=false;\n                if ($scope.newcontact.sociallinks==undefined) {\n                  $scope.newcontact.sociallinks=[];\n                };\n                var savedEntityKey=null;\n                if ($scope.newcontact.sociallinks.length > 0) {\n                   angular.forEach($scope.newcontact.sociallinks, function(link){\n                                    if ($scope.linkedinUrl(link.url)) {\n                                      linkedurl=link.url;\n                                      savedEntityKey=link.entityKey;\n                                    };\n                                });\n                };\n                 if (linkedurl) {\n                    var par={'url' : linkedurl};\n                   Linkedin.profileGet(par,function(resp){\n                      if(!resp.code){\n                       $scope.relatedinProfile.fullname=resp.fullname;\n                       $scope.relatedinProfile.title=resp.title;\n                       $scope.relatedinProfile.formations=resp.formations\n                       $scope.relatedinProfile.locality=resp.locality;\n                       $scope.relatedinProfile.relation=resp.relation;\n                       $scope.relatedinProfile.industry=resp.industry;\n                       $scope.linkedProfileresume=resp.resume;\n                       $scope.relatedinProfile.entityKey=savedEntityKey;\n                       $scope.relatedinProfile.url=linkedurl;\n                       $scope.relatedinProfile.resume=resp.resume;\n                       $scope.relatedinProfile.skills=resp.skills;\n                       $scope.relatedinProfile.current_post=resp.current_post;\n                       $scope.relatedinProfile.past_post=resp.past_post;\n                       $scope.relatedinProfile.certifications=JSON.parse(resp.certifications);\n                       $scope.relatedinProfile.experiences=JSON.parse(resp.experiences);\n                       if($scope.relatedinProfile.experiences){\n                       $scope.relatedinProfile.experiences.curr=$scope.relatedinProfile.experiences['current-position'];\n                       $scope.relatedinProfile.experiences.past=$scope.relatedinProfile.experiences['past-position'];\n                       }\n                       if ($scope.newcontact.addresses==undefined||$scope.newcontact.addresses==[]) {\n                          $scope.addGeo({'formatted':$scope.relatedinProfile.locality});\n                        };\n                       $scope.linkedLoader=false;\n                       $scope.inIsLoading = false;\n                       $scope.isLoading = false;\n                       $scope.apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                          $scope.isLoading = false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n                }else{\n                  Linkedin.listPeople(params,function(resp){\n                     $scope.inIsSearching=true;\n                     $scope.inRelatedShortProfiles=[];\n                     $scope.relatedinProfile={};\n                     if(!resp.code){\n                      $scope.inIsSearching=false;\n                      if (resp.items==undefined) {\n                        $scope.relatedinList=[];\n                        $scope.inNoResults=true;\n                        $scope.inIsSearching=false;\n                      }else{\n                        $scope.relatedinList=resp.items;\n                        if (resp.items.length < 4) {\n                          console.log(\"in check of 3\");\n                          angular.forEach(resp.items, function(item){\n                              console.log(item.url);\n                              $scope.getRelatedinByUrl(item.url);\n                        });\n                        }\n                      };\n                         $scope.isLoading = false;\n                         $scope.$apply();\n                        }else {\n                          console.log(\"no 401\");\n                           if(resp.code==401){\n                            // $scope.refreshToken();\n                           console.log(\"no resp\");\n                            $scope.isLoading = false;\n                            $scope.$apply();\n                           };\n                         if (resp.code >= 503) {\n                                $scope.inNoResults = true;\n                                $scope.inIsSearching = false;\n                                $scope.apply();\n                            }\n                        }\n                  });            \n                };\n            }\n           $scope.clearRelatedLinkedin=function(){\n              $scope.relatedinProfile={};\n              $scope.inRelatedShortProfiles=[];\n              $scope.apply()\n            }\n\n\n        $scope.twitterUrl=function(url){\n                         var match=\"\";\n                         var matcher = new RegExp(\"twitter\");\n                         var test = matcher.test(url);                        \n                         return test;\n        }\n        $scope.getRelatedtwProfile=function(){\n              console.log(\"getTwitterProfile\");\n              var params={\n                \"firstname\":$scope.newcontact.firstname,\n                \"lastname\":$scope.newcontact.lastname\n                }\n                var twitterurl=null;\n                $scope.twNoResults=false;\n                if ($scope.newcontact.sociallinks==undefined) {\n                  $scope.newcontact.sociallinks=[];\n                };\n                var savedEntityKey=null;\n                if ($scope.newcontact.sociallinks.length > 0) {\n                   angular.forEach($scope.newcontact.sociallinks, function(link){\n                                    if ($scope.twitterUrl(link.url)) {\n                                      twitterurl=link.url;\n                                      savedEntityKey=link.entityKey;\n                                    };\n                                });\n                };\n                 if (twitterurl) {\n                    var par={'url' : twitterurl};\n                   Linkedin.getTwitterProfile(par,function(resp){\n                      if(!resp.code){\n                       $scope.relatedtwProfile.name=resp.name;\n                       $scope.relatedtwProfile.screen_name=resp.screen_name;\n                       $scope.relatedtwProfile.created_at=resp.created_at\n                       $scope.relatedtwProfile.description_of_user=resp.description_of_user;\n                       $scope.relatedtwProfile.followers_count=resp.followers_count;\n                       $scope.relatedtwProfile.friends_count=resp.friends_count; \n                       $scope.relatedtwProfile.id=resp.id; \n                       $scope.relatedtwProfile.lang=resp.lang; \n                       $scope.relatedtwProfile.language=resp.language; \n                       $scope.relatedtwProfile.last_tweet_favorite_count=resp.last_tweet_favorite_count; \n                       $scope.relatedtwProfile.last_tweet_retweet_count=resp.last_tweet_retweet_count; \n                       $scope.relatedtwProfile.last_tweet_text=resp.last_tweet_text; \n                       $scope.relatedtwProfile.location=resp.location; \n                       $scope.relatedtwProfile.nbr_tweets=resp.nbr_tweets; \n                       $scope.relatedtwProfile.profile_banner_url=resp.profile_banner_url+'/1500x500'; \n                       $scope.relatedtwProfile.profile_image_url_https=resp.profile_image_url_https; \n                       $scope.relatedtwProfile.url_of_user_their_company=resp.url_of_user_their_company; \n                       $scope.relatedtwProfile.entityKey=savedEntityKey;\n                       $scope.relatedtwProfile.url=twitterurl;\n                       if ($scope.newcontact.addresses==undefined||$scope.newcontact.addresses==[]) {\n                          $scope.addGeo({'formatted':$scope.relatedtwProfile.location});\n                        };\n                       $scope.twIsLoading = false;\n                       $scope.isLoading = false;\n                       $scope.apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                          $scope.isLoading = false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n                }else{\n                  Linkedin.getTwitterList(params,function(resp){\n                     $scope.twIsSearching=true;\n                     $scope.twRelatedShortProfiles=[];\n                     $scope.relatedtwProfile={};\n                     if(!resp.code){\n                      $scope.twIsSearching=false;\n                      if (resp.items==undefined) {\n                        $scope.relatedtwList=[];\n                        $scope.twNoResults=true;\n                        $scope.twIsSearching=false;\n                      }else{\n                        console.log(resp.items);\n                        $scope.relatedtwList=resp.items;\n                        console.log($scope.twRelatedShortProfiles);\n                        $scope.apply();\n                        console.log($scope.relatedtwList.length)\n                        if (resp.items.length < 4) {\n                          console.log(\"in check of 3\");\n                          angular.forEach(resp.items, function(item){\n                              console.log(item.url);\n                              $scope.getRelatedtwByUrl(item.url);\n                        });\n                        }\n                      };\n                         $scope.isLoading = false;\n                         $scope.apply();\n                        }else {\n                          console.log(\"no 401\");\n                           if(resp.code==401){\n                            // $scope.refreshToken();\n                           console.log(\"no resp\");\n                            $scope.isLoading = false;\n                            $scope.$apply();\n                           };\n                         if (resp.code >= 503) {\n                            console.log(\"503 error\")\n                            $scope.twNoResults = true;\n                            $scope.twIsSearching = false;\n                            $scope.apply();\n                        }\n                        }\n                  });            \n                };\n            }\n              $scope.getRelatedtwByUrl=function(url){\n               $scope.twIsLoading=true;\n               var par={'url' : url};\n               Linkedin.getTwitterProfile(par,function(resp){\n                      if(!resp.code){\n                         prof={};\n                         prof.name=resp.name;\n                         prof.screen_name=resp.screen_name;\n                         prof.created_at=resp.created_at\n                         prof.description_of_user=resp.description_of_user;\n                         prof.followers_count=resp.followers_count;\n                         prof.friends_count=resp.friends_count; \n                         prof.id=resp.id; \n                         prof.lang=resp.lang; \n                         prof.language=resp.language; \n                         prof.last_tweet_favorite_count=resp.last_tweet_favorite_count; \n                         prof.last_tweet_retweet_count=resp.last_tweet_retweet_count; \n                         prof.last_tweet_text=resp.last_tweet_text; \n                         prof.location=resp.location; \n                         prof.nbr_tweets=resp.nbr_tweets; \n                         prof.profile_banner_url=resp.profile_banner_url+'/1500x500'; \n                         prof.profile_image_url_https=resp.profile_image_url_https; \n                         prof.url_of_user_their_company=resp.url_of_user_their_company; \n                         prof.url=url;\n                         $scope.twRelatedShortProfiles.push(prof);\n                         $scope.twIsLoading=false;\n                         $scope.apply();\n                      }else {\n                         if(resp.code==401){\n                          $scope.twIsLoading=false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n            }\n              $scope.cancelSelection=function(arrayname){\n                  console.log(arrayname)\n                 $scope[arrayname]=[];\n                 console.log(\"canceling\");\n                  console.log(arrayname)\n                 $scope.apply();\n\n              }\n              $scope.saveRelatedtwUrl=function(shortProfile){\n              //$scope.clearContact();\n              $scope.relatedtwList=[];\n              $scope.twRelatedShortProfiles =[];\n              $scope.relatedtwProfile={};\n              $scope.relatedtwProfile=shortProfile;\n              $scope.sociallink={'url':$scope.relatedtwProfile.url};\n              $scope.website={'url':$scope.relatedtwProfile.url_of_user_their_company};\n              $scope.savedSociallink=$scope.relatedtwProfile.url;\n              \n              $scope.newcontact.sociallink={'url':$scope.relatedtwProfile.url};\n              $scope.savedSociallink=$scope.relatedtwProfile.url;\n              $scope.newcontact.sociallinks.push($scope.newcontact.sociallink);\n\n              if ($scope.imageSrc=='/static/img/avatar_contact.jpg'||$scope.imageSrc=='') {\n                console.log(\"innnnnn no imageSrc\");\n                $scope.imageSrc=$scope.relatedtwProfile.profile_image_url_https;\n                $scope.profile_img.profile_img_url = $scope.relatedtwProfile.profile_image_url_https;\n              };\n               if (!$scope.addressModel) {\n                    $scope.addressModel=$scope.relatedtwProfile.location; \n                  }else{\n                    if ($scope.addressModel.length < $scope.relatedtwProfile.location.length) {\n                      $scope.addressModel=$scope.relatedtwProfile.location;  \n                    };\n                  };\n              $scope.apply();\n          }\n\n\n\n\n\n\n            $scope.clearContact=function(){\n              $scope.newcontact={};\n              $scope.newcontact.sociallinks=[];\n              $scope.relatedinList=[];\n              $scope.newcontact.websites=[];\n              $scope.newcontact.phones=[];\n              $scope.newcontact.emails=[];\n              $scope.newcontact.customfields=[];\n              $scope.newcontact.addresses=[];\n              $scope.relatedinProfile={};\n              $scope.relatedAddressModel=null;\n              $scope.inRelatedShortProfiles=[];\n              $scope.imageSrcnewContact= '/static/img/avatar_contact.jpg';\n              $scope.imageSrc = '/static/img/default_company.png';\n              $scope.apply();\n            }\n            $scope.prepareRelated = function() {\n            var infonodes = [];\n            angular.forEach($scope.newcontact.websites, function(website) {\n                var infonode = {\n                    'kind': 'websites',\n                    'fields': [\n                        {\n                            'field': \"url\",\n                            'value': website.url\n                        }\n                    ]\n\n                }\n                infonodes.push(infonode);\n            });\n            angular.forEach($scope.newcontact.sociallinks, function(sociallink) {\n                var infonode = {\n                    'kind': 'sociallinks',\n                    'fields': [\n                        {\n                            'field': \"url\",\n                            'value': sociallink.url\n                        }\n                    ]\n\n                }\n                infonodes.push(infonode);\n            });\n            angular.forEach($scope.newcontact.customfields, function(customfield) {\n                var infonode = {\n                    'kind': 'customfields',\n                    'fields': [\n                        {\n                            'field': customfield.field,\n                            'value': customfield.value\n                        }\n                    ]\n\n                }\n                infonodes.push(infonode);\n            });\n            angular.forEach($scope.newcontact.addresses, function(address){\n               var infonode ={\n              'kind':'addresses',\n              'fields':[\n                  {\n                    \"field\": \"street\",\n                    \"value\": address.street\n                  },\n                  {\n                    \"field\": \"city\",\n                    \"value\": address.city\n                  },\n                  {\n                    \"field\": \"state\",\n                    \"value\": address.state\n                  },\n                  {\n                    \"field\": \"postal_code\",\n                    \"value\": address.postal_code\n                  },\n                  {\n                    \"field\": \"country\",\n                    \"value\": address.country\n                  }\n                ]\n              };\n              if (address.lat&&address.lng) {\n                infonode.fields.push({\"field\": \"lat\",\"value\": address.lat.toString()});\n                infonode.fields.push({\"field\": \"lng\",\"value\": address.lng.toString()});\n              };\n              if (address.formatted) {\n                infonode.fields.push({\"field\": \"formatted\",\"value\": address.formatted});\n              };\n              infonodes.push(infonode);\n              console.log(\"infonodes\");\n              console.log(infonodes);\n          });\n            return infonodes;\n        };\n        $scope.addContactDetail=function(elem, arr){\n            var copyOfElement = angular.copy(elem);\n            arr.push(copyOfElement);\n            $scope.initObject(elem);\n        } \n        $scope.removeContactDetail=function(arr, indx){\n          arr.splice(indx,1);\n          $scope.apply();\n        } \n                   $scope.twitterUrl=function(url){\n                         var match=\"\";\n                         var matcher = new RegExp(\"twitter\");\n                         var test = matcher.test(url);                        \n                         return test;\n        }\n          $scope.getTwitterProfile=function(){\n             console.log(\"in twitter get profile\");\n              var params={\n                \"company\":$scope.account.name\n                }\n              console.log('company name');\n              console.log($scope.account.name);\n                var twitterurl=null;\n                $scope.twNoResults=false;\n                if ($scope.infonodes.sociallinks==undefined) {\n                  $scope.infonodes.sociallinks=[];\n                };\n                var savedEntityKey=null;\n                if ($scope.infonodes.sociallinks.length > 0) {\n                  console.log(\"in sociallinks\");\n                   angular.forEach($scope.infonodes.sociallinks, function(link){\n                                    console.log(link.url);\n                                    if ($scope.twitterUrl(link.url)) {\n                                      twitterurl=link.url;\n                                      console.log(\"hereee twitter url\");\n                                      console.log(link.url);\n                                      savedEntityKey=link.entityKey;\n                                    };\n                                });\n                };\n                 if (twitterurl) {\n                    var par={'url' : twitterurl};\n                    $scope.twProfile={};\n                   Linkedin.getTwitterProfile(par,function(resp){\n                      if(!resp.code){\n                       $scope.twProfile.name=resp.name;\n                       $scope.twProfile.screen_name=resp.screen_name;\n                       $scope.twProfile.created_at=resp.created_at\n                       $scope.twProfile.description_of_user=resp.description_of_user;\n                       $scope.twProfile.followers_count=resp.followers_count;\n                       $scope.twProfile.friends_count=resp.friends_count; \n                       $scope.twProfile.id=resp.id; \n                       $scope.twProfile.lang=resp.lang; \n                       $scope.twProfile.language=resp.language; \n                       $scope.twProfile.last_tweet_favorite_count=resp.last_tweet_favorite_count; \n                       $scope.twProfile.last_tweet_retweet_count=resp.last_tweet_retweet_count; \n                       $scope.twProfile.last_tweet_text=resp.last_tweet_text; \n                       $scope.twProfile.location=resp.location; \n                       $scope.twProfile.nbr_tweets=resp.nbr_tweets; \n                       $scope.twProfile.profile_banner_url=resp.profile_banner_url+'/1500x500'; \n                       console.log('$scope.twProfile.profile_banner_url')\n                       console.log($scope.twProfile.profile_banner_url)\n                       $scope.twProfile.profile_image_url_https=resp.profile_image_url_https; \n                       $scope.twProfile.url_of_user_their_company=resp.url_of_user_their_company; \n                       $scope.twProfile.entityKey=savedEntityKey;\n                       $scope.twProfile.url=twitterurl;\n                       if ($scope.account.addresses==undefined||$scope.account.addresses==[]) {\n                          $scope.addGeo({'formatted':$scope.twProfile.location});\n                        };\n                       $scope.twIsLoading = false;\n                       $scope.isLoading = false;\n                       $scope.apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                          $scope.isLoading = false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n                }else{\n                   console.log(\"in getTwitterList\");\n                  Linkedin.getTwitterList(params,function(resp){\n                     $scope.twIsSearching=true;\n                     $scope.twShortProfiles=[];\n                     $scope.twProfile={};\n                     if(!resp.code){\n                      console.log(\"in twitttttter\");\n                         console.log(resp);\n                      $scope.twIsSearching=false;\n                      if (resp.items==undefined) {\n                        $scope.twList=[];\n                        $scope.twNoResults=true;\n                        $scope.twIsSearching=false;\n                      }else{\n                        $scope.twList=resp.items;\n                          console.log(resp.items);\n                        if (resp.items.length < 4) {\n                          console.log(\"in check of 3\");\n                          angular.forEach(resp.items, function(item){\n                              console.log(item.url);\n                              $scope.getTwitterByUrl(item.url);\n                        });\n                        }\n                      };\n                         $scope.isLoading = false;\n                         $scope.$apply();\n                        }else {\n                          console.log(\"no 401\");\n                           if(resp.code==401){\n                            // $scope.refreshToken();\n                           console.log(\"no resp\");\n                            $scope.isLoading = false;\n                            $scope.$apply();\n                           };\n                         if (resp.code >= 503) {\n                            console.log(\"503 error\")\n                            $scope.twNoResults = true;\n                            $scope.twIsSearching = false;\n                            $scope.apply();\n                        }\n                        }\n                  });            \n                };\n            }\n     $scope.getTwitterByUrl=function(url){\n               $scope.twIsLoading=true;\n               var par={'url' : url};\n               Linkedin.getTwitterProfile(par,function(resp){\n                      if(!resp.code){\n                         prof={};\n                         prof.name=resp.name;\n                         prof.screen_name=resp.screen_name;\n                         prof.created_at=resp.created_at\n                         prof.description_of_user=resp.description_of_user;\n                         prof.followers_count=resp.followers_count;\n                         prof.friends_count=resp.friends_count; \n                         prof.id=resp.id; \n                         prof.lang=resp.lang; \n                         prof.language=resp.language; \n                         prof.last_tweet_favorite_count=resp.last_tweet_favorite_count; \n                         prof.last_tweet_retweet_count=resp.last_tweet_retweet_count; \n                         prof.last_tweet_text=resp.last_tweet_text; \n                         prof.location=resp.location; \n                         prof.nbr_tweets=resp.nbr_tweets; \n                         prof.profile_banner_url=resp.profile_banner_url+'/1500x500'; \n                         prof.profile_image_url_https=resp.profile_image_url_https; \n                         prof.url_of_user_their_company=resp.url_of_user_their_company; \n                         prof.url=url;\n                         $scope.twShortProfiles.push(prof);\n                         $scope.twIsLoading=false;\n                         $scope.apply();\n                      }else {\n                         if(resp.code==401){\n                          $scope.twIsLoading=false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n            }\n              $scope.cancelSelection=function(arrayname){\n                  console.log(arrayname)\n                 $scope[arrayname]=[];\n                 console.log(\"canceling\");\n                  console.log(arrayname)\n                 $scope.apply();\n\n              }\n              $scope.saveTwitterUrl=function(shortProfile){\n              //$scope.clearContact();\n              $scope.twList=[];\n              $scope.twShortProfiles =[];\n              $scope.twProfile={};\n              $scope.twProfile=shortProfile;\n              var link={'url':shortProfile.url}\n              $scope.addSocial(link);\n              var params ={'id':$scope.account.id};\n              if ($scope.imageSrc=='/static/img/avatar_contact.jpg'||$scope.imageSrc=='') {            \n                $scope.imageSrc=$scope.twProfile.profile_image_url_https;\n                 params['profile_img_url'] = $scope.twProfile.profile_image_url_https;\n              };              \n              if ($scope.infonodes.addresses==undefined||$scope.infonodes.addresses==[]) {\n                $scope.addGeo({'formatted':$scope.linkedProfile.locality});\n              };\n               Contact.patch($scope,params);\n              $scope.apply();\n          }\n        // LBA le 21-10-2014\n        $scope.DeleteCollaborator=function(entityKey){\n            console.log(\"delete collaborators\")\n            var item = {\n                          'type':\"user\",\n                          'value':entityKey,\n                          'about':$scope.account.entityKey\n                        };\n            Permission.delete($scope,item)\n            console.log(item)\n        };\n        // Google+ Authentication\n        Auth.init($scope);\n        $(window).scroll(function() {\n            if (!$scope.isLoading && ($(window).scrollTop() > $(document).height() - $(window).height() - 100)) {\n                $scope.listMoreOnScroll();\n            }\n        });\n\n    }]);\n\n\napp.controller('AccountNewCtrl', ['$scope', '$http','Auth', 'Account', 'Tag', 'Edge','Map','Linkedin','Contact','Customfield',\n    function($scope,$http,Auth, Account, Tag, Edge, Map, Linkedin,Contact,Customfield) {\n        $(\"ul.page-sidebar-menu li\").removeClass(\"active\");\n        $(\"#id_Accounts\").addClass(\"active\");\n\n        document.title = \"Accounts: New\";\n        trackMixpanelAction('ACCOUNT_NEW_VIEW');\n        $scope.isSignedIn = false;\n        $scope.immediateFailed = false;\n        $scope.nextPageToken = undefined;\n        $scope.prevPageToken = undefined;\n        $scope.isLoading = false;\n        $scope.nbLoads=0;\n        $scope.leadpagination = {};\n        $scope.currentPage = 1;\n        $scope.pages = [];\n        $scope.stage_selected = {};\n        $scope.accounts = [];\n        $scope.account = {};\n        $scope.account.addresses = [];\n        $scope.account.access = 'public';\n        $scope.order = '-updated_at';\n        $scope.status = 'New';\n        $scope.showPhoneForm = false;\n        $scope.showEmailForm = false;\n        $scope.showWebsiteForm = false;\n        $scope.showSociallinkForm = false;\n        $scope.showCustomFieldForm = false;\n        $scope.phones = [];\n        $scope.addresses = [];\n        $scope.infonodes=[];\n        $scope.infonodes.addresses=[];\n        $scope.emails = [];\n        $scope.websites = [];\n        $scope.existingcontacts=[];\n        $scope.sociallinks = [];\n        $scope.customfields = [];\n        $scope.newContactform = false;\n        $scope.account.account_type = 'Customer';\n        $scope.account.industry = '';\n        $scope.phone = {};\n        $scope.notes = [];\n        $",
			"settings":
			{
				"buffer_size": 165750,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/mapservices.js",
			"settings":
			{
				"buffer_size": 15592,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/base.html",
			"settings":
			{
				"buffer_size": 37389,
				"line_ending": "Unix"
			}
		},
		{
			"file": "contactcontroller.js",
			"settings":
			{
				"buffer_size": 206373,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/caseservices.js",
			"settings":
			{
				"buffer_size": 14691,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/date.py",
			"settings":
			{
				"buffer_size": 29,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/accountservices.js",
			"settings":
			{
				"buffer_size": 41104,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/contactservices.js",
			"settings":
			{
				"buffer_size": 26909,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 354.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"linter",
				"SublimeLinter: Next Error"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"list pa",
				"Package Control: List Packages"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"ints",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"sublimeL",
				"SublimeLint: Show All Errors"
			],
			[
				"packeges",
				"Package Control: List Packages"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"tpack",
				"Package Control: Disable Package"
			],
			[
				"new d",
				"Tasks: New document"
			],
			[
				"task",
				"Tasks: New"
			],
			[
				"git pull",
				"Github: Pull Requests"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 503.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/y_hamidia/Documents/Dev/iogrow",
		"/Users/y_hamidia/Documents/Dev/iogrow/googleapiclient"
	],
	"file_history":
	[
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_new.html",
		"/Users/y_hamidia/Documents/css_animations/style.css",
		"/Users/y_hamidia/Documents/Dev/iogrow/gcloud/google-cloud-sdk/lib/googlecloudsdk/gcloud/sdktools/auth/activate_service_account.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/contactcontroller.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/contactservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/caseservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/leads/lead_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/casecontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/leadcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/leads/lead_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/opportunitycontroller.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/cases/case_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/accountcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/accountservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/salesforce_callback.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/bootstrap3/css/test.css",
		"/Users/y_hamidia/Documents/Dev/iogrow/handlers.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/users/user_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/users/user_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/base.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/cases/case_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/cases/case_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/app.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/settingservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/sync_ctrls_sers_scripts.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/opportunityservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/infonodeservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/leadservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/directives/directives.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/model.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/searchcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/views/accountlist.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/leads/lead_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/activities/all_tasks.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/taskcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/taskservices.js",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/OpportunityEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/documentcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/iomessages.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/iomodels/crmengine/documents.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunit_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/plugins/jquery-slimscroll/jquery.slimscroll.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/async_scripts_2.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/LeadStatusEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/first_sync_scripts.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/sync_scripts.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/node_modules/psi/node_modules/update-notifier/node_modules/configstore/node_modules/js-yaml/node_modules/argparse/lib/action_container.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/Package Control Messages",
		"/Users/y_hamidia/Documents/Dev/iogrow/people.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/ioendpoints.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/linkedinservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/node_modules/psi/node_modules/googleapis/node_modules/gapitoken/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/test/json-schema-draft4/uniqueItems.json",
		"/Users/y_hamidia/Documents/.bash_profile",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/JavaScript.sublime-build",
		"/Users/y_hamidia/.bash_profile",
		"/Users/y_hamidia/Documents/testtt.js",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/Git/Git.sublime-settings",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/Git.sublime-settings",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/bootstrap3/plugins/bootstrap-editable/inputs-ext/wysihtml5/wysihtml5.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled.css",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/RegionalEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/css/admin.css",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/CustomFieldsEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/custom_fields/custom_fields_edit.html",
		"/Users/y_hamidia/Desktop/tabs-to-add.htlm",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled.html",
		"/Users/y_hamidia/Documents/css_animations/touch",
		"/Users/y_hamidia/Documents/css_animations/day.html",
		"/Users/y_hamidia/Documents/test_animation/style.css",
		"/Users/y_hamidia/Documents/test_animation/index.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/settingscontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/opportunity/opportunity_edit.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/mapservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/authservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/company/company_edit.html",
		"/Users/y_hamidia/Documents/test2.js",
		"/Users/y_hamidia/Documents/node_test/public/public.html",
		"/Users/y_hamidia/Documents/node_test/express_server.js",
		"/Users/y_hamidia/Documents/node_test/public/hello.html",
		"/Users/y_hamidia/Documents/node_test/config.json",
		"/Users/y_hamidia/Documents/node_test/cus_server.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/async_scripts.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/settings/settings.html",
		"/Users/y_hamidia/Desktop/test.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/vendor/bootstrap-gh-pages/ui-bootstrap-0.5.0.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/new_web_site/sign-in.html",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/edgeservices.js",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/untitled",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/Package Control.cache/console_log.sublime-snippe",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/PlainTasks/messages/Tutorial.todo",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled.json"
	],
	"find":
	{
		"height": 73.0
	},
	"find_in_files":
	{
		"height": 194.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"selected_access",
			"selected_access!='public' && selectedPermisssions",
			"checkPermissions",
			"selectedPermisssions",
			"tag.attach",
			"tagattached",
			"Tag.attach",
			"-1",
			" $scope.tagattached",
			"addTagsTothis",
			"opportunity.current_stage.probability",
			"opportunitystage",
			"Opportunitystage",
			"check",
			"chek",
			"chcek",
			"'chcek",
			"=='chcek",
			"leadEventStartsAt",
			"opportunity.closed_date",
			"appendDtpicker",
			"data-model",
			"clearContact",
			"foreach",
			"clearContact",
			"clearCase",
			"ROOT",
			"$scope.inlinePatch",
			"isEmpty",
			"inlinePatch",
			".patch",
			"inlinePatch('casee'",
			"inlinePatch",
			"inlinePatch(",
			"inlinePatch('casee','', 'owner',casee.entityKey,user.google_user_id)",
			".access",
			"inlinePatch",
			"addContactDetail",
			"initObject",
			"addNewContact",
			"MapAutocomplete",
			"mapAutocomplete",
			"Autocomplete",
			"Map.justAutocomplete",
			"relatedaddressInput",
			"Autocomplete",
			"Map.justAutocomplete",
			"relatedaddress",
			"relatedaddressInput",
			"mapAutocompleteCalendar",
			"mapAutocomplete",
			"pac-input",
			"mapAutocomplete",
			"isRelatedAddress",
			"relatedaddress",
			"relatedaddressInput",
			"relatedaddress",
			"addContactDetail",
			"copy",
			"contacts",
			"$scope.contactInserted",
			"contactInserted",
			".inserr",
			"saveContact",
			"newcontact",
			"prepareRelated",
			"$scope.pushElement",
			"$scope.pushElement = function(elem",
			"pushElement",
			"newContact",
			"adresss in ",
			"pac-input",
			"save",
			"ng-show=\"showNewContact\"",
			"ng-hide=\"showNewContact\"",
			"opportunities.leng",
			"saveCase",
			"selectedtab == 6",
			"ng-clas",
			"selectedtab == 6",
			"selectedtab == 5",
			"$scope.showLinkedinWindown",
			"opener",
			"caseInserted",
			"$scope.caseInserted",
			"saveCase",
			"status_selected",
			" $scope.saveCase ",
			" $scope.save ",
			"$scope.save",
			"$scope.saveOpp ",
			"saveOpp",
			"selectedtab == 5",
			"oppAction",
			"oppAction()",
			"selectedtab == 5",
			"selectedtab==5",
			"saveOpp",
			"listMOre",
			"currentPage",
			"contactCurrentPage",
			"listMoreItems",
			"selectedtab == 5",
			"opportunities",
			"opprtunities",
			"validateBeforeSave",
			"$scope.saveOpp",
			"account_err.name",
			"$scope.save",
			"save",
			"$scope.save",
			"account_err.name",
			"$scope.save=",
			"$scope.save",
			"save",
			"save(account)",
			"$scope.save",
			"ROO",
			"ROOT",
			":focus",
			":focus\\",
			":focus",
			"#A3A3A3",
			"footerStripe",
			"stripe",
			"container",
			"selectedTab == 5",
			"selectedTab"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"</option>/n",
			"",
			"class=\"form-group\" style=\"margin-bottom:5px\"",
			"type=\"submit\" class=\"btn blue\" value=\"Add\" ng-disabled=\"!leads.customfield.name||!leads.customfield.field_type\"",
			"class=\"btn btn-default\" value=\"Clear\" type=\"button\"",
			"class=\"btn btn-default\" value=\"Cancel\" type=\"button\"",
			"{{ _(' Field preview') }}",
			"customfield.name",
			"customfield.field_type",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 12,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_show.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 311792,
						"regions":
						{
						},
						"selection":
						[
							[
								241419,
								241439
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 125127.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_new.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 97126,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_show.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 385660,
						"regions":
						{
						},
						"selection":
						[
							[
								100428,
								100444
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 52607.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/leads/lead_show.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 299462,
						"regions":
						{
						},
						"selection":
						[
							[
								173033,
								173044
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "leadcontrollers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 222925,
						"regions":
						{
						},
						"selection":
						[
							[
								98994,
								99004
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 73653.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "casecontrollers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 93466,
						"regions":
						{
						},
						"selection":
						[
							[
								83125,
								82664
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "opportunitycontroller.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 152593,
						"regions":
						{
						},
						"selection":
						[
							[
								76247,
								76247
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 3.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/taskservices.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16153,
						"regions":
						{
						},
						"selection":
						[
							[
								10549,
								10549
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9703.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15677,
						"regions":
						{
						},
						"selection":
						[
							[
								11088,
								11094
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 8283.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/directives/directives.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33463,
						"regions":
						{
						},
						"selection":
						[
							[
								21563,
								21577
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 3.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/cases/case_show.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 141724,
						"regions":
						{
						},
						"selection":
						[
							[
								39001,
								39015
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19956.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_show.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 181623,
						"regions":
						{
						},
						"selection":
						[
							[
								47543,
								47543
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 23983.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 72762,
						"regions":
						{
						},
						"selection":
						[
							[
								69495,
								69495
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 40989.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_new.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 104143,
						"regions":
						{
						},
						"selection":
						[
							[
								39334,
								39336
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16895.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "accountcontrollers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 271701,
						"regions":
						{
						},
						"selection":
						[
							[
								199873,
								199872
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 144480.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 15,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 165750,
						"regions":
						{
						},
						"selection":
						[
							[
								52201,
								52216
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"default_dir": "/Users/y_hamidia/Documents/Dev/iogrow",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 32643.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/mapservices.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15592,
						"regions":
						{
						},
						"selection":
						[
							[
								11621,
								11641
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9580.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/base.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37389,
						"regions":
						{
						},
						"selection":
						[
							[
								21337,
								21337
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13127.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "contactcontroller.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 206373,
						"regions":
						{
						},
						"selection":
						[
							[
								98965,
								98981
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 75369.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/caseservices.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14691,
						"regions":
						{
						},
						"selection":
						[
							[
								12542,
								12542
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9076.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/date.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 29,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/accountservices.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41104,
						"regions":
						{
						},
						"selection":
						[
							[
								19967,
								19967
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/contactservices.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26909,
						"regions":
						{
						},
						"selection":
						[
							[
								22838,
								22853
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 58.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/JavaScript.sublime-build",
	"project": "new_iogrow.sublime-project",
	"replace":
	{
		"height": 120.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"contact",
				"templates/contacts/contact_list.html"
			],
			[
				"contactcontr",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"leadcontr",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"taskse",
				"static/app/scripts/services/taskservices.js"
			],
			[
				"app",
				"static/app/scripts/app.js"
			],
			[
				"oppocont",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"base",
				"templates/base.html"
			],
			[
				"opponew",
				"templates/opportunities/opportunity_new.html"
			],
			[
				"",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"oppo",
				"templates/opportunities/opportunity_show.html"
			],
			[
				"oppocontr",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"oppocon",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"directi",
				"static/app/scripts/directives/directives.js"
			],
			[
				"oppone",
				"templates/opportunities/opportunity_new.html"
			],
			[
				"accountcon",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"casecon",
				"static/app/scripts/controllers/casecontrollers.js"
			],
			[
				"casese",
				"static/app/scripts/services/caseservices.js"
			],
			[
				"case",
				"templates/cases/case_show.html"
			],
			[
				"lead",
				"templates/leads/lead_show.html"
			],
			[
				"account",
				"templates/accounts/account_show.html"
			],
			[
				"accountser",
				"static/app/scripts/services/accountservices.js"
			],
			[
				"accouns",
				"templates/accounts/account_show.html"
			],
			[
				"mapsse",
				"static/app/scripts/services/mapservices.js"
			],
			[
				"contactse",
				"static/app/scripts/services/contactservices.js"
			],
			[
				"accoutncont",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"accocunt.py",
				"gcloud/google-cloud-sdk/lib/googlecloudsdk/gcloud/sdktools/auth/activate_service_account.py"
			],
			[
				"accountnew",
				"templates/accounts/account_new.html"
			],
			[
				"accountcont",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"leadc",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"contactcon",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"casecont",
				"static/app/scripts/controllers/casecontrollers.js"
			],
			[
				"accouncon",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"leadcont",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"accountsh",
				"templates/accounts/account_show.html"
			],
			[
				"leadcontro",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"contactsh",
				"templates/contacts/contact_show.html"
			],
			[
				"accountse",
				"static/app/scripts/services/accountservices.js"
			],
			[
				"concatse",
				"static/app/scripts/services/contactservices.js"
			],
			[
				"contactcont",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"leadshow",
				"templates/leads/lead_show.html"
			],
			[
				"leaenew",
				"templates/leads/lead_new.html"
			],
			[
				"contactc",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"contactne",
				"templates/contacts/contact_new.html"
			],
			[
				"test.css",
				"static/bootstrap3/css/test.css"
			],
			[
				"user",
				"templates/admin/users/user_list.html"
			],
			[
				"sales",
				"templates/salesforce_callback.html"
			],
			[
				"contactser",
				"static/app/scripts/services/contactservices.js"
			],
			[
				"userlis",
				"templates/admin/users/user_list.html"
			],
			[
				"handl",
				"handlers.py"
			],
			[
				"accountshow",
				"templates/accounts/account_show.html"
			],
			[
				"contactsho",
				"templates/contacts/contact_show.html"
			],
			[
				"casene",
				"templates/cases/case_new.html"
			],
			[
				"opposer",
				"static/app/scripts/services/opportunityservices.js"
			],
			[
				"accountc",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"oppose",
				"static/app/scripts/services/opportunityservices.js"
			],
			[
				"caselis",
				"templates/cases/case_list.html"
			],
			[
				"sync",
				"static/build/js/sync_ctrls_sers_scripts.js"
			],
			[
				"sett",
				"static/app/scripts/services/settingservices.js"
			],
			[
				"casesh",
				"templates/cases/case_show.html"
			],
			[
				"setting",
				"static/app/scripts/services/settingservices.js"
			],
			[
				"casesho",
				"templates/cases/case_show.html"
			],
			[
				"contactco",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"leadcontrol",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"taskcon",
				"static/app/scripts/controllers/taskcontrollers.js"
			],
			[
				"casecontr",
				"static/app/scripts/controllers/casecontrollers.js"
			],
			[
				"leadcon",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"accoucon",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"casec",
				"static/app/scripts/controllers/casecontrollers.js"
			],
			[
				"oppcon",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"concont",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"contactlis",
				"templates/contacts/contact_list.html"
			],
			[
				"leadlis",
				"templates/leads/lead_list.html"
			],
			[
				"all",
				"templates/activities/all_tasks.html"
			],
			[
				"caseli",
				"templates/cases/case_list.html"
			],
			[
				"contactli",
				"templates/contacts/contact_list.html"
			],
			[
				"accountlist",
				"static/app/views/accountlist.html"
			],
			[
				"search",
				"static/app/scripts/controllers/searchcontrollers.js"
			],
			[
				"model",
				"model.py"
			],
			[
				"accountne",
				"templates/accounts/account_new.html"
			],
			[
				"accountsho",
				"templates/accounts/account_show.html"
			],
			[
				"leadne",
				"templates/leads/lead_new.html"
			],
			[
				"leadnew",
				"templates/leads/lead_new.html"
			],
			[
				"direct",
				"static/app/scripts/directives/directives.js"
			],
			[
				"leadcontroll",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"app.js",
				"static/app/scripts/app.js"
			],
			[
				"accountcontr",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"conttactcon",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"infonos",
				"static/app/scripts/services/infonodeservices.js"
			],
			[
				"contactcontro",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"leadsho",
				"templates/leads/lead_show.html"
			],
			[
				"contaccon",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"accounts",
				"static/app/scripts/services/accountservices.js"
			],
			[
				"accountcontrol",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"controlle",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"leadser",
				"static/app/scripts/services/leadservices.js"
			],
			[
				"contactcno",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"accoun",
				"templates/accounts/account_new.html"
			],
			[
				"leadn",
				"templates/leads/lead_new.html"
			],
			[
				"contacts",
				"static/app/scripts/services/contactservices.js"
			],
			[
				"syncclt",
				"static/build/js/sync_ctrls_sers_scripts.js"
			],
			[
				"contactnew",
				"templates/contacts/contact_new.html"
			],
			[
				"oppcontr",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"ccountser",
				"static/app/scripts/services/accountservices.js"
			],
			[
				"task",
				"static/app/scripts/controllers/taskcontrollers.js"
			],
			[
				"info",
				"static/app/scripts/services/infonodeservices.js"
			],
			[
				"taskser",
				"static/app/scripts/services/taskservices.js"
			],
			[
				"contcatcont",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"tasksc",
				"static/app/scripts/controllers/taskcontrollers.js"
			],
			[
				"taskc",
				"static/app/scripts/controllers/taskcontrollers.js"
			],
			[
				"leadse",
				"static/app/scripts/services/leadservices.js"
			],
			[
				"contactcontrol",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"opocontrol",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"con",
				"templates/contacts/contact_show.html"
			],
			[
				"contactshow",
				"templates/contacts/contact_show.html"
			],
			[
				"oppocontroll",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"opportunitcon",
				"static/app/scripts/controllers/admin/OpportunityEditController.js"
			],
			[
				"oppocontrol",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"opportunticont",
				"static/app/scripts/controllers/admin/OpportunityEditController.js"
			],
			[
				"opporcontr",
				"static/app/scripts/controllers/admin/OpportunityEditController.js"
			],
			[
				"leadservice",
				"static/app/scripts/services/leadservices.js"
			],
			[
				"base.ht",
				"templates/base.html"
			],
			[
				"doc",
				"iomodels/crmengine/documents.py"
			],
			[
				"docu",
				"iomodels/crmengine/documents.py"
			],
			[
				"iomess",
				"iomessages.py"
			],
			[
				"document",
				"iomodels/crmengine/documents.py"
			],
			[
				"leadco",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"lead_sho",
				"templates/leads/lead_show.html"
			],
			[
				"documen",
				"static/app/scripts/controllers/documentcontrollers.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 285.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
