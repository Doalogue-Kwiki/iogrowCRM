from model import User
import httplib2
from google.appengine.api import memcache
from apiclient.discovery import build
import re
from iomodels.crmengine.leads import Lead,LeadInsertRequest
import iomessages

user = User.get_by_email('tedj@iogrow.com')
credentials = user.google_credentials
http = credentials.authorize(httplib2.Http(memcache))
gmail_service = build('gmail', 'v1', http=http)
# prepare params to insert
leads ={}
threads = gmail_service.users().threads().list(userId='me',q='is:important',maxResults=100).execute()
for thread in threads['threads']:
    try:
        thread_details = gmail_service.users().threads().get(userId='me',id=thread['id']).execute()
        if len(thread_details['messages'])>1:
            for message in thread_details['messages']:
                for field in message['payload']['headers']:
                    try:
                        if field['name']=='From' or field['name']=='To':
                            name =  field['value'].split('<')[0]
                            check_if_email = re.search('([\w.-]+)@([\w.-]+)', name)
                            if check_if_email is None:
                                match = re.search('([\w.-]+)@([\w.-]+)', field['value'])
                                if match:
                                    if match.group()!='tedj@iogrow.com':
                                        if match.group() not in leads.keys():
                                            email = iomessages.InfoNodeRequestSchema(kind='emails', fields=[{'field':'email','value':match.group()}])
                                            firstname = name.split()[0]
                                            lastname = " ".join(name.split()[1:])
                                            request = LeadInsertRequest(firstname=firstname,lastname=lastname,infonodes=[email],access='private',source='Gmail')
                                            Lead.insert(user,request)
                                            leads[match.group()]=name
                    except:
                        print 'an error has occured'
    except:
        print 'an error has occured'
                                    
                                
         


                            

        

