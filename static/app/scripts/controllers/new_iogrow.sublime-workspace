{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"min",
				"min-height"
			],
			[
				"lo",
				"log"
			],
			[
				"stage",
				"stage_selected"
			],
			[
				"backgr",
				"background-color"
			],
			[
				"bla",
				"black"
			],
			[
				"Lea",
				"Lead"
			],
			[
				"staus",
				"status"
			],
			[
				"sta",
				"stat"
			],
			[
				"hei",
				"height"
			],
			[
				"wid",
				"width"
			],
			[
				"hight",
				"height"
			],
			[
				"cons",
				"console	(leadservices.js)"
			],
			[
				"stage_",
				"stage_number	(sync_ctrls_sers_scripts.js)"
			],
			[
				"contact",
				"contacts"
			],
			[
				"C",
				"Case"
			],
			[
				"A",
				"Account"
			],
			[
				"Opp",
				"Opportunity	(accountservices.js)"
			],
			[
				"Accou",
				"Account	(leadservices.js)"
			],
			[
				"opp",
				"opportunity	(opportunityservices.js)"
			],
			[
				"func",
				"function"
			],
			[
				"linkedin",
				"linkedin_profile	(sync_ctrls_sers_scripts.js)"
			],
			[
				"pro",
				"profile_img_url"
			],
			[
				"new",
				"newcontact"
			],
			[
				"lead",
				"lead"
			],
			[
				"res",
				"resume"
			],
			[
				"past",
				"past_pos"
			],
			[
				"curr",
				"current_post"
			],
			[
				"pas",
				"past_post"
			],
			[
				"form",
				"formations"
			],
			[
				"str",
				"stringify"
			],
			[
				"sele",
				"selected_tasks"
			],
			[
				"index",
				"index"
			],
			[
				"satg",
				"stage_selected	(contact_show.html)"
			],
			[
				"stag",
				"stage_number	(opportunitycontroller.js)"
			],
			[
				"oppo",
				"opportunity"
			],
			[
				"cus",
				"customfield"
			],
			[
				"email",
				"email"
			],
			[
				"websit",
				"websites"
			],
			[
				"web",
				"websites"
			],
			[
				"app",
				"apply	method.apply()"
			],
			[
				"last",
				"lastname"
			],
			[
				"wi",
				"width"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"pa",
				"payment"
			],
			[
				"font",
				"font-weight"
			],
			[
				"marg",
				"margin-top"
			],
			[
				"prepareInfonodes",
				"prepareInfonodesCase"
			],
			[
				"leng",
				"length==0"
			],
			[
				"blanks",
				"blankStatecase"
			],
			[
				"inde",
				"indexInOpp"
			],
			[
				"case",
				"cases"
			],
			[
				"selectedCase",
				"selectedCases"
			],
			[
				"casesa",
				"casestatuses"
			],
			[
				"stat",
				"status"
			],
			[
				"re",
				"return"
			],
			[
				"shar",
				"sharing_with"
			],
			[
				"lunc",
				"lunchWindow	(leadcontrollers.js)"
			],
			[
				"bro",
				"browser	(leadcontrollers.js)"
			],
			[
				"webs",
				"website"
			],
			[
				"logo",
				"logo_img_url"
			],
			[
				"prof",
				"profile_img"
			],
			[
				"image",
				"imageSrc"
			],
			[
				"add",
				"addresses"
			],
			[
				"soc",
				"sociallinks"
			],
			[
				"inf",
				"infonode"
			],
			[
				"exist",
				"exists"
			],
			[
				"socia",
				"social"
			],
			[
				"account",
				"account"
			],
			[
				"we",
				"websites"
			],
			[
				"socila",
				"sociallink"
			],
			[
				"socil",
				"sociallink"
			],
			[
				"com",
				"company"
			],
			[
				"loca",
				"locality=address"
			],
			[
				"loc",
				"locality=address"
			],
			[
				"for",
				"formatted"
			],
			[
				"con",
				"contact"
			],
			[
				"consol",
				"console"
			],
			[
				"isE",
				"isEmptyObject	(opportunitycontroller.js)"
			],
			[
				"exe",
				"executed	(opportunitycontroller.js)"
			],
			[
				"pre",
				"preview	(leadcontrollers.js)"
			],
			[
				"embed",
				"embedLink"
			],
			[
				"emb",
				"embedLink	(opportunitycontroller.js)"
			],
			[
				"item",
				"item"
			],
			[
				"tr",
				"true"
			],
			[
				"docum",
				"documents"
			],
			[
				"doc",
				"document"
			],
			[
				"selecte",
				"selectedTab==5"
			],
			[
				"seletedO",
				"selectedOpps	(leadcontrollers.js)"
			],
			[
				"selete",
				"selectedTab==2"
			],
			[
				"selectedOpp",
				"selectedOpps"
			],
			[
				"edite",
				"editbeforedelete"
			],
			[
				"seleted",
				"selectedTab==2"
			],
			[
				"curre",
				"current_stage"
			],
			[
				"even",
				"eventt"
			],
			[
				"adre",
				"addresses"
			],
			[
				"phone",
				"phones"
			],
			[
				"info",
				"infonodes"
			],
			[
				"created",
				"created_at	(opportunitycontroller.js)"
			],
			[
				"st",
				"style"
			],
			[
				"sle",
				"selectedCards"
			],
			[
				"acc",
				"access"
			],
			[
				"ent",
				"entityKey"
			],
			[
				"accoun",
				"account"
			],
			[
				"cas",
				"casee"
			],
			[
				"curso",
				"cursor:pointer"
			],
			[
				"alwa",
				"alwaysVisible	(jquery.slimscroll.js)"
			],
			[
				"over",
				"overflow	(test.css)"
			],
			[
				"he",
				"height"
			],
			[
				"page",
				"pageToken"
			],
			[
				"toStri",
				"toString()	String"
			],
			[
				"next",
				"nextPageToken"
			],
			[
				"contcat",
				"contacts"
			],
			[
				"trigg",
				"triggered"
			],
			[
				"getRe",
				"getRequestParams"
			],
			[
				"getR",
				"getRequestParams"
			],
			[
				"apply",
				"apply"
			],
			[
				"padd",
				"padding"
			],
			[
				"trans",
				"transparent	(untitled.css)"
			],
			[
				"appl",
				"apply	(leadcontrollers.js)"
			],
			[
				"accounts",
				"accounts"
			],
			[
				"selected",
				"selectedTab"
			],
			[
				"file",
				"field"
			],
			[
				"inlien",
				"inlinepatch"
			],
			[
				"custom",
				"customfield"
			],
			[
				"fiel",
				"fields"
			],
			[
				"option",
				"option"
			],
			[
				"op",
				"option"
			],
			[
				"sche",
				"schemas	(settingservices.js)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_list.html",
			"settings":
			{
				"buffer_size": 77941,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/opportunityservices.js",
			"settings":
			{
				"buffer_size": 17599,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "app.controller('OpportunityListCtrl', ['$scope','$filter','Auth','Account','Opportunity','Opportunitystage','Search','Tag','Edge','User','Event','Task','Permission',\n  function($scope,$filter,Auth,Account,Opportunity,Opportunitystage,Search,Tag,Edge,User,Event,Task,Permission) {\n     $(\"ul.page-sidebar-menu li\").removeClass(\"active\");\n     $(\"#id_Opportunities\").addClass(\"active\");\n     document.title = \"Opportunities: Home\";\n     trackMixpanelAction('OPPORTUNITY_LIST_VIEW');\n     $scope.isSignedIn = false;\n     $scope.immediateFailed = false;\n     $scope.nextPageToken = undefined;\n     $scope.prevPageToken = undefined;\n     $scope.isLoading = false;\n     $scope.nbLoads=0;\n     $scope.isMoreItemLoading = false;\n     $scope.pagination = {};\n     $scope.currentPage = 01;\n     $scope.pages = [];\n     //HKA 11.12.2013 var Opportunity to manage Next & Prev\n     $scope.opppagination = {};\n     $scope.oppCurrentPage=01;\n     $scope.opppages=[];\n\n     $scope.opportunities = [];\n     $scope.stage_selected={};\n     $scope.opportunity = {\n      'currency':'USD',\n      'price_type':'fixed'\n     };\n     $scope.opportunity.access ='public';\n     $scope.order = '-updated_at';\n     $scope.selected_tags = [];\n     $scope.draggedTag = null;\n     $scope.showNewTag=false;\n     $scope.tag = {};\n     $scope.tags=[];\n     $scope.showUntag=false;\n     $scope.edgekeytoDelete=undefined;\n     $scope.color_pallet=[\n         {'name':'red','color':'#F7846A'},\n         {'name':'orange','color':'#FFBB22'},\n         {'name':'yellow','color':'#EEEE22'},\n         {'name':'green','color':'#BBE535'},\n         {'name':'blue','color':'#66CCDD'},\n         {'name':'gray','color':'#B5C5C5'},\n         {'name':'teal','color':'#77DDBB'},\n         {'name':'purple','color':'#E874D6'},\n     ];\n     $scope.tag.color= {'name':'green','color':'#BBE535'};\n     $scope.selectedOpportunity=null;\n     $scope.currentOpportunity=null;\n     $scope.showTagsFilter=false;\n     $scope.showNewTag=false;\n     $scope.percent = 0;\n     $scope.show=\"cards\";\n     $scope.selectedCards=[];\n     $scope.allCardsSelected=false;           \n     $scope.chartOptions = {\n         animate:{\n             duration:0,\n             enabled:false\n         },\n         size:100,\n         barColor:'#58a618',\n         scaleColor:false,\n         lineWidth:7,\n         lineCap:'circle'\n     };\n     $scope.inFinalStages=false;\n     $scope.finalStageName=null;\n     $scope.chartOptionsOnList = {\n         animate:{\n             duration:0,\n             enabled:false\n         },\n         size:55,\n         barColor:'#58a618',\n         scaleColor:false,\n         lineWidth:3,\n         lineCap:'square'\n     };\n     $scope.opportunitiesfilter='all';\n     $scope.opportunitiesAssignee=null;\n     $scope.selected_access='public';\n     $scope.selectedPermisssions=true;\n     $scope.sharing_with=[];\n     $scope.opportunitystages=[];\n      $scope.oppStagesOrigin = [];\n     $scope.opportunityToChage={};\n     $scope.stageToChage={};\n     $scope.opportunitiesbysatges=[];\n     $scope.stageFrom={};\n     $scope.currentFilters = {\n          tags: $scope.selected_tags,\n          owner: 'all',\n          orderBy: 'name'\n      };\n      $scope.opportunitystage={\n        items:[]\n      };\n      $scope.opportunitystage.items=[];\n      $scope.opportunitiesbysatges=[];\n       $scope.isEmptyArray=function(Array){\n                if (Array!=undefined && Array.length>0) {\n                return false;\n                }else{\n                    return true;\n                };    \n            \n        }\n\n          /*angular.forEach($scope.opportunitiesbysatges, function(opp){\n                        if (opp.entityKey==$scope.opportunityToChage.entityKey) {\n                          opp.current_stage=$scope.stageToChage;\n                          $scope.apply();\n                        };\n                      });*/\n\n      $scope.isStage = function(stage) {\n        if (stage.probability == 0 || stage.probability == 100) {\n          return false;\n        }\n        return true;\n      };\n      $scope.ExportCsvFile = function () {\n            if ($scope.selectedCards.length != 0) {\n                $scope.msg = \"Do you want export  selected opportunities\"\n\n            } else {\n                if ($scope.selected_tags.length != 0) {\n                    $scope.msg = \"Do you want export  opportunities with the selected tags\"\n\n                } else $scope.msg = \"Do you want export  all opportunities\"\n\n\n            }\n            $(\"#TakesFewMinutes\").modal('show');\n        }\n      $scope.LoadCsvFile = function () {\n            console.log(\"exporting\", $scope.selectedCards.length);\n            if ($scope.selectedCards.length != 0) {\n                var ids = [];\n                angular.forEach($scope.selectedCards, function (selected_oppo) {\n                    ids.push(selected_oppo.id);\n                });\n                Opportunity.export_key($scope, {ids: ids});\n            } else {\n                var tags = [];\n                angular.forEach($scope.selected_tags, function (selected_tag) {\n                    tags.push(selected_tag.entityKey);\n                });\n                var params = {\"tags\": tags};\n                console.log(params);\n                Opportunity.export($scope, params);\n                $scope.selectedKeyLeads = [];\n            }\n            $(\"#TakesFewMinutes\").modal('hide');\n        }\n      $scope.getOpportunitiesForStage = function(opps,stage) {\n          $scope.stageToChage=stage;\n          var result=[];\n                 angular.forEach(opps, function(opp){\n                        if (opp.current_stage.name==stage) {\n                          result.push(opp);\n                        };\n                      });\n          return result;\n      }; \n      $scope.inThisStage= function(stage) {\n          return function(opportunity) {\n              return opportunity.current_stage.name == stage.name;\n          };\n      };\n      $scope.selectedOpp=function(opportunity,stage){\n          if ($scope.selectedCards.indexOf(opportunity) < 0) {\n             $scope.stageFrom=stage;\n          }else{\n        \n          }\n          $scope.opportunityToChage=opportunity;\n      };\n     $scope.updateOpportunityStage = function(stage,opp){\n        console.log(\"here started\");\n        console.log(stage);\n        console.log(opp);\n        console.log(\"here started\");\n\n          $scope.stageTo=stage;\n          $scope.opportunityToChage=opp;\n          if (stage[0].entityKey) {\n              if ($scope.selectedCards.indexOf($scope.opportunityToChage) >= 0) {\n                  angular.forEach($scope.selectedCards, function(opportunitCard){\n                          var params = {\n                          'entityKey':opportunitCard.entityKey,\n                          'stage': stage[0].entityKey\n                          };\n                          Opportunity.update_stage($scope,params);\n                  });\n              }else{\n                 var params = {\n                        'entityKey':$scope.opportunityToChage.entityKey,\n                        'stage': stage[0].entityKey\n                  };\n                  Opportunity.update_stage($scope,params);\n              }\n          }\n       };\n       $scope.stageUpdated=function(resp){\n\n          if (!jQuery.isEmptyObject($scope.stageFrom)) {\n\n            $scope.stageFrom.items.splice($scope.stageFrom.items.indexOf($scope.opportunityToChage) , 1);\n            if ($scope.stageTo.items==undefined) {\n             $scope.stageTo.items=[]; \n            }\n            $scope.stageTo.items.push($scope.opportunityToChage);\n            $scope.apply();\n            $scope.stageFrom=[];\n          }else{\n            console.log(\"in no from stage defined\");\n            $scope.oppTochange={};\n            angular.forEach($scope.selectedCards, function(opp){\n              if (opp.entityKey==resp.entityKey) {\n                $scope.oppTochange=opp;\n              }\n            });\n            if (!jQuery.isEmptyObject($scope.oppTochange)) {\n              console.log(\"in not isEmptyObject\")\n              console.log(\"stageTo\");\n              console.log($scope.stageTo);\n              angular.forEach($scope.opportunitiesbysatges, function(stag){\n                if (stag.items!=undefined) {\n                  if (stag.items.indexOf($scope.oppTochange) >= 0) {\n                    console.log(\"found in the stage\");\n                  stag.items.splice(stag.items.indexOf($scope.oppTochange) , 1);\n                  }\n                  if (!jQuery.isEmptyObject($scope.stageTo)) {\n                      console.log(\"pushed to next stage\");\n                      if ( $scope.stageTo.items.indexOf($scope.oppTochange) < 0) {\n                          $scope.stageTo.items.push($scope.oppTochange);\n                          $scope.apply();\n                      };\n                      \n                  };\n                }\n              });\n              $scope.selectedCards.splice($scope.selectedCards.indexOf($scope.oppTochange) , 1);\n              if ($scope.isEmptyArray($scope.selectedCards)) {\n                $scope.stageTo={};\n              }\n            }\n      }\n     }\n      $scope.updateStageOpps=function(stage){\n        if (!$scope.isEmptyArray($scope.selectedCards)) {\n            $scope.stageTo=stage;\n            if (stage.stage.entityKey) {\n\n                angular.forEach($scope.selectedCards, function(selected_opportunity){\n                    var params = {\n                              'entityKey':selected_opportunity.entityKey,\n                              'stage': stage.stage.entityKey\n                    };\n                    console.log(params);\n                    Opportunity.update_stage($scope,params);\n                }); \n\n            };\n            $scope.inFinalStages=false;\n            $scope.finalStageName=null;\n        }else{\n          if (stage.stage.probability==100 && $scope.closewonstage.items!=undefined) {\n            console.log(\"in closewonstage\");\n            $scope.opportunities=$scope.closewonstage.items;\n            $scope.finalStageName=\"won\";              \n          }else{\n\n            if (stage.stage.probability==0 && $scope.closeloststage.items!=undefined) {\n              console.log(\"in closeloststage\");\n              $scope.opportunities=$scope.closeloststage.items;  \n              $scope.finalStageName=\"lost\";\n            };\n          };\n          $scope.inFinalStages=true;\n        };      \n      }\n      $scope.inProcess=function(varBool,message){\n          if (varBool) {           \n            if (message) {\n              console.log(\"starts of :\"+message);\n            };\n            $scope.nbLoads=$scope.nbLoads+1;\n            if ($scope.nbLoads==1) {\n              $scope.isLoading=true;\n            };\n          }else{\n            if (message) {\n              console.log(\"ends of :\"+message);\n            };\n            $scope.nbLoads=$scope.nbLoads-1;\n            if ($scope.nbLoads==0) {\n               $scope.isLoading=false;\n \n            };\n\n          };\n        }        \n        $scope.apply=function(){\n         \n          if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {\n               $scope.$apply();\n              }\n              return false;\n        }\n      $scope.fromNow = function(fromDate){\n          return moment(fromDate,\"YYYY-MM-DD HH:mm Z\").fromNow();\n      }\n\n      // What to do after authentication\n       $scope.runTheProcess = function(){\n          var params = {};\n          Opportunity.list2($scope,params,function(resp){\n                console.log(\"here check resp\");\n                console.log(resp);\n                if(!resp.code){\n                  if (!resp.items){\n                    if(!$scope.isFiltering){\n                        $scope.blankStateopportunity = true;\n                    }\n                  }\n                 $scope.opportunitystage.items=[];\n                 if ($scope.opportunitiesbysatges!=undefined && $scope.opportunitiesbysatges.length >0) {\n                    console.log(\"here  before empty array\");\n                    $scope. .splice(0,$scope.opportunitiesbysatges.length);\n                 }else{\n                    $scope.opportunitiesbysatges=[];\n                 };\n                 $scope.oppStagesOrigin = [];\n                 $scope.closestages=[];\n                 $scope.closewonstage={};\n                 $scope.closeloststage={};\n                 angular.forEach(resp.items, function(item){\n                      if (item.items!=undefined) {\n                         $scope.opportunities=$scope.opportunities.concat(item.items);\n                      };\n                      console.log($scope.opportunities);\n                      if (item.stage.probability==0 || item.stage.probability== 100) {\n                        $scope.closestages.push(item);\n                        if (item.stage.probability==100) {\n                            $scope.closewonstage=item;\n                        }else{\n                            $scope.closeloststage=item;\n                        };\n                      }else{\n                        if (item.items==undefined) {\n                          item.items=[];\n                        };\n                        item.items.unshift({'entityKey':item.stage.entityKey});\n                        console.log(item.items);\n                        $scope.opportunitiesbysatges.push(item);\n                        $scope.oppStagesOrigin.push(item);\n                      };\n                  });\n                 console.log('$scope.opportunitiesbysatges');\n                 console.log($scope.opportunitiesbysatges);                 \n                 if ($scope.oppCurrentPage>1){\n                      $scope.opppagination.prev = true;\n                   }else{\n                       $scope.opppagination.prev = false;\n                   }\n                 if (resp.nextPageToken){\n                   var nextPage = $scope.oppCurrentPage + 1;\n                   // Store the nextPageToken\n                   $scope.opppages[nextPage] = resp.nextPageToken;\n                   $scope.opppagination.next = true;\n\n                 }else{\n                  $scope.opppagination.next = false;\n                 }\n                 $scope.inProcess(false);  \n                 $scope.apply();\n              }else {\n\n                if(resp.code==401){\n                       $scope.refreshToken();\n                       $scope.inProcess(false);  \n                       $scope.apply();\n                };\n\n              }\n            \n          });\n          Opportunitystage.list($scope,{'order':'stage_number'});\n          var paramsTag = {'about_kind':'Opportunity'};\n          Tag.list($scope,paramsTag);\n          User.list($scope,{});\n          // for (var i=0;i<50;i++)\n          //   {\n          //       var randomAmount = Math.floor((Math.random() * 100) + 1);\n          //       var opportunity = {\n          //                 'name':  i.toString() + ' kass ta3 lban',\n          //                 'amount_total':randomAmount.toString(),\n          //\n          //                 'access':'public'\n          //               }\n          //       $scope.searchAccountQuery = 'ioCompare'\n          //       $scope.save(opportunity);\n          //   }\n          ga('send', 'pageview', '/opportunities');\n          if (localStorage['oppShow']!=undefined) {\n            if (localStorage['oppShow']==\"cards\") {\n              localStorage['oppShow']=\"list\";\n            };\n              $scope.show=localStorage['oppShow'];\n\n          };\n         window.Intercom('update');\n       };\n    \n       $(window).resize(function() {\n        });\n      $scope.selectMember = function () {\n            if ($scope.sharing_with.indexOf($scope.user)==-1) {\n                $scope.slected_memeber = $scope.user;\n\n            $scope.sharing_with.push($scope.slected_memeber);\n            }\n            $scope.user = '';\n\n         };\n      $scope.unselectMember = function(index) {\n            $scope.selected_members.splice(index, 1);\n            console.log($scope.selected_members);\n        };\n      $scope.share = function (me) {\n            if ($scope.selectedPermisssions) {\n                var sharing_with=$.extend(true, [], $scope.sharing_with);\n                $scope.sharing_with=[];\n                angular.forEach($scope.selectedCards, function (selected_lead) {\n                    console.log(\"selected_lead\");\n                    console.log(selected_lead);\n                    var id = selected_lead.id;\n                    if (selected_lead.owner.google_user_id == me) {\n                        var params = {'id': id, 'access': $scope.selected_access};\n                        console.log(\"$scope.selected_access\");\n                        console.log($scope.selected_access);\n                        Opportunity.patch($scope, params);\n                        params[\"parent\"] = \"opportunity\";\n                        Event.permission($scope, params);\n                        Task.permission($scope, params);\n                        \n                    }\n                    if ($scope.selected_access==\"private\" && sharing_with.length > 0) {\n                        var items = [];\n\n                        angular.forEach(sharing_with, function (user) {\n                            var item = {\n                                'type': \"user\",\n                                'value': user.entityKey\n                            };\n                            if (item.google_user_id != selected_lead.owner.google_user_id) items.push(item);\n                        });\n                        if (items.length > 0) {\n                                var params = {\n                                    'about': selected_lead.entityKey,\n                                    'items': items\n                                };\n                                console.log(params);\n                                Permission.insert($scope, params);\n                        }\n                    }\n                });\n            }\n        };\n\n      $scope.checkPermissions= function(me){\n          console.log(\"enter here in permission\");\n          $scope.selectedPermisssions=true;\n          angular.forEach($scope.selectedCards, function(selected_opportunity){\n              console.log(selected_opportunity.owner.google_user_id);\n              console.log(me);\n              if (selected_opportunity.owner.google_user_id==me) {\n                console.log(\"hhhhhhhhheree enter in equal\");\n              };\n              if (selected_opportunity.owner.google_user_id!=me) {\n                console.log(\"in not owner\");\n                $scope.selectedPermisssions=false;\n              };\n          });\n          console.log($scope.selectedPermisssions);\n        }\n   $scope.getColaborators=function(){\n\n   };\n       $scope.isSelectedCard = function(opportunity) {\n          return ($scope.selectedCards.indexOf(opportunity) >= 0);\n        };\n          $scope.unselectAll = function($event){\n               var element=$($event.target);\n               if(element.hasClass('waterfall')){\n                  $scope.selectedCards=[];\n               };\n              /*$scope.selectedCards=[];*/\n          }\n          $scope.selectAll = function($event){\n         \n              var checkbox = $event.target;\n               if(checkbox.checked){\n                  $scope.selectedCards=[];\n                  console.log($scope.opportunities);\n                  $scope.selectedCards=$scope.selectedCards.concat($scope.opportunities);\n                    \n                  $scope.allCardsSelected=true;\n\n               }else{\n\n                $scope.selectedCards=[];\n                $scope.allCardsSelected=false;\n                \n               }\n          };\n\n          $scope.wizard = function(){\n        localStorage['completedTour'] = 'True';\n        var tour = {\n            id: \"hello-hopscotch\",\n             steps: [\n             {\n                title: \"Step 1: Create New opportunity\",\n                content: \"Click here to create new opportunity and add detail about it.\",\n                target: \"new_opportunity\",\n                placement: \"bottom\"\n              },\n             {\n                \n                title: \"Step 2: Add tags\",\n                content: \"Add Tags to filter your opportunities.\",\n                target: \"add_tag\",\n                placement: \"left\"\n              }\n             \n              \n            ]\n           \n          };\n          // Start the tour!\n          console.log(\"beginstr\");\n          hopscotch.startTour(tour);\n      };\n          \n          \n          $scope.editbeforedeleteselection = function(){\n            $('#BeforedeleteSelectedOpportunities').modal('show');\n          };\n          $scope.deleteSelection = function(){\n              if (!jQuery.isEmptyObject($scope.opportunityToChage)) {\n                console.log(\"in oppo to change\");\n                  var params = {'entityKey':$scope.opportunityToChage.entityKey};\n                  Opportunity.delete($scope, params);\n              }else{\n                 angular.forEach($scope.selectedCards, function(selected_opportunity){\n\n                  var params = {'entityKey':selected_opportunity.entityKey};\n                  Opportunity.delete($scope, params);\n\n                 });  \n              };\n                        \n              $('#BeforedeleteSelectedOpportunities').modal('hide');\n          };\n          $scope.oppDeleted=function(entityKey){\n            console.log(\"test oppoo deleted\");\n            console.log(entityKey);\n            if ($scope.selectedOpportunity) {\n                  console.log(\"test selectedOpportunity\");\n               $scope.opportunities.splice($scope.opportunities.indexOf($scope.selectedOpportunity) , 1);\n               $scope.apply();\n               $scope.selectedCards=[];\n            }else{\n              if (!jQuery.isEmptyObject($scope.opportunityToChage)) {\n                $scope.stageFrom.items.splice($scope.stageFrom.items.indexOf($scope.opportunityToChage) , 1);\n                $scope.apply();\n                $scope.selectedCards=[];\n              }else{\n               /* console.log(\"$scope.selectedCards\");\n                console.log($scope.selectedCards);*/\n               \n                  angular.forEach($scope.opportunities, function(opp){\n                    if (opp.entityKey==entityKey) {\n                      $scope.opportunities.splice($scope.opportunities.indexOf(opp) , 1);\n                      $scope.apply();\n                    };\n                  }); \n                  angular.forEach($scope.selectedCards, function(card){\n                    if (card.entityKey==entityKey) {\n                      $scope.selectedCards.splice($scope.selectedCards.indexOf(card) , 1);\n                      $scope.apply();\n                    };\n                  });\n                  console.log(\"yes heeeeeeeeeeere\");\n                  angular.forEach($scope.opportunitiesbysatges, function(stage){\n\n                      angular.forEach(stage.items, function(item){\n                       if (item.entityKey==entityKey) {\n                          stage.items.splice(stage.items.indexOf(item) , 1);\n                       }; \n                      $scope.apply();\n                      });\n                  });\n                 \n              }\n              \n               \n            };\n            \n          }\n         /* $scope.oppDeleted = function(resp){\n\n            if ($scope.selectedCards.length >0) {\n              angular.forEach($scope.selectedCards, function(selected_opportunity){\n                 $scope.opportunities.splice($scope.opportunities.indexOf(selected_opportunity) , 1);\n                }); \n            };        \n              $scope.selectedCards=[];\n          };*/\n          \n          $scope.selectCardwithCheck=function($event,index,opportunity){\n\n              var checkbox = $event.target;\n\n               if(checkbox.checked){\n                  if ($scope.selectedCards.indexOf(opportunity) == -1) {             \n                    $scope.selectedCards.push(opportunity);\n                    console.log(\"card pushed\");\n                    console.log($scope.selectedCards);\n                  }\n               }else{       \n                    $scope.selectedCards.splice($scope.selectedCards.indexOf(opportunity) , 1);\n               }\n\n          }\n           $scope.filterByName=function(){\n              if ($scope.fltby!='name') {\n                     $scope.fltby = 'name'; $scope.reverse=false\n              }else{\n                     $scope.fltby = '-name'; $scope.reverse=false;\n              };\n          }\n           $scope.filterBy=function(text){\n              if ($scope.fltby!=text) {\n                     $scope.fltby = text; $scope.reverse=false\n              }else{\n                     $scope.fltby = '-'+text; $scope.reverse=false;\n              };\n          }\n\n         $scope.removeTag = function(tag,opportunity) {\n\n             $scope.dragTagItem(tag,opportunity);\n            $scope.dropOutTag();\n        }\n\n\n              $scope.dropOutTag = function() {\n\n            var params = {'entityKey': $scope.edgekeytoDelete}\n            Edge.delete($scope, params);\n            $scope.edgekeytoDelete = undefined;\n            $scope.showUntag = false;\n\n        }\n        $scope.dragTagItem = function(tag,opportunity) {\n\n            $scope.showUntag = true;\n            $scope.edgekeytoDelete = tag.edgeKey;\n            $scope.tagtoUnattach = tag;\n            $scope.contacttoUnattachTag = opportunity;\n        }\n        // We need to call this to refresh token when user credentials are invalid\n       $scope.refreshToken = function() {\n            Auth.refreshToken();\n       };\n       $scope.editbeforedelete = function(opportunity){\n        console.log(\"ssssss\");\n         $scope.selectedOpportunity=opportunity;\n         $('#BeforedeleteOpportunity').modal('show');\n       };\n      $scope.deleteopportunity = function(){\n         var params = {'entityKey':$scope.selectedOpportunity.entityKey};\n         Opportunity.delete($scope, params);\n         $('#BeforedeleteOpportunity').modal('hide');\n         $scope.selectedOpportunity=null;\n       };\n      $scope.showAssigneeTags=function(opportunity){\n            $('#assigneeTagsToOpp').modal('show');\n            $scope.currentOpportunity=opportunity;\n         };\n       $scope.addTagsTothis = function () {\n\n            var tags = [];\n            var items = [];\n            tags = $('#select2_sample2').select2(\"val\");\n            angular.forEach(tags, function (tag) {\n                var params = {\n                    'parent': $scope.opportunity.entityKey,\n                    'tag_key': tag\n                };\n                Tag.attach($scope, params, -1, 'lead');\n            });\n            $('#select2_sample2').select2(\"val\", \"\");\n            $('#assigneeTagsToOpp').modal('hide');\n        };\n         $scope.addTagstoOpportunities=function(){\n                var tags=[];\n                var items = [];\n                tags=$('#select2_sample2').select2(\"val\");\n                console.log(tags);\n                if ($scope.currentOpportunity!=null) {\n                  angular.forEach(tags, function(tag){\n                           var params = {\n                             'parent': $scope.currentOpportunity.entityKey,\n                             'tag_key': tag\n                          };\n                         Tag.attach($scope, params);\n                        });\n                }else{\n                  angular.forEach($scope.selectedCards, function(selected_opportunity){\n                    angular.forEach(tags, function(tag){\n                      var params = {\n                        'parent': selected_opportunity.entityKey,\n                        'tag_key': tag\n                      };\n                       Tag.attach($scope, params);\n                    });\n\n                });\n                }\n                $scope.apply();\n                $('#select2_sample2').select2(\"val\", \"\");\n                $('#assigneeTagsToOpp').modal('hide');\n\n        };\n        $scope.clearTagsModel=function(id){\n            $('#'+id).select2(\"val\", \"\");\n        }\n        $scope.showNewTagForm=function(){\n            $scope.showNewTag=true;\n            $( window ).trigger( 'resize' );  \n          }\n          $scope.hideNewTagForm=function(){\n            $scope.showNewTag=false;\n            $( window ).trigger( 'resize' ); \n          }\n          $scope.hideTagFilterCard=function(){\n            $scope.showTagsFilter=false;\n            $( window ).trigger( 'resize' ); \n          }\n          $scope.showTagFilterCard=function(){\n            $scope.showTagsFilter=true;\n            $( window ).trigger( 'resize' ); \n          }\n    $scope.getPosition= function(index){\n        if(index<4){\n\n          return index+1;\n        }else{\n          console.log((index%4)+1);\n          return (index%4)+1;\n        }\n     };\n\n     $scope.listNextPageItems = function(){\n\n        var nextPage = $scope.oppCurrentPage + 1;\n        var params = {};\n          if ($scope.opppages[nextPage]){\n            params = {'order' : $scope.order,\n                      'limit':6,\n                      'pageToken':$scope.opppages[nextPage]\n                     }\n          }else{\n            params = {'order' : $scope.order,'limit':6}\n          }\n          console.log('in listNextPageItems');\n          $scope.oppCurrentPage = $scope.oppCurrentPage + 1 ;\n          Opportunity.list($scope,params);\n     }\n     $scope.listMoreItems = function(){\n\n        var nextPage = $scope.oppCurrentPage + 1;\n        var params = {};\n          if ($scope.opppages[nextPage]){\n            params = {'order' : $scope.order,\n                      'limit':20,\n                      'pageToken':$scope.opppages[nextPage]\n                     }\n            $scope.oppCurrentPage = $scope.oppCurrentPage + 1 ;\n            Opportunity.listMore($scope,params);\n          }\n\n     }\n     $scope.listPrevPageItems = function(){\n\n       var prevPage = $scope.oppCurrentPage - 1;\n       var params = {};\n          if ($scope.opppages[prevPage]){\n            params = {'order' : $scope.order,'limit':6,\n                      'pageToken':$scope.opppages[prevPage]\n                     }\n          }else{\n            params = {'order' : $scope.order,'limit':6}\n          }\n          $scope.oppCurrentPage = $scope.oppCurrentPage - 1 ;\n          Opportunity.list($scope,params);\n     }\n\n\n\n     $scope.showModal = function(){\n        console.log('button clicked');\n        $('#addOpportunityModal').modal('show');\n\n      };\n// hadji hicham 23-07-2014 . inlinepatch for labels .\n  $scope.inlinePatch=function(kind,edge,name,tag,value){\n         \n        if(kind==\"tag\"){\n\n        params={'id':tag.id,\n                'entityKey':tag.entityKey,\n                'about_kind':'Lead',\n                'name':value\n                  };\n\n\n           Tag.patch($scope,params);\n      };\n\n\n\n             }\n\n\n\n    $scope.addOpportunityOnKey = function(opportunity){\n      if(event.keyCode == 13 && opportunity.amount){\n          $scope.save(opportunity);\n      }\n\n\n    };\n    $scope.accountInserted = function(resp){\n          $scope.opportunity.account = resp;\n          Opportunity.insert($scope,opportunity);\n      };\n\n    var params_search_account ={};\n     $scope.result = undefined;\n     $scope.q = undefined;\n\n      $scope.$watch('searchAccountQuery', function() {\n         params_search_account['q'] = $scope.searchAccountQuery;\n         if ($scope.searchAccountQuery){\n            Account.search($scope,params_search_account);\n         };\n      });\n      $scope.selectAccount = function(){\n        $scope.opportunity.account = $scope.searchAccountQuery;\n\n     };\n     // Quick Filtering\n     var searchParams ={};\n     $scope.result = undefined;\n     $scope.q = undefined;\n\n     $scope.$watch('searchQuery', function() {\n         searchParams['q'] = $scope.searchQuery;\n         searchParams['limit'] = 7;\n         if ($scope.searchQuery){\n         Opportunity.search($scope,searchParams);\n       };\n     });\n     $scope.selectResult = function(){\n          window.location.replace('#/opportunities/show/'+$scope.searchQuery.id);\n     };\n     $scope.executeSearch = function(searchQuery){\n        if (typeof(searchQuery)=='string'){\n           var goToSearch = 'type:Opportunity ' + searchQuery;\n           window.location.replace('#/search/'+goToSearch);\n        }else{\n          window.location.replace('#/opportunities/show/'+searchQuery.id);\n        }\n        $scope.searchQuery=' ';\n        $scope.apply();\n     };\n     // Sorting\n     $scope.orderBy = function(order){\n        var params = { 'order': order,\n                        'limit':6};\n        $scope.order = order;\n        Opportunity.list($scope,params);\n     };\n     $scope.filterByOwner = function(filter){\n        if (filter){\n          var params = { 'owner': filter,\n                         'order': $scope.order\n                       }\n        }\n        else{\n          var params = {\n              'order': $scope.order}\n        };\n        $scope.isFiltering = true;\n        Opportunity.list($scope,params);\n     };\n     $scope.filterByStage = function(filter){\n      console.log('----------hello--------');\n\n\n          console.log(filter);\n          var params = {\n                         'stage': filter,\n                         'order': $scope.order\n                       }\n\n        $scope.isFiltering = true;\n        Opportunity.list($scope,params);\n     };\n\n/***********************************************\n      HKA 14.02.2014  tags\n*************************************************/\n$scope.listTags=function(){\n      var paramsTag = {'about_kind':'Opportunity'}\n      Tag.list($scope,paramsTag);\n     };\n$scope.edgeInserted = function () {\n       $scope.listopportunities();\n     };\n$scope.listopportunities = function(){\n  var params = { 'order': $scope.order,\n                        'limit':6}\n          Opportunity.list($scope,params);\n   var paramsTag = {'about_kind':'Opportunity'};\n          Tag.list($scope,paramsTag);\n};\n\n\n$scope.addNewtag = function(tag){\n       var params = {\n                          'name': tag.name,\n                          'about_kind':'Opportunity',\n                          'color':tag.color.color\n                      }  ;\n       Tag.insert($scope,params);\n        $scope.tag.name='';\n        $scope.tag.color= {'name':'green','color':'#BBE535'};\n     }\n$scope.tagInserted=function(resp){\n              if ($scope.tags==undefined) {\n                $scope.tags=[];\n            };\n            $scope.tags.unshift(resp);\n            $scope.apply();\n        }\n$scope.updateTag = function(tag){\n            params ={ 'id':tag.id,\n                      'title': tag.name,\n                      'status':tag.color\n            };\n      Tag.patch($scope,params);\n  };\n  $scope.deleteTag=function(tag){\n          params = {\n            'entityKey': tag.entityKey\n          }\n          Tag.delete($scope,params);\n\n\n      };\n\n $scope.listTags=function(){\n  var paramsTag = {'about_kind':'Opportunity'};\n      Tag.list($scope,paramsTag);\n     };\n      $scope.AllFilters = function (currFilters) {\n          $scope.inProcess(true);\n          $scope.cloneOppStages = $.extend(true, [], $scope.oppStagesOrigin);\n          $scope.opportunitiesbysatges = $.extend(true, [], $scope.oppStagesOrigin);\n          angular.forEach($scope.cloneOppStages, function (stage) {\n              stage.items = [];\n          });\n          angular.forEach($scope.opportunitiesbysatges, function (stage) {\n              var ind = $scope.opportunitiesbysatges.indexOf(stage);\n              angular.forEach(stage.items, function (opp) {\n                  if (currFilters.owner == 'all' || currFilters.owner == opp.owner.google_user_id) {\n                      if (currFilters.tags != undefined && currFilters.tags.length > 0) {\n                          var allTagsExist = 0;\n                          angular.forEach(currFilters.tags, function (tag) {\n                              if (opp.tags != undefined) {\n                                  angular.forEach(opp.tags, function (opptag) {\n                                      if (tag.id == opptag.id) {\n                                          allTagsExist++;\n                                      }\n                                      ;\n                                  });\n\n                              }\n                              ;\n                          });\n                          if (allTagsExist == currFilters.tags.length) {\n                              $scope.cloneOppStages[ind].items.push(opp);\n                              $scope.cloneOppStages[ind].items = $filter('orderBy')($scope.cloneOppStages[ind].items, currFilters.orderBy);\n                          }\n                          ;\n                      } else {\n                          console.log('not tags selection');\n                          console.log(currFilters.orderBy);\n                          $scope.cloneOppStages[ind].items.push(opp);\n                          $scope.cloneOppStages[ind].items = $filter('orderBy')($scope.cloneOppStages[ind].items, currFilters.orderBy);\n                      }\n                  }\n                  ;\n              });\n          });\n          $scope.opportunitiesbysatges = $.extend(true, [], $scope.cloneOppStages);\n          $scope.inProcess(false);\n          $scope.apply();\n      }\n      $scope.opportunityFilterBy = function (filter, assignee) {\n          $scope.inProcess(true);\n          // $scope.filterByTags($scope.selected_tags);\n          $scope.cloneOppStages = $.extend(true, [], $scope.opportunitiesbysatges);\n          angular.forEach($scope.cloneOppStages, function (stage) {\n              stage.items = [];\n          });\n          if ($scope.opportunitiesfilter != filter) {\n              switch (filter) {\n                  case 'all':\n                      $scope.opportunitiesbysatges = $.extend(true, [], $scope.oppStagesOrigin);\n                      $scope.opportunitiesfilter = filter;\n                      $scope.opportunitiesAssignee = null;\n                      break;\n                  case 'my':\n                      console.log('in my');\n                      console.log(assignee);\n                      angular.forEach($scope.opportunitiesbysatges, function (stage) {\n                          var ind = $scope.opportunitiesbysatges.indexOf(stage);\n                          angular.forEach(stage.items, function (opp) {\n                              if (opp.owner.google_user_id == assignee) {\n                                  $scope.cloneOppStages[ind].items.push(opp);\n                              }\n                              ;\n                          });\n                      });\n                      $scope.opportunitiesbysatges = $.extend(true, [], $scope.cloneOppStages);\n                      $scope.opportunitiesAssignee = assignee;\n                      $scope.opportunitiesfilter = filter;\n                      break;\n              }\n              ;\n              $scope.inProcess(false);\n              $scope.apply();\n          }\n      }\n      $scope.filterOppBy = function (fltr) {\n          $scope.inProcess(true);\n          $scope.cloneOppStages = $.extend(true, [], $scope.opportunitiesbysatges);\n          angular.forEach($scope.cloneOppStages, function (stage) {\n              stage.items = [];\n          });\n          angular.forEach($scope.opportunitiesbysatges, function (stage) {\n              console.log('stage.items');\n              console.log(stage.items)\n              console.log('stage.items after filter');\n              console.log($filter('orderBy')(stage.items, fltr));\n              $scope.cloneOppStages[$scope.opportunitiesbysatges.indexOf(stage)].items = $filter('orderBy')(stage.items, fltr);\n              var ind = $scope.opportunitiesbysatges.indexOf(stage);\n          });\n          $scope.opportunitiesbysatges = $.extend(true, [], $scope.cloneOppStages);\n          $scope.order = fltr;\n          $scope.inProcess(false);\n          $scope.apply();\n      };\n$scope.selectTag= function(tag,index,$event){\n\n      if(!$scope.manage_tags){\n         var element=$($event.target);\n         if(element.prop(\"tagName\")!='LI'){\n              element=element.parent();\n              element=element.parent();\n         }\n         var text=element.find(\".with-color\");\n         if($scope.selected_tags.indexOf(tag) == -1){\n            $scope.selected_tags.push(tag);\n            // element.css('background-color', tag.color+'!important');\n            // text.css('color',$scope.idealTextColor(tag.color));\n\n         }else{\n            element.css('background-color','#ffffff !important');\n            $scope.selected_tags.splice($scope.selected_tags.indexOf(tag),1);\n             text.css('color','#000000');\n         }\n          $scope.currentFilters.tags = $scope.selected_tags;\n          $scope.AllFilters($scope.currentFilters);\n      }\n\n    };\n\n      $scope.filterByTags = function (selected_tags) {\n          $scope.inProcess(true);\n          $scope.opportunitiesbysatges = $.extend(true, [], $scope.oppStagesOrigin);\n          $scope.cloneOppStages = $.extend(true, [], $scope.oppStagesOrigin);\n          angular.forEach($scope.cloneOppStages, function (stage) {\n              stage.items = [];\n          });\n          if (selected_tags != undefined && selected_tags.length > 0) {\n              angular.forEach($scope.opportunitiesbysatges, function (stage) {\n                  var ind = $scope.opportunitiesbysatges.indexOf(stage);\n                  angular.forEach(stage.items, function (opp) {\n                      var allTagsExist = 0;\n                      angular.forEach(selected_tags, function (tag) {\n                          if (opp.tags != undefined) {\n                              angular.forEach(opp.tags, function (opptag) {\n                                  if (tag.id == opptag.id) {\n                                      allTagsExist++;\n                                  }\n                                  ;\n                              });\n\n                          }\n                          ;\n                      });\n                      if (allTagsExist == selected_tags.length) {\n                          $scope.cloneOppStages[ind].items.push(opp);\n                      }\n                      ;\n                  });\n              });\n              $scope.opportunitiesbysatges = $.extend(true, [], $scope.cloneOppStages);\n          } else {\n              $scope.opportunitiesbysatges = $.extend(true, [], $scope.oppStagesOrigin);\n          }\n          ;\n          $scope.inProcess(false);\n          $scope.apply();\n  };\n\n$scope.unselectAllTags= function(){\n        $('.tags-list li').each(function(){\n            var element=$(this);\n            var text=element.find(\".with-color\");\n             element.css('background-color','#ffffff !important');\n             text.css('color','#000000');\n        });\n     };\n//HKA 19.02.2014 When delete tag render account list\n $scope.tagDeleted = function(){\n    $scope.listopportunities();\n\n };\n\n\n$scope.manage=function(){\n        $scope.unselectAllTags();\n      };\n$scope.tag_save = function(tag){\n          if (tag.name) {\n             Tag.insert($scope,tag);\n\n           };\n      };\n$scope.hideEditable=function(index,tag){\n   document.getElementById(\"tag_\"+index).style.backgroundColor=tag.color;\n   document.getElementById(\"closy_\"+index).removeAttribute(\"style\");\n  document.getElementById(\"checky_\"+index).style.display=\"inline\";\n \n  $scope.edited_tag=null;\n}\n$scope.editTag=function(tag,index){\n  document.getElementById(\"tag_\"+index).style.backgroundColor=\"white\";\n  document.getElementById(\"closy_\"+index).style.display=\"none\";\n  document.getElementById(\"checky_\"+index).style.display=\"none\";\n \n        $scope.edited_tag=tag;\n     }\n$scope.doneEditTag=function(tag){\n        $scope.edited_tag=null;\n        $scope.updateTag(tag);\n     }\n$scope.addTags=function(){\n      var tags=[];\n      var items = [];\n      tags=$('#select2_sample2').select2(\"val\");\n\n      angular.forEach($scope.selected_tasks, function(selected_task){\n          angular.forEach(tags, function(tag){\n            var edge = {\n              'start_node': selected_task.entityKey,\n              'end_node': tag,\n              'kind':'tags',\n              'inverse_edge': 'tagged_on'\n            };\n            items.push(edge);\n          });\n      });\n\n      params = {\n        'items': items\n      }\n\n      Edge.insert($scope,params);\n      $('#assigneeTagsToTask').modal('hide');\n\n     };\n\n     var handleColorPicker = function () {\n          if (!jQuery().colorpicker) {\n              return;\n              console.log('errooooooooooooooor');\n              console.log(\"working******************************\");\n          }\n          $('.colorpicker-default').colorpicker({\n              format: 'hex'\n          });\n      }\n      handleColorPicker();\n\n      $('#addMemberToTask > *').on('click', null, function(e) {\n            e.stopPropagation();\n        });\n      $scope.idealTextColor=function(bgColor){\n        var nThreshold = 105;\n         var components = getRGBComponents(bgColor);\n         var bgDelta = (components.R * 0.299) + (components.G * 0.587) + (components.B * 0.114);\n\n         return ((255 - bgDelta) < nThreshold) ? \"#000000\" : \"#ffffff\";\n      }\n      function getRGBComponents(color) {\n\n          var r = color.substring(1, 3);\n          var g = color.substring(3, 5);\n          var b = color.substring(5, 7);\n\n          return {\n             R: parseInt(r, 16),\n             G: parseInt(g, 16),\n             B: parseInt(b, 16)\n          };\n      };\n      $scope.dragTag=function(tag){\n     \n\n        $scope.draggedTag=tag;\n      }\n      $scope.dropTag=function(opportunity,index){\n        var items = [];\n         console.log('-----------Drag Tag-----------');\n         console.log(opportunity.entityKey);\n        var params = {\n              'parent': opportunity.entityKey,\n              'tag_key': $scope.draggedTag.entityKey\n        };\n        $scope.draggedTag=null;\n        Tag.attach($scope,params,index);\n        $scope.apply()\n      };\n       $scope.tagattached=function(tag,index,tab,entityKey){\n         if (index>=0||$scope.currentOpportunity!=null) {\n                var opp={};\n                if ($scope.currentOpportunity!=null) {\n                  opp=$scope.currentOpportunity;\n                }else{\n                  opp=$scope.opportunities[index];\n                }\n                if (opp.tags == undefined){\n                  opp.tags = [];\n                }\n                var ind = $filter('exists')(tag, opp.tags);\n               if (ind == -1) {\n                    opp.tags.push(tag);\n                    var card_index = '#card_'+index;\n                    $(card_index).removeClass('over');\n                }else{\n                     var card_index = '#card_'+index;\n                    $(card_index).removeClass('over');\n                }\n\n                \n           }else{\n             if (index==-1) {\n              angular.forEach($scope.opportunitiesbysatges, function(stage){\n\n                      angular.forEach(stage.items, function(item){\n                        if (item.entityKey==entityKey) {\n                          if(item.tags==undefined){\n                            item.tags=[];\n                          }\n                          item.tags.push(tag);\n                        }; \n                        $scope.apply();\n                      });\n                  });\n             };\n             if ($scope.selectedCards.length >0) {\n              angular.forEach($scope.selectedCards, function(selected_opportunity){\n                  var existstag=false;\n                  angular.forEach(selected_opportunity.tags, function(elementtag){\n                      if (elementtag.id==tag.id) {\n                         existstag=true;\n                      };                       \n                  }); \n                  if (!existstag) {\n                     if (selected_opportunity.tags == undefined) {\n                        selected_opportunity.tags = [];\n                        }\n                     selected_opportunity.tags.push(tag);\n                  };  \n            });        \n            /*$scope.selectedCards=[];*/\n          };\n         $scope.apply();\n      };\n    }\n\n     // HKA 12.03.2014 Pallet color on Tags\n      $scope.checkColor=function(color){\n        $scope.tag.color=color;\n      }\n //HKA 19.06.2014 Detache tag on contact list\n     $scope.dropOutTag=function(){\n\n\n        var params={'entityKey':$scope.edgekeytoDelete}\n        Edge.delete($scope,params);\n\n        $scope.edgekeytoDelete=undefined;\n        $scope.showUntag=false;\n      };\n      $scope.dragTagItem = function(tag,opportunity) {\n\n            $scope.showUntag = true;\n            $scope.edgekeytoDelete = tag.edgeKey;\n            $scope.tagtoUnattach = tag;\n            $scope.opptoUnattachTag = opportunity;\n        }\n        $scope.tagUnattached = function() {\n          console.log(\"inter to tagDeleted\");\n            $scope.opptoUnattachTag.tags.splice($scope.opptoUnattachTag.tags.indexOf($scope.tagtoUnattach),1)\n            $scope.apply()\n        };\n\n     // Google+ Authentication\n     Auth.init($scope);\n     $(window).scroll(function() {\n          if (!$scope.isLoading && !$scope.isFiltering && ($(window).scrollTop() >  $(document).height() - $(window).height() - 100)) {\n              $scope.listMoreItems();\n          }\n      });\n\n}]);\napp.controller('OpportunityShowCtrl', ['$scope', '$http', '$filter', '$route', 'Auth', 'Task', 'Event', 'Topic', 'Note', 'Opportunity', 'Permission', 'User', 'Opportunitystage', 'Email', 'Attachement', 'InfoNode', 'Tag', 'Edge', 'Account', 'Contact', 'Map','Customfield',\n    function ($scope, $http, $filter, $route, Auth, Task, Event, Topic, Note, Opportunity, Permission, User, Opportunitystage, Email, Attachement, InfoNode, Tag, Edge, Account, Contact, Map, Customfield) {\n      $(\"ul.page-sidebar-menu li\").removeClass(\"active\");\n     $(\"#id_Opportunities\").addClass(\"active\");\n     trackMixpanelAction('OPPORTUNITY_SHOW_VIEW');\n     $scope.selectedTab = 2;\n     $scope.isLoading = false;\n     $scope.nbLoads=0;\n     $scope.isSignedIn = false;\n     $scope.immediateFailed = false;\n     $scope.isContentLoaded = false;\n     $scope.pagination = {};\n     //HKA 10.12.2013 Var topic to manage Next & Prev\n     $scope.topicCurrentPage=01;\n     $scope.topicpagination={};\n     $scope.topicpages = [];\n     $scope.nextPageToken = undefined;\n     $scope.prevPageToken = undefined;\n     $scope.currentPage = 01;\n     $scope.pages = [];\n     $scope.opportunities = [];\n     $scope.users = [];\n     $scope.user = undefined;\n     $scope.slected_memeber = undefined;\n     $scope.stage_selected={};\n     $scope.email = {};\n     $scope.infonodes = {};\n     $scope.documentpagination = {};\n     $scope.documentCurrentPage=01;\n     $scope.documentpages=[];\n     $scope.collaborators_list=[];\n     $scope.sharing_with = [];\n     $scope.opportunitystages=[];\n     $scope.opportunity={'current_stage':{'name':'Incoming','probability':5}};\n     $scope.closed_date=new Date();\n     $scope.opportunity.current_stage.name=$scope.opportunitystages.name;\n        $scope.competitors = [];\n        $scope.relatedInfonode = {};\n        $scope.opportunity.competitors = [];\n     $scope.chartOptions = {\n         animate:{\n             duration:0,\n             enabled:false\n         },\n         size:100,\n         barColor:'#58a618',\n         scaleColor:false,\n         lineWidth:7,\n         lineCap:'circle'\n     };\n     $scope.showeditdate=false;\n     $scope.newTaskform=false;\n     $scope.newEventform=false;\n     $scope.newTask={};\n     $scope.selected_members=[];\n     $scope.selected_member={};\n     $scope.ioevent = {};\n     $scope.showPage=true;\n     $scope.ownerSelected={};\n     $scope.invites=[];\n     $scope.allday=false;\n     $scope.guest_modify=false;\n     $scope.guest_invite=true;\n     $scope.guest_list=true;\n     $scope.insideStages=[];\n     $scope.allcurrency=[\n        { value:\"USD\", text:\"$ - USD\"},\n        { value:\"EUR\", text:\"€ - EUR\"},\n        { value:\"CAD\", text:\"$ - CAD\"},\n        { value:\"GBP\", text:\"£ - GBP\"},\n        { value:\"AUD\", text:\"$ - AUD\"},\n        { value:\"\", text:\"---\"},\n        { value:\"AED\", text:\"د.إ - AED\"},\n        { value:\"ANG\", text:\"ƒ - ANG\"},\n        { value:\"AOA\", text:\"AOA - AOA\"},\n        { value:\"ARS\", text:\"$ - ARS\"},\n        { value:\"BAM\", text:\"KM - BAM\"},\n        { value:\"BBD\", text:\"$ - BBD\"},\n        { value:\"BGL\", text:\"лв - BGL\"},\n        { value:\"BHD\", text:\"BD - BHD\"},\n        { value:\"BND\", text:\"$ - BND\"},\n        { value:\"BRL\", text:\"R$ - BRL\"},\n        { value:\"BTC\", text:\"฿ - BTC\"},\n        { value:\"CHF\", text:\"Fr - CHF\"},\n        { value:\"CLF\", text:\"UF - CLF\"},\n        { value:\"CLP\", text:\"$ - CLP\"},\n        { value:\"CNY\", text:\"¥ - CNY\"},\n        { value:\"COP\", text:\"$ - COP\"},\n        { value:\"CRC\", text:\"₡ - CRC\"},\n        { value:\"CZK\", text:\"Kč - CZK\"},\n        { value:\"DKK\", text:\"kr - DKK\"},\n        { value:\"EEK\", text:\"KR - EEK\"},\n        { value:\"EGP\", text:\"E£ - EGP\"},\n        { value:\"FJD\", text:\"FJ$ - FJD\"},\n        { value:\"GTQ\", text:\"Q - GTQ\"},\n        { value:\"HKD\", text:\"$ - HKD\"},\n        { value:\"HRK\", text:\"kn  - HRK\"},\n        { value:\"HUF\", text:\"Ft - HUF\"},\n        { value:\"IDR\", text:\"Rp - IDR\"},\n        { value:\"ILS\", text:\"₪ - ILS\"},\n        { value:\"INR\", text:\"₨ - INR\"},\n        { value:\"IRR\", text:\"ریال - IRR\"},\n        { value:\"ISK\", text:\"kr - ISK\"},\n        { value:\"JOD\", text:\"د.ا - JOD\"},\n        { value:\"JPY\", text:\"¥ - JPY\"},\n        { value:\"KES\", text:\"KSh - KES\"},\n        { value:\"KRW\", text:\"₩ - KRW\"},\n        { value:\"KWD\", text:\"KD - KWD\"},\n        { value:\"KYD\", text:\"$ - KYD\"},\n        { value:\"LTL\", text:\"Lt - LTL\"},\n        { value:\"LVL\", text:\"Ls - LVL\"},\n        { value:\"MAD\", text:\"د.م. - MAD\"},\n        { value:\"MVR\", text:\"Rf - MVR\"},\n        { value:\"MXN\", text:\"$ - MXN\"},\n        { value:\"MYR\", text:\"RM - MYR\"},\n        { value:\"NGN\", text:\"₦ - NGN\"},\n        { value:\"NOK\", text:\"kr - NOK\"},\n        { value:\"NZD\", text:\"$ - NZD\"},\n        { value:\"OMR\", text:\"ر.ع - OMR\"},\n        { value:\"PEN\", text:\"S/. - PEN\"},\n        { value:\"PHP\", text:\"₱ - PHP\"},\n        { value:\"PLN\", text:\"zł - PLN\"},\n        { value:\"QAR\", text:\"ر.ق - QAR\"},\n        { value:\"RON\", text:\"L - RON\"},\n        { value:\"RUB\", text:\"руб. - RUB\"},\n        { value:\"SAR\", text:\"ر.س - SAR\"},\n        { value:\"SEK\", text:\"kr - SEK\"},\n        { value:\"SGD\", text:\"$ - SGD\"},\n        { value:\"THB\", text:\"฿ - THB\"},\n        { value:\"TRY\", text:\"TL - TRY\"},\n        { value:\"TTD\", text:\"$ - TTD\"},\n        { value:\"TWD\", text:\"$ - TWD\"},\n        { value:\"UAH\", text:\"₴ - UAH\"},\n        { value:\"VEF\", text:\"Bs F - VEF\"},\n        { value:\"VND\", text:\"₫ - VND\"},\n        { value:\"XCD\", text:\"$ - XCD\"},\n        { value:\"ZAR\", text:\"R - ZAR\"}];\n      $scope.sendWithAttachments = [];\n      $scope.parseInt = parseInt;\n      $scope.wonStage={};\n      $scope.lostStage={};\n      $scope.searchLeadQuery=null;\n        $scope.opportunity.competitors = [];\n        $scope.itemToDisassociate = {};\n      $scope.opportunities=[];\n      $scope.opportunities.customfields=[];\n\n        $scope.selectedDocs=[];\n        $scope.newDoc=true;\n        $scope.docInRelatedObject=true;\n       $scope.stageUpdated=function(params){\n        console.log(\"in stage updated\");\n        angular.forEach($scope.opportunitystages, function(stage){\n            if (stage.entityKey==params.stage) {\n              console.log(\"stage found\");\n              $scope.opportunity.current_stage=stage;\n            };\n        });\n       };\n      $scope.inProcess=function(varBool,message){\n          if (varBool) {           \n            if (message) {\n              console.log(\"starts of :\"+message);\n            };\n            $scope.nbLoads=$scope.nbLoads+1;\n            if ($scope.nbLoads==1) {\n              $scope.isLoading=true;\n            };\n          }else{\n            if (message) {\n              console.log(\"ends of :\"+message);\n            };\n            $scope.nbLoads=$scope.nbLoads-1;\n            if ($scope.nbLoads==0) {\n               $scope.isLoading=false;\n \n            };\n\n          };\n        }        \n        $scope.apply=function(){\n         \n          if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {\n               $scope.$apply();\n              }\n              return false;\n        }\n      $scope.fromNow = function(fromDate){\n          return moment(fromDate,\"YYYY-MM-DD HH:mm Z\").fromNow();\n      }\n        $scope.mapAutocomplete = function () {\n            // $scope.addresses = $scope.contact.addresses;\n            Map.autocomplete($scope, \"relatedContactAddress\");\n        }\n         $scope.prepareEmbedLink=function(link){\n                return link.replace(/preview/gi, \"edit\");\n        }\n        $scope.editbeforedeleteDoc=function(){\n            $('#beforedeleteDoc').modal('show');\n        }\n        $scope.deleteDocs=function(){\n            var params={}\n            angular.forEach($scope.selectedDocs, function (doc) {\n                params={\n                    entityKey:doc.entityKey\n                }\n                Attachement.delete($scope, params);\n            });\n            $('#beforedeleteDoc').modal('hide');\n        }\n        $scope.docDeleted=function(entityKey){\n            var ind=null;\n            var listIndex=null;\n            console.log(\"in docDeleted\");\n            console.log(\"entityKey\");\n            console.log(entityKey);\n            angular.forEach($scope.selectedDocs, function (doc) {\n                if (doc.entityKey==entityKey) {\n                    ind=$scope.selectedDocs.indexOf(doc);\n                    listIndex=$scope.documents.indexOf(doc);\n                    console.log(\"doc index found\");\n                    console.log(\"listIndex\",ind);\n                    console.log(\"listIndex\",listIndex);\n                };\n            });\n            if (ind!=-1) {\n                console.log(\"in if ind\");\n                $scope.documents.splice(listIndex,1);\n                $scope.selectedDocs.splice(ind,1);\n                $scope.apply(); \n                if ($scope.documents.length==0) {\n                    $scope.blankStatdocuments=true;\n                };\n                console.log($scope.documents);\n                console.log($scope.selectedDocs);\n            };\n        };\n    $scope.docCreated=function(url){\n            console.log('here docCreated');\n            window.open($scope.prepareEmbedLink(url),'_blank');\n        }\n    $scope.isSelectedDoc = function (doc) {\n            return ($scope.selectedDocs.indexOf(doc) >= 0);\n        };\n    $scope.selectDocWithCheck=function($event,index,doc){\n\n              var checkbox = $event.target;\n\n               if(checkbox.checked){\n                  if ($scope.selectedDocs.indexOf(doc) == -1) {             \n                    $scope.selectedDocs.push(doc);\n                    console.log(\"opp pushed\");\n                    console.log($scope.selectedDocs);\n                  }\n               }else{       \n\n                    $scope.selectedDocs.splice($scope.selectedDocs.indexOf(doc) , 1);\n               }\n\n        }\n        //$tocopy\n      // What to do after authentication\n       $scope.runTheProcess = function(){\n          var params = {\n                          'id':$route.current.params.opportunityId,\n\n                          'topics':{\n                            'limit': '7'\n                          },\n\n                          'documents':{\n                            'limit': '15'\n                          },\n\n                          'tasks':{\n\n                          },\n\n                          'events':{\n\n                          }\n                      };\n          Opportunity.get($scope,params);\n          User.list($scope,{});\n          //HKA 13.12.2013 to retrieve the opportunities's stages\n         \n           var paramsTag = {'about_kind': 'Opportunity'};\n          Tag.list($scope, paramsTag);\n          ga('send', 'pageview', '/opportunities/show');\n          window.Intercom('update');\n           $scope.mapAutocomplete();\n     \n       };\n       $scope.getCustomFields=function(related_object){\n            Customfield.list($scope,{related_object:related_object});\n        }\n       $scope.listResponse=function(items,related_object){\n            //infonodes.customfields\n            $scope[related_object].customfields=items;\n            var additionalCustomFields=[];\n            angular.forEach($scope.infonodes.customfields, function (infonode) {\n                    \n                    infonode.property_type=infonode.fields[0].property_type;\n                    infonode.value=infonode.fields[0].value;\n                    infonode.field=infonode.fields[0].field;\n                if (infonode.property_type==\"\"||infonode.property_type==\"StringProperty\"||infonode.property_type==null) {\n                    console.log('in stringtype______________________________________ ');\n                    console.log(infonode);\n                    additionalCustomFields.push(infonode);\n                }else{\n                        var schemaExists=false;\n                        angular.forEach($scope[related_object].customfields, function (customfield) {\n                        if (customfield.id==infonode.property_type) {\n                            console.log('in not stringprope ______________________________');\n                            console.log(infonode);\n                            schemaExists=true;\n                            var info_value=null;\n                            if (infonode.fields[0].field==\"property_type\") {\n                                info_value=infonode.fields[1].value;\n                            }else{\n                                info_value=infonode.fields[0].value;\n                            };\n                            if (customfield.field_type==\"checkbox\") {\n                                customfield.value=JSON.parse(info_value);\n                            }else{\n                                customfield.value=info_value;\n                            };\n                          \n                            customfield.infonode_key=infonode.entityKey;\n                            \n                             \n                            };\n                        });\n                        if (!schemaExists) {\n                             \n                            additionalCustomFields.push(infonode);\n                        };\n                };\n                    \n            });\n            $scope.infonodes.customfields=additionalCustomFields;\n            $scope.apply();\n            \n        }\n       $scope.runStagesList=function(){\n          Opportunitystage.list($scope,{'order':'stage_number'});\n       }\n         $scope.getColaborators=function(){\n          $scope.collaborators_list=[];\n          Permission.getColaborators($scope,{\"entityKey\":$scope.opportunity.entityKey});  \n\n        }\n        // We need to call this to refresh token when user credentials are invalid\n     $scope.refreshToken = function() {\n          Auth.refreshToken();\n     };\n     \n     $scope.lunchWizard=function(){\n \n     }\n     $scope.showAssigneeTagsToOpportunity=function(){\n       $('#assigneeTagsToOpp').modal('show');\n     }\n     /************** account and contact update******/\n     $scope.getResults = function (val, location) {\n         console.log('here executed');\n         var url = ROOT + location + '?alt=json'\n         var config = {\n             headers: {\n                 'Authorization': 'Bearer ' + localStorage['access_token'],\n                 'Accept': 'application/json'\n             }\n          }\n         var params = {\n             \"q\": val\n         };\n         return $http.post(url, params, config).then(function (response) {\n             if (response.data.items) {\n                 return response.data.items;\n             } else {\n                 return [];\n             }\n             ;\n             return response.data.items;\n         });\n     }\n     $scope.selectContact = function(){\n        console.log('$scope.searchAccountQuery ....');\n         console.log($scope.searchRelatedContactQuery);\n\n         if (typeof($scope.searchRelatedContactQuery) == 'object') {\n             var params = {\n                 'id': $scope.opportunity.id,\n                 'new_contact': {\n                     'contact': $scope.searchRelatedContactQuery.entityKey,\n                     'is_decesion_maker': false\n                 }\n             };\n             Opportunity.patch($scope, params);\n         }\n         $scope.searchRelatedContactQuery = \"\";\n     };\n        $scope.selectCompetitor = function () {\n            console.log(\"enter fired\");\n            console.log($scope.searchCompetitorQuery);\n            if ($scope.opportunity.competitors == undefined) {\n                $scope.opportunity.competitors = [];\n            }\n            ;\n            var par = {};\n            if (typeof($scope.searchCompetitorQuery) == 'object') {\n                console.log(\"enter object\");\n                par = {\n                    'id': $scope.opportunity.id,\n                    'new_competitor': $scope.searchCompetitorQuery.entityKey\n                }\n                Opportunity.patch($scope, par);\n            } else {\n                if ($scope.searchCompetitorQuery != \"\") {\n                    console.log(\"enter string\");\n                    par = {\n                        'id': $scope.opportunity.id,\n                        'new_competitor': $scope.searchCompetitorQuery\n                    }\n                    Opportunity.patch($scope, par);\n                }\n                ;\n            }\n            ;\n            $scope.searchCompetitorQuery = \"\";\n            $scope.apply();\n        };\n        $scope.selectRelatedContact = function () {\n            if (typeof($scope.searchRelatedContactQuery) == 'object') {\n          $scope.updateOpportunity({\n          'id':$scope.opportunity.id,\n          'contact':$scope.searchAccountQuery.entityKey\n          });  \n        }\n      };\n        $scope.addGeo = function (address) {\n            console.log(\"geo added\");\n            console.log(address);\n            $scope.currentContact.address = address.formatted;\n            /*$scope.addresses.push(address);*/\n            $scope.apply();\n            // console.log($scope.infonodes.addresses);\n        };\n        $scope.setDecisionMaker = function (contact) {\n            console.log(\"deciosion maker\");\n            contact.is_decesion_maker = !contact.is_decesion_maker;\n            var params = {\n                id: $scope.opportunity.id,\n                contact: {\n                    edgeKey: contact.edgeKey,\n                    is_decesion_maker: contact.is_decesion_maker\n                }\n            }\n            Opportunity.patch($scope, params);\n        }\n        $scope.showAddTimeScale = function () {\n\n            $('#newTimeModalForm').modal('show');\n        }\n        $scope.addNewRelatedContact = function (current) {\n            if (current.firstname != null && current.lastname != null) {\n                $scope.contact = current;\n                $scope.contact.access = $scope.opportunity.access;\n                if (current.phone != null) {\n                    $scope.contact.phone = [{'number': current.phone, 'type': 'work'}];\n                }\n                if (current.email != null) {\n                    $scope.contact.emails = [{'email': current.email}];\n                }\n                if (current.address != null) {\n                    $scope.contact.addresses = [{'formatted': current.address}];\n                }\n                Contact.insert($scope, $scope.contact);\n                $scope.currentContact = {};\n            } else {\n                $scope.currentContact = {};\n                /* $scope.newContactform = false;*/\n            }\n            ;\n            console.log('hhhhhhhhhhhhhhhhhere save new contact');\n            console.log($scope.newcontacts);\n\n        }\n        $scope.contactInserted = function (resp) {\n            var params = {\n                'id': $scope.opportunity.id,\n                'new_contact': {\n                    'contact': resp.entityKey,\n                    'is_decesion_maker': false\n                }\n            };\n            Opportunity.patch($scope, params);\n            $scope.opportunity.contacts.push(resp);\n            $scope.apply();\n            //$scope.opportunity.contact = resp.entityKey;   \n        }\n      var params_search_lead ={};\n      $scope.$watch('searchLeadQuery', function() {\n        if($scope.searchLeadQuery){\n            if($scope.searchLeadQuery.length>1){\n              params_search_lead['q'] = $scope.searchLeadQuery;\n              gapi.client.crmengine.leads.search(params_search_lead).execute(function(resp) {\n                if (resp.items){\n                $scope.leadsResults = resp.items;\n                console.log($scope.leadsResults);\n                $scope.apply();\n              };\n            });\n          }\n        }\n      });\n     $scope.selectLead = function(){\n        console.log('$scope.searchLeadQuery ....');\n        console.log($scope.searchLeadQuery);\n        if (typeof($scope.searchLeadQuery)=='object'){\n          $scope.updateOpportunity({\n          'id':$scope.opportunity.id,\n          'lead':$scope.searchLeadQuery.entityKey\n          });  \n        }\n      };\n\n\n      var params_search_account ={};\n      $scope.result = undefined;\n      $scope.q = undefined;\n      $scope.$watch('searchAccountQuery', function() {\n          params_search_account['q'] = $scope.searchAccountQuery;\n          Account.search($scope,params_search_account);\n      });\n     $scope.updateOpportunity=function(params){\n      Opportunity.patch($scope,params);\n     }\n      $scope.selectAccount = function(){\n        //  $scope.opportunity.account  = $scope.searchAccountQuery;\n        console.log('$scope.searchAccountQuery ....');\n        console.log($scope.searchAccountQuery);\n        if (typeof($scope.searchAccountQuery)=='object'){\n          $scope.updateOpportunity({\n          'id':$scope.opportunity.id,\n          'account':$scope.searchAccountQuery.entityKey\n          });  \n        }\n        \n      };\n      $scope.insertNewContact = function(account,access){\n          if($scope.searchContactQuery.length>0){\n            var firstName = $scope.searchContactQuery.split(' ').slice(0, -1).join(' ') || \" \";\n            var lastName = $scope.searchContactQuery.split(' ').slice(-1).join(' ') || \" \";\n            var params = {\n                          'firstname':  firstName ,\n                          'lastname': lastName ,\n                          'account': account,\n                          'access': access\n                        };\n            Contact.insert($scope,params);\n          };\n      } \n\n/*********************end of account and contact update****/\n     $scope.listTags=function(){\n      var paramsTag = {'about_kind':'Opportunity'}\n      Tag.list($scope,paramsTag);\n     };\n      $scope.beforedeleteOpportunity = function(){\n          $('#BeforedeleteOpportunity').modal('show');\n      }\n      $scope.deleteopportunity = function(){\n           var opportunityKey = {'entityKey':$scope.opportunity.entityKey};\n           Opportunity.delete($scope,opportunityKey);\n\n           $('#BeforedeleteOpportunity').modal('hide');\n      };\n      //HKA 20.12.2014 Retrive the url of the notes\n      $scope.getTopicUrl = function(type,id){\n      return Topic.getUrl(type,id);\n    };\n        $scope.editbeforedisassociate = function (item, array, typee) {\n            $scope.itemToDisassociate = {'item': item, 'array': array, 'type': typee};\n            $('#beforedelinkContact').modal('show');\n        };\n        $scope.disassociateItem = function () {\n            console.log('edge to delete');\n            console.log($scope.itemToDisassociate);\n            if ($scope.itemToDisassociate.type == 'contact') {\n                var params = {'entityKey': $scope.itemToDisassociate.item.edgeKey};\n                console.log('egde params');\n                console.log(params);\n                Edge.delete($scope, params);\n            } else {\n                if ($scope.itemToDisassociate.type == 'competitor') {\n                    console.log('in competitor');\n                    var params = {\n                        'id': $scope.opportunity.id,\n                        'removed_competitor': $scope.itemToDisassociate.item.entityKey\n                    };\n                    Opportunity.patch($scope, params)\n                };\n            };\n\n            $scope.itemToDisassociate.array.splice($scope.itemToDisassociate.array.indexOf($scope.itemToDisassociate.item), 1);\n            $scope.itemToDisassociate = {};\n            $('#beforedelinkContact').modal('hide');\n            $scope.apply();\n        }\n        $scope.addPhoneToContact = function (phone, contact) {\n            if (phone.number) {\n                params = {\n                    'parent': contact.entityKey,\n                    'kind': 'phones',\n                    'fields': [\n                        {\n                            \"field\": \"type\",\n                            \"value\": \"work\"\n                        },\n                        {\n                            \"field\": \"number\",\n                            \"value\": phone.number\n                        }\n                    ]\n                };\n                $scope.relatedInfonode = {\n                    contact: contact,\n                    infonode: {\n                        'kind': 'phones',\n                        'item': {\n                            \"type\": phone.type,\n                            \"number\": phone.number\n                        }\n                    }\n                };\n                InfoNode.insert($scope, params);\n            }\n        }\n        $scope.listInfonodes = function (kind) {\n\n            if (!$scope.isEmpty($scope.relatedInfonode)) {\n                console.log('phone inserted');\n                console.log($scope.relatedInfonode);\n                if ($scope.relatedInfonode.contact[$scope.relatedInfonode.infonode.kind] == undefined) {\n                    $scope.relatedInfonode.contact[$scope.relatedInfonode.infonode.kind] = {};\n                    $scope.relatedInfonode.contact[$scope.relatedInfonode.infonode.kind].items = [];\n                }\n                ;\n                $scope.relatedInfonode.contact[$scope.relatedInfonode.infonode.kind].items.push($scope.relatedInfonode.infonode.item);\n                $scope.apply();\n            } else {\n                params = {\n                    'parent': $scope.account.entityKey,\n                    'connections': kind\n                };\n                InfoNode.list($scope, params);\n            }\n            ;\n\n        }\n        $scope.addEmailToContact = function (email, contact) {\n            console.log(email);\n            console.log(email);\n            if (email.email) {\n                params = {\n                    'parent': contact.entityKey,\n                    'kind': 'emails',\n                    'fields': [\n                        {\n                            \"field\": \"email\",\n                            \"value\": email.email\n                        }\n                    ]\n                };\n            }\n            $scope.relatedInfonode = {\n                contact: contact,\n                infonode: {\n                    'kind': 'emails',\n                    'item': {\n                        \"email\": email.email\n                    }\n                }\n            };\n            InfoNode.insert($scope, params);\n        }\n\n        $scope.deleteTimeItem = function (item) {\n            Opportunity.deleteTimeItem($scope, item)\n      }\n        $scope.timeItemDeleted = function (item) {\n            $scope.opportunity.timeline.items.splice($scope.opportunity.timeline.items.indexOf(item), 1);\n            $scope.apply();\n        };\n      $scope.addTagsTothis = function () {\n\n            var tags = [];\n            var items = [];\n            tags = $('#select2_sample2').select2(\"val\");\n            console.log(\"tagstags\");\n            console.log(tags);\n            angular.forEach(tags, function (tag) {\n                var params = {\n                    'parent': $scope.opportunity.entityKey,\n                    'tag_key': tag\n                };\n                console.log(\"tagtagtags\");\n                console.log(tag);\n                Tag.attach($scope, params, 1, 'opportunity');\n            });\n            $('#select2_sample2').select2(\"val\", \"\");\n            $('#assigneeTagsToOpp').modal('hide');\n        };\n          $scope.tagattached = function(tag, index) {\n            if (index >= 0) {\n              if ($scope.opportunity.tags == undefined) {\n                $scope.opportunity.tags = [];\n              }\n              var ind = $filter('exists')(tag, $scope.opportunity.tags);\n              if (ind == -1) {\n                  $scope.opportunity.tags.push(tag);\n                  \n              } else {\n              }\n              $('#select2_sample2').select2(\"val\", \"\");\n            }else{\n              $scope.opportunity.tags.push(tag);\n            };\n            \n            $scope.apply();\n          };\n         $scope.edgeInserted = function() {\n          /* $scope.tags.push()*/\n          };\n         $scope.removeTag = function(tag,$index) {\n\n            var params = {'tag': tag,'index':$index}\n            Edge.delete($scope, params);\n        }\n\n\n\n        $scope.edgeDeleted=function(index){\n         $scope.opportunity.tags.splice(index, 1);\n         $scope.apply();\n        }\n        $scope.oppDeleted=function(){\n          window.location.replace('#/opportunities'); \n        }\n//  \n\n  $scope.isEmptyArray=function(Array){\n                if (Array!=undefined && Array.length>0) {\n                return false;\n                }else{\n                    return true;\n                };    \n            \n        }\n\n  //\n      $scope.selectMemberToTask = function() {\n            console.log($scope.selected_members);\n            if ($scope.selected_members.indexOf($scope.user) == -1) {\n                $scope.selected_members.push($scope.user);\n                $scope.selected_member = $scope.user;\n                $scope.user = $scope.selected_member.google_display_name;\n            }\n            $scope.user = '';\n        };\n        $scope.unselectMember = function(index) {\n            $scope.selected_members.splice(index, 1);\n            console.log($scope.selected_members);\n        };\n     //$('#addLeadModal').modal('show');\n  //HKA 09.11.2013 Add a new Task\n   $scope.addTask = function(task){\n        if ($scope.newTaskform==false) {\n          $scope.newTaskform=true;\n           }else{\n            if (task.title!=null) {\n                    //  $('#myModal').modal('hide');\n            if (task.due){\n                var dueDate= $filter('date')(task.due,['yyyy-MM-ddT00:00:00.000000']);\n                params ={'title': task.title,\n                          'due': dueDate,\n                          'parent': $scope.opportunity.entityKey,\n                          'access': $scope.opportunity.access\n                }\n\n            }else{\n                params ={'title': task.title,\n                         'parent': $scope.opportunity.entityKey,\n                         'access': $scope.opportunity.access\n                       }\n            };\n            if ($scope.selected_members!=[]) {\n                  params.assignees=$scope.selected_members;\n                };\n                var tags=[];\n                tags=$('#select2_sample2').select2(\"val\");\n                if (tags!=[]) {\n                  var tagitems = [];\n                  angular.forEach(tags, function(tag){\n                  var item = {'entityKey': tag };\n                  tagitems.push(item);\n                });\n                  params.tags=tagitems;\n                };\n            Task.insert($scope,params);\n            $scope.newTask={};\n            $scope.newTaskform=false;\n            $scope.selected_members=[];\n            $(\"#select2_sample2\").select2(\"val\", \"\");\n        }else{\n            $scope.newTask={};\n            $scope.newTaskform=false;\n      }\n     }\n   };\n\n   \n    //HKA 27.07.2014 Add button cancel on Task form\n       $scope.closeTaskForm=function(newTask){\n               $scope.newTask={};\n                $scope.newTaskform=false;\n    };\n     $scope.$watch('opportunity.closed_date', function(newValue, oldValue) {\n            if (newValue!=oldValue){\n                $scope.patchDate(newValue);\n                $scope.showStartsCalendar=false;\n            }\n\n     });\n     $scope.patchDate = function(newValue){\n        var closed_at = $filter('date')(newValue,['yyyy-MM-ddTHH:mm:00.000000']);\n        var params = {\n                    'id':$scope.opportunity.id,\n                    'closed_date':closed_at\n        };\n        if (!$scope.isLoading){\n          Opportunity.patch($scope,params);\n        }\n     }\n     $scope.hilightTask = function(){\n        console.log('Should higll');\n        $('#task_0').effect(\"highlight\",\"slow\");\n        $('#task_0').effect( \"bounce\", \"slow\" );\n\n     }\n     $scope.listTasks = function(){\n        var params = {\n                        'id':$scope.opportunity.id,\n                        'tasks':{}\n                      };\n        Opportunity.get($scope,params);\n\n     }\n     $scope.editOpp = function(){\n\n      $('#EditOpportunityModal').modal('show')\n     }\n     $scope.updateOppName=function(value){\n      var params={'id':$scope.opportunity.id,'name':value};\n      Opportunity.patch($scope,params);\n     }\n     $scope.updateOpportunityPrice=function(){\n      if($scope.opportunity.duration_unit!='fixed'){\n        $scope.opportunity.amount_total=$scope.opportunity.duration*$scope.opportunity.amount_per_unit;\n      }else{\n        $scope.opportunity.amount_total=$scope.opportunity.amount_per_unit;\n      }\n      var params={'id':$scope.opportunity.id, 'currency':$scope.opportunity.currency, 'duration_unit':$scope.opportunity.duration_unit,'duration':$scope.opportunity.duration, 'amount_per_unit':$scope.opportunity.amount_per_unit,'amount_total':$scope.opportunity.amount_total}\n      Opportunity.patch($scope,params);\n      $scope.showPriceForm=false;\n     }\n     $scope.TopiclistNextPageItems = function(){\n\n\n        var nextPage = $scope.topicCurrentPage + 1;\n        var params = {};\n          if ($scope.topicpages[nextPage]){\n            params = {\n                      'id':$scope.opportunity.id,\n                        'topics':{\n                          'limit': '7',\n                          'pageToken':$scope.topicpages[nextPage]\n                        }\n                     }\n            $scope.topicCurrentPage = $scope.topicCurrentPage + 1 ;\n            Opportunity.get($scope,params);\n            }\n\n\n     }\n\n     $scope.waterfallTrigger= function(){\n          $( window ).trigger( \"resize\" );\n     };\n     $scope.listTopics = function(opportunity){\n        var params = {\n                      'id':$scope.opportunity.id,\n                      'topics':{\n                             'limit': '7'\n                       }\n                    };\n          Opportunity.get($scope,params);\n\n     }\n     $scope.hilightTopic = function(){\n\n       $('#topic_0').effect( \"bounce\", \"slow\" );\n       $('#topic_0 .message').effect(\"highlight\",\"slow\");\n     }\n\n\n\n     $scope.selectMember = function(){\n        $scope.slected_memeber = $scope.user;\n        $scope.user = '';\n        $scope.sharing_with.push($scope.slected_memeber);\n\n     };\n     $scope.share = function(){\n      \n         var body = {'access':$scope.opportunity.access};\n         var id = $scope.opportunity.id;\n         var params ={'id':id,\n                      'access':$scope.opportunity.access}\n         Opportunity.patch($scope,params);\n           // who is the parent of this event .hadji hicham 21-07-2014.\n\n                params[\"parent\"]=\"opportunity\";\n                Event.permission($scope,params);\n                Task.permission($scope,params);\n     \n\n        if ($scope.sharing_with.length>0){\n\n          var items = [];\n\n          angular.forEach($scope.sharing_with, function(user){\n                      var item = {\n                                  'type':\"user\",\n                                  'value':user.entityKey\n                                };\n                      items.push(item);\n          });\n\n          if(items.length>0){\n              var params = {\n                            'about': $scope.opportunity.entityKey,\n                            'items': items\n              }\n              Permission.insert($scope,params);\n          }\n\n\n          $scope.sharing_with = [];\n          $scope.slected_memeber={};\n\n\n        }\n\n\n     };\n\n/******************new event form***********************/\n// HADJI HICHAM 31/05/2015 \n\n$scope.showAddEventPopup=function(){  \n\n         $('#newEventModalForm').modal('show');\n       }\n\n// HADJI HICHAM 31/05/2015\n//auto complete \n\n     var invitesparams ={};\n     $scope.inviteResults =[];\n     $scope.inviteResult = undefined;\n     $scope.q = undefined;\n     $scope.invite = undefined;\n$scope.$watch('invite', function(newValue, oldValue) {\n      if($scope.invite!=undefined){\n\n           invitesparams['q'] = $scope.invite;\n           gapi.client.crmengine.autocomplete(invitesparams).execute(function(resp) {\n              if (resp.items){\n                //$scope.filterResult(resp.items);\n                $scope.inviteResults = resp.items;\n                $scope.$apply();\n              };\n\n            });\n        }\n\n     });\n\n\n// add invite \n$scope.addInvite=function(invite){\n\n\n  $scope.invites.push(invite);\n  $scope.checkGuests();\n  $scope.invite=\"\";\n}\n\n$scope.deleteInvite=function(index){\n      $scope.invites.splice(index, 1);\n      $scope.checkGuests();\n}\n\n$scope.checkGuests=function(){\n   if($scope.invites.length !=0){\n   $scope.Guest_params=true;\n }else{\n  $scope.Guest_params=false;\n }\n}\n\n\n/***************reminder**************************/\n\n$scope.deletePicked= function(){\n  $scope.something_picked=false;\n  $scope.remindme_show=\"\";\n  $scope.remindmeby=false;\n}\n\n\n$scope.reminder=0;\n$scope.Remindme=function(choice){\n  $scope.reminder=0;\n  $scope.something_picked=true;\n $scope.remindmeby=true;  \n  switch(choice){\n    case 0: \n    $scope.remindme_show=\"No notification\";\n    $scope.remindmeby=false;  \n    break;\n    case 1:\n    $scope.remindme_show=\"At time of event\"; \n    $scope.reminder=1;\n    break;\n    case 2:\n    $scope.remindme_show=\"30 minutes before\";\n    $scope.reminder=2;  \n    break;\n    case 3: \n    $scope.remindme_show=\"1 hour\";\n    $scope.reminder=3; \n    break;\n    case 4: \n    $scope.remindme_show=\"1 day\"; \n    $scope.reminder=4;\n    break;\n    case 5:\n    $scope.remindme_show=\"1 week\";\n    $scope.reminder=5;  \n    break;\n  }\n \n  }\n/*******************************************/ \n$scope.timezoneChosen=\"\";\n$('#timeZone').on('change', function() {\n\n\n     $scope.timezoneChosen=this.value;\n});\n\n// $scope.checkallday=function(){\n//   $scope.allday=$scope.alldaybox;  \n//    }\n\n    \n/********************************************/\n //HKA 10.11.2013 Add event\n $scope.addEvent = function(ioevent){\n\n           // $scope.allday=$scope.alldaybox;  \n\n     \n\n\n            if (ioevent.title!=null&&ioevent.title!=\"\") {\n\n                    var params ={}\n\n\n                  // hadji hicham 13-08-2014.\n                  if($scope.allday){\n                  var ends_at=moment(moment(ioevent.starts_at_allday).format('YYYY-MM-DDT00:00:00.000000'))\n             \n                       params ={'title': ioevent.title,\n                      'starts_at':$filter('date')(ioevent.starts_at_allday,['yyyy-MM-ddT00:00:00.000000']),\n                      'ends_at': ends_at.add('hours',23).add('minute',59).add('second',59).format('YYYY-MM-DDTHH:mm:00.000000'),\n                      'where': ioevent.where,\n                      'allday':\"true\",\n                      'access':$scope.opportunity.access,\n                      'description':$scope.ioevent.note,\n                      'invites':$scope.invites,\n                      'parent':  $scope.opportunity.entityKey,\n                      'guest_modify':$scope.guest_modify.toString(),\n                      'guest_invite':$scope.guest_invite.toString(),\n                      'guest_list':$scope.guest_list.toString(),\n                      'reminder':$scope.reminder,\n                      'method':$scope.method,\n                      'timezone':$scope.timezoneChosen\n\n                        }\n\n\n\n                  }else{\n\n                        console.log(\"yeah babay\");\n                        console.log($scope.allday);\n\n                  if (ioevent.starts_at){\n                    if (ioevent.ends_at){\n                      // params ={'title': ioevent.title,\n                      //         'starts_at': $filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      //         'ends_at': $filter('date')(ioevent.ends_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      //         'where': ioevent.where,\n                      //         'parent':$scope.lead.entityKey,\n                      //         'allday':\"false\",\n                      //         'access':$scope.lead.access\n                      // }\n                    params ={'title': ioevent.title,\n                      'starts_at':$filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      'ends_at': $filter('date')(ioevent.ends_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      'where': ioevent.where,\n                      'allday':\"false\",\n                      'access':$scope.opportunity.access,\n                      'description':$scope.ioevent.note,\n                      'invites':$scope.invites,\n                      'parent':  $scope.opportunity.entityKey,\n                      'guest_modify':$scope.guest_modify.toString(),\n                      'guest_invite':$scope.guest_invite.toString(),\n                      'guest_list':$scope.guest_list.toString(),\n                      'reminder':$scope.reminder,\n                      'method':$scope.method,\n                      'timezone':$scope.timezoneChosen\n\n                        }\n\n                    }else{\n                      // params ={\n                      //   'title': ioevent.title,\n                      //         'starts_at': $filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      //         'where': ioevent.where,\n                      //         'parent':$scope.lead.entityKey,\n                      //         'ends_at':moment(ioevent.ends_at).add('hours',2).format('YYYY-MM-DDTHH:mm:00.000000'),\n                      //         'allday':\"false\",\n                      //         'access':$scope.lead.access\n                      // }\n\n                            params ={'title': ioevent.title,\n                      'starts_at':$filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n                      'ends_at': moment(ioevent.ends_at).add('hours',2).format('YYYY-MM-DDTHH:mm:00.000000'),\n                      'where': ioevent.where,\n                      'allday':\"false\",\n                      'access':$scope.opportunity.access,\n                      'description':$scope.ioevent.note,\n                      'invites':$scope.invites,\n                      'parent':  $scope.opportunity.entityKey,\n                      'guest_modify':$scope.guest_modify.toString(),\n                      'guest_invite':$scope.guest_invite.toString(),\n                      'guest_list':$scope.guest_list.toString(),\n                      'reminder':$scope.reminder,\n                      'method':$scope.method,\n                      'timezone':$scope.timezoneChosen\n\n                        }\n\n\n                    }\n\n                  }\n\n\n                  }\n     \n\n                  Event.insert($scope,params);\n                  $('#newEventModalForm').modal('hide');\n                 \n                  $scope.ioevent={};\n                  $scope.timezonepicker=false;\n                  $scope.timezone=\"\";\n                  $scope.invites=[]\n                  $scope.invite=\"\";\n                  $scope.remindme_show=\"\";\n                  $scope.show_choice=\"\";\n                  $scope.parent_related_to=\"\";\n                  $scope.Guest_params=false;\n                  $scope.searchRelatedQuery=\"\";\n                  $scope.something_picked=false;\n                  $scope.newEventform=false;\n                  $scope.remindmeby=false;\n        \n     }\n    }\n\n/*******************************************************/ \n\n// //HKA 11.11.2013 Add new Event\n//  $scope.addEvent = function(ioevent){\n\n//    /*****************************/\n\n//              if ($scope.newEventform==false) {\n//                 $scope.newEventform=true;\n//            }else{\n\n\n//             if (ioevent.title!=null&&ioevent.title!=\"\") {\n\n//                     var params ={}\n\n\n//                   // hadji hicham 13-08-2014.\n//                   if($scope.allday){\n//                          var ends_at=moment(moment(ioevent.starts_at_allday).format('YYYY-MM-DDT00:00:00.000000'))\n\n//                    params ={'title': ioevent.title,\n//                             'starts_at': $filter('date')(ioevent.starts_at_allday,['yyyy-MM-ddT00:00:00.000000']),\n//                             'ends_at':ends_at.add('hours',23).add('minute',59).add('second',59).format('YYYY-MM-DDTHH:mm:00.000000'),\n//                             'where': ioevent.where,\n//                             'parent':$scope.opportunity.entityKey,\n//                             'allday':\"true\",\n//                             'access': $scope.opportunity.access\n//                       }\n\n\n\n//                   }else{\n\n//                   if (ioevent.starts_at){\n//                     if (ioevent.ends_at){\n//                       params ={'title': ioevent.title,\n//                               'starts_at': $filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n//                               'ends_at': $filter('date')(ioevent.ends_at,['yyyy-MM-ddTHH:mm:00.000000']),\n//                               'where': ioevent.where,\n//                               'parent':$scope.opportunity.entityKey,\n//                               'allday':\"false\",\n//                               'access': $scope.opportunity.access\n//                       }\n\n//                     }else{\n//                       params ={\n//                         'title': ioevent.title,\n//                               'starts_at': $filter('date')(ioevent.starts_at,['yyyy-MM-ddTHH:mm:00.000000']),\n//                               'where': ioevent.where,\n//                               'parent':$scope.account.entityKey,\n//                               'ends_at':moment(ioevent.ends_at).add('hours',2).format('YYYY-MM-DDTHH:mm:00.000000'),\n//                               'allday':\"false\",\n//                               'access':$scope.opportunity.access\n//                       }\n//                     }\n\n\n\n\n//                   }\n\n\n//                   }\n\n//                    Event.insert($scope,params);\n//                   $scope.ioevent={};\n//                   $scope.newEventform=false;\n\n\n\n//         }\n//      }\n\n// /*******************/\n\n\n\n//     };\n\n// hadji hicham 14-07-2014 . update the event after we add .\n$scope.updateEventRenderAfterAdd= function(){};\n\n    $scope.deleteEvent =function(eventt){\n    var params = {'entityKey':eventt.entityKey};\n     Event.delete($scope,params);\n     //$('#addLeadModal').modal('show');\n   }\n      $scope.eventDeleted = function(resp){\n   };\n    $scope.closeEventForm=function(ioevent){\n      $scope.ioevent={};\n      $scope.newEventform=false;\n    }\n     $scope.hilightEvent = function(){\n\n        $('#event_0').effect(\"highlight\",\"slow\");\n        $('#event_0').effect( \"bounce\", \"slow\" );\n\n     };\n     $scope.listEvents = function(){\n        var params = {\n                        'id':$scope.opportunity.id,\n                        'events':{\n\n                        }\n                      };\n        Opportunity.get($scope,params);\n\n     };\n\n\n //HKA 11.11.2013 Add Note\n  $scope.addNote = function(note){\n    var params ={\n                  'about': $scope.opportunity.entityKey,\n                  'title': note.title,\n                  'content': note.content\n      };\n    Note.insert($scope,params);\n    $scope.note.title='';\n    $scope.note.content='';\n  };\n// 26.11.2013 Update Opportunity\n $scope.UpdateOpportunity = function(opportunity){\n  var params = {\n                'id':$scope.opportunity.id,\n                'owner':$scope.ownerSelected.google_user_id,\n                'name':opportunity.name,\n                'description':opportunity.description\n              };\n\n\n  Opportunity.patch($scope,params);\n\n //$scope.$watch($scope.opportunity.stagename, $scope.createNote());\n  /*$scope.$watch($scope.opportunity.stagename, function(newVal, oldVal) {\n     var paramsNote = {\n                  'about_kind': 'Opportunity',\n                  'about_item': $scope.opportunity.id,\n                  'title': 'stage updated to '+ $scope.stage_selected.name\n\n      };\n\n\n      Note.insert($scope,paramsNote);\n   });*/\n  $('#EditOpportunityModal').modal('hide');\n };\n $scope.updateOpportunityStage = function(stage){\n  console.log(\"here started\");\n   if (stage) {\n    var params = {\n                  'entityKey':$scope.opportunity.entityKey,\n                  'stage': stage.entityKey\n    };\n  }else{\n      var params = {\n                  'entityKey':$scope.opportunity.entityKey,\n                  'stage': $scope.opportunity.current_stage.entityKey\n    };\n  };\n    \n    Opportunity.update_stage($scope,params);\n }\n\n$scope.createNote = function(){\n\n    var paramsNote = {\n                  'about_kind': 'Opportunity',\n                  'about_item': $scope.opportunity.id,\n                  'title': 'stage updated to '+ $scope.stage_selected.name\n\n      };\n       Note.insert($scope,paramsNote);\n};\n\n      $('#some-textarea').wysihtml5();\n\n      $scope.showAttachFilesPicker = function() {\n          var developerKey = 'AIzaSyDHuaxvm9WSs0nu-FrZhZcmaKzhvLiSczY';\n          var docsView = new google.picker.DocsView()\n              .setIncludeFolders(true)\n              .setSelectFolderEnabled(true);\n          var picker = new google.picker.PickerBuilder().\n              addView(new google.picker.DocsUploadView()).\n              addView(docsView).\n              setCallback($scope.attachmentUploaderCallback).\n              setOAuthToken(window.authResult.access_token).\n              setDeveloperKey(developerKey).\n              setAppId('935370948155-qm0tjs62kagtik11jt10n9j7vbguok9d').\n                enableFeature(google.picker.Feature.MULTISELECT_ENABLED).\n              build();\n          picker.setVisible(true);\n      };\n      $scope.attachmentUploaderCallback= function(data){\n        if (data.action == google.picker.Action.PICKED) {\n                $.each(data.docs, function(index) {\n                    var file = { 'id':data.docs[index].id,\n                                  'title':data.docs[index].name,\n                                  'mimeType': data.docs[index].mimeType,\n                                  'embedLink': data.docs[index].url\n                    };\n                    $scope.sendWithAttachments.push(file);\n                });\n                $scope.apply();\n        }\n      }\n\n      $scope.sendEmail = function(email){\n        \n        email.body = $('#some-textarea').val();\n        var params = {\n                  'to': email.to,\n                  'cc': email.cc,\n                  'bcc': email.bcc,\n                  'subject': email.subject,\n                  'body': email.body,\n                  'about':$scope.opportunity.entityKey\n                  };\n        if ($scope.sendWithAttachments){\n            params['files']={\n                            'parent':$scope.opportunity.entityKey,\n                            'access':$scope.opportunity.access,\n                            'items':$scope.sendWithAttachments\n                            };\n        };\n        \n        Email.send($scope,params);\n      };\n\n //HKA 29.12.2013 Delete Opportunity\n $scope.editbeforedelete = function(){\n     $('#BeforedeleteOpportunity').modal('show');\n   };\n$scope.deleteopportunity= function(){\n     var params = {'entityKey':$scope.opportunity.entityKey};\n     Opportunity.delete($scope,params);\n     $('#BeforedeleteOpportunity').modal('hide');\n     };\n\n     $scope.DocumentlistNextPageItems = function(){\n\n\n        var nextPage = $scope.documentCurrentPage + 1;\n        var params = {};\n          if ($scope.documentpages[nextPage]){\n            params = {\n                        'id':$scope.opportunity.id,\n                        'documents':{\n                          'limit': '15',\n                          'pageToken':$scope.documentpages[nextPage]\n                        }\n                      }\n            $scope.documentCurrentPage = $scope.documentCurrentPage + 1 ;\n\n            Opportunity.get($scope,params);\n\n          }\n\n\n     }\n\n     $scope.listDocuments = function(){\n        var params = {\n                        'id':$scope.opportunity.id,\n                        'documents':{\n                          'limit': '15'\n                        }\n                      }\n        Opportunity.get($scope,params);\n\n     };\n     $scope.showCreateDocument = function(type){\n\n        $scope.mimeType = type;\n        $('#newDocument').modal('show');\n     };\n     $scope.createDocument = function(newdocument){\n        var mimeType = 'application/vnd.google-apps.' + $scope.mimeType;\n        var params = {\n                      'parent': $scope.opportunity.entityKey,\n                      'title':newdocument.title,\n                      'mimeType':mimeType\n                     };\n        Attachement.insert($scope,params);\n\n     };\n     $scope.createPickerUploader = function() {\n          var developerKey = 'AIzaSyDHuaxvm9WSs0nu-FrZhZcmaKzhvLiSczY';\n          var projectfolder = $scope.opportunity.folder;\n          var docsView = new google.picker.DocsView()\n              .setIncludeFolders(true)\n              .setSelectFolderEnabled(true);\n          var picker = new google.picker.PickerBuilder().\n              addView(new google.picker.DocsUploadView().setParent(projectfolder)).\n              addView(docsView).\n              setCallback($scope.uploaderCallback).\n              setOAuthToken(window.authResult.access_token).\n              setDeveloperKey(developerKey).\n              setAppId('935370948155-qm0tjs62kagtik11jt10n9j7vbguok9d').\n                enableFeature(google.picker.Feature.MULTISELECT_ENABLED).\n              build();\n          picker.setVisible(true);\n      };\n      // A simple callback implementation.\n      $scope.uploaderCallback = function(data) {\n\n\n        if (data.action == google.picker.Action.PICKED) {\n                var params = {\n                              'access': $scope.opportunity.access,\n                              'parent':$scope.opportunity.entityKey\n                            };\n                params.items = new Array();\n\n                 $.each(data.docs, function(index) {\n                      console.log(data.docs);\n                      /*\n                      {'about_kind':'Account',\n                      'about_item': $scope.account.id,\n                      'title':newdocument.title,\n                      'mimeType':mimeType };\n                      */\n                      var item = { 'id':data.docs[index].id,\n                                  'title':data.docs[index].name,\n                                  'mimeType': data.docs[index].mimeType,\n                                  'embedLink': data.docs[index].url\n\n                      };\n                      params.items.push(item);\n\n                  });\n                 Attachement.attachfiles($scope,params);\n\n          }\n      };\n\n  //06.03.2014 Edit Close date, Reason lost, Main competitor, Type, Description, Source : show Modal\n     $scope.editclosedate = function(){\n     $('#EditCloseDate').modal('show')\n     };\n     $scope.editcompetitor = function(){\n     $('#EditCompetitor').modal('show')\n     };\n     $scope.editreasonlost = function(){\n     $('#EditReasonLost').modal('show')\n     };\n     $scope.editdescription = function(){\n     $('#EditDescription').modal('show')\n     };\n      $scope.edittype = function(){\n     $('#EditType').modal('show')\n     };\n     $scope.editsource = function(){\n     $('#EditSource').modal('show')\n     };\n\n    //07.03.2014 update Close date, Reason lost, Main competitor, Type, Description, Source\n\n     $scope.updateClosedate = function(opportunity){\n      console.log('***************close date**************');\n      console.log(opportunity.closed_date);\n      var close_at = $filter('date')(opportunity.closed_date,['yyyy-MM-ddTHH:mm:00.000000']);\n      console.log(close_at);\n      params = {'id':$scope.opportunity.id,\n              'closed_date':close_at};\n      Opportunity.patch($scope,params);\n      $('#EditCloseDate').modal('hide');\n     };\n\n     $scope.updateCompetitor = function(opportunity){\n      params = {'id':$scope.opportunity.id,\n             'competitor':opportunity.competitor};\n      Opportunity.patch($scope,params);\n      $('#EditCompetitor').modal('hide');\n     };\n\n     $scope.updateReasonlost = function(opportunity){\n      params = {'id':$scope.opportunity.id,\n              'reason_lost':opportunity.reason_lost};\n      Opportunity.patch($scope,params);\n      $('#EditReasonLost').modal('hide');\n     };\n\n     $scope.updateDescription = function(opportunity){\n      params = {'id':$scope.opportunity.id,\n              'description':opportunity.description};\n      Opportunity.patch($scope,params);\n      $('#EditDescription').modal('hide');\n     };\n\n\n     $scope.updateType = function(opportunity){\n      params = {'id':$scope.opportunity.id,\n              'opportunity_type':opportunity.opportunity_type};\n      Opportunity.patch($scope,params);\n      $('#EditType').modal('hide');\n     };\n\n\n     $scope.updatsource = function(opportunity){\n      params = {'id':$scope.opportunity.id,\n              'source':opportunity.source};\n      Opportunity.patch($scope,params);\n      $('#EditSource').modal('hide');\n     };\n\n    //HKA 07.03.2014 Add Custom field\n\n    $scope.addCustomField = function (customField,option) {\n               \n               \n            if (customField) {\n                if (customField.infonode_key) {\n                    \n                    $scope.inlinePatch('Infonode','customfields', customField.name,customField.infonode_key,customField.value)\n                }else{\n                    \n                    if (!customField.field) {\n                        customField.field=customField.name;\n                    };\n                    var custom_value=null;\n                        if (option) {\n                            \n                            if (!customField.value) {\n                                customField.value=[];\n                            };\n                            customField.value.push(option);\n                            custom_value=JSON.stringify(customField.value);\n                        }else{\n                            \n                             custom_value=customField.value;\n                        };\n\n                        \n                        \n                    if (customField.field && customField.value) {\n                        \n                        params = {\n                            'parent': $scope.opportunity.entityKey,\n                            'kind': 'customfields',\n                            'fields': [\n                                {\n                                    \"field\": customField.field,\n                                    \"property_type\":customField.id,\n                                    \"value\": custom_value\n                                }\n                            ]\n                        };\n                        InfoNode.insertCustom($scope, params,customField);\n                    }\n                };\n                \n            }\n            $('#customfields').modal('hide');\n            $scope.customfield = {};\n            $scope.showCustomFieldForm = false;\n\n};\n\n$scope.listInfonodes = function(kind) {\n     params = {'parent':$scope.opportunity.entityKey,\n               'connections': kind\n              };\n     InfoNode.list($scope,params);\n\n };\n   $scope.deleteInfonode = function (entityKey, kind) {\n            var params = {'entityKey': entityKey, 'kind': kind};\n            if (params.kind==\"customfields\") {\n                InfoNode.deleteCustom($scope, params);\n            }else{\n                InfoNode.delete($scope, params);\n            };\n        };\n  $scope.customfieldDeleted=function(entityKey){\n            var index=null;\n            angular.forEach($scope.infonodes.customfields, function (cus) {\n              if (cus.entityKey==entityKey) {\n                index=$scope.infonodes.customfields.indexOf(cus);\n              };\n            });\n            if (index!=null) {\n                $scope.infonodes.customfields.splice(index,1);\n                $scope.apply();\n            };\n        };\n\n  /// update account with inlineEdit\n  $scope.isEmpty=function(obj){\n        return jQuery.isEmptyObject(obj);\n  }\n  $scope.inlinePatch=function(kind,edge,name,entityKey,value){\n\n   if (kind=='Opportunity') {         \n          var params={};\n                switch(name){\n                  case \"name\": \n                  params.name=value;  \n                  break;\n                  case \"owner\":\n                  params.owner=value; \n                  break;\n                }\n                if (!$scope.isEmpty(params)) {\n                  params.id=entityKey;\n                  Opportunity.patch($scope,params);\n                }\n   }else{\n\n\n\n          params = {\n                  'entityKey': entityKey,\n                  'parent':$scope.opportunity.entityKey,\n                  'kind':edge,\n                  'fields':[\n\n                      {\n                        \"field\": name,\n                        \"value\": value\n                      }\n                  ]\n        };\n\n         InfoNode.patch($scope,params);\n   }\n\n\n  };\n  \n\n     $scope.listMoreOnScroll = function(){\n       switch ($scope.selectedTab)\n           {\n           case 7:\n             $scope.DocumentlistNextPageItems();\n             break;\n           case 1:\n             $scope.TopiclistNextPageItems();\n             break;\n\n           }\n     };\n     // LBA 27-10-2014\n    $scope.DeleteCollaborator=function(entityKey){\n            console.log(\"delete collaborators\")\n            var item = {\n                          'type':\"user\",\n                          'value':entityKey,\n                          'about':$scope.opportunity.entityKey\n                        };\n            Permission.delete($scope,item)\n            console.log(item)\n        };\n    // Google+ Authentication\n    Auth.init($scope);\n    $(window).scroll(function() {\n         if (!$scope.isLoading && ($(window).scrollTop() >  $(document).height() - $(window).height() - 100)) {\n             $scope.listMoreOnScroll();\n         }\n     });\n\n}]);\n\napp.controller('OpportunityNewCtrl', ['$scope', '$http', '$filter', '$q', 'Auth', 'Account', 'Contact', 'Opportunitystage', 'Opportunity', 'Edge', 'Linkedin','Customfield',\n    function ($scope, $http, $filter, $q, Auth, Account, Contact, Opportunitystage, Opportunity, Edge, Linkedin,Customfield) {\n      $(\"ul.page-sidebar-menu li\").removeClass(\"active\");\n      $(\"#id_Opportunities\").addClass(\"active\");\n      document.title = \"Opportunities: New\";\n      trackMixpanelAction('OPPORTUNITY_NEW_VIEW');\n      $scope.isSignedIn = false;\n      $scope.immediateFailed = false;\n      $scope.nextPageToken = undefined;\n      $scope.prevPageToken = undefined;\n      $scope.pagination = {};\n      $scope.isLoading = false;\n      $scope.nbLoads=0;\n      $scope.leadpagination = {};\n      $scope.currentPage = 01;\n      $scope.pages = [];\n      $scope.stage_selected={};\n      $scope.accounts = [];\n      $scope.account = {};\n      $scope.account.access ='public';\n      $scope.opportunity={};\n      $scope.oppo_err={\n                      'name':false,\n                      'amount_per_unit':false,\n                      'account':false,\n                      'contact':false,\n                      };\n      $scope.opportunity.access ='public';\n      $scope.order = '-updated_at';\n      $scope.status = 'New';\n      $scope.showPriceForm =false;\n      $scope.customfields=[];\n      $scope.account.account_type = 'Customer';\n      $scope.account.industry = 'Technology';\n      $scope.stage_selected={};\n      $scope.opportunitystages=[];\n      $scope.opportunity={access:'public',currency:'USD',duration_unit:'fixed',closed_date:new Date()};\n      $scope.users=[];\n      $scope.opportunity.estimated=null;\n      $scope.imageSrc = '/static/img/default_company.png';\n      $scope.opportunity.contacts=[];\n      $scope.contacts=[];\n      $scope.competitors=[];\n      $scope.opportunity.competitors=[];\n      $scope.newnote={};\n      $scope.notes=[];\n      $scope.contact={};\n      $scope.newcontacts=[];\n      $scope.opportunity.notes=[];\n      $scope.currentContact={};\n      $scope.currentContact.sociallinks=[];\n      $scope.currentContact.websites=[];\n      $scope.opportunity.timeline = [];\n      $scope.opportunities=[];\n      $scope.opportunities.customfields=[];\n      $scope.inProcess=function(varBool,message){\n          if (varBool) {           \n            if (message) {\n              console.log(\"starts of :\"+message);\n            };\n            $scope.nbLoads=$scope.nbLoads+1;\n            if ($scope.nbLoads==1) {\n              $scope.isLoading=true;\n            };\n          }else{\n            if (message) {\n              console.log(\"ends of :\"+message);\n            };\n            $scope.nbLoads=$scope.nbLoads-1;\n            if ($scope.nbLoads==0) {\n               $scope.isLoading=false;\n \n            };\n\n          };\n        }     \n     $scope.clearOpp=function(){\n              $scope.oppo_err={\n                              'name':false,\n                              'amount_per_unit':false,\n                              'account':false,\n                              'contact':false,\n                              };\n              $scope.opportunity.access ='public';\n              $scope.status = 'New';\n              $scope.customfields=[];\n              $scope.account.account_type = 'Customer';\n              $scope.account.industry = 'Technology';\n              $scope.stage_selected={};\n              $scope.opportunity={access:'public',currency:'USD',duration_unit:'fixed',closed_date:new Date()};\n              $scope.opportunity.estimated=null;\n              $scope.opportunity.contacts=[];\n              $scope.contacts=[];\n              $scope.competitors=[];\n              $scope.opportunity.competitors=[];\n              $scope.newnote={};\n              $scope.notes=[];\n              $scope.contact={};\n              $scope.newcontacts=[];\n              $scope.opportunity.notes=[];\n              $scope.currentContact={};\n              $scope.currentContact.sociallinks=[];\n              $scope.currentContact.websites=[];\n              $scope.opportunity.timeline = [];\n              $scope.opportunity.notes=[];\n              $scope.status_selected={};\n              $scope.customfields=[];\n              $scope.searchContactQuery=\"\";\n              $scope.searchAccountQuery=\"\";\n              angular.forEach($scope.opportunities.customfields, function (cusfield) {\n                    cusfield.value=\"\";\n                });\n              $('#leadEventStartsAt').val('');\n              $scope.apply();\n            }   \n     $scope.linkedinUrl=function(url){\n                         console.log(\"urrrrrl linkedin\");\n                         console.log(url);\n                         \n                         var match=\"\";\n                         var matcher = new RegExp(\"linkedin\");\n                         var test = matcher.test(url);\n                         console.log(test);                        \n                         return test;\n        }\n        $scope.apply=function(){\n         \n          if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest') {\n               $scope.$apply();\n              }\n              return false;\n        }\n      $scope.initObject=function(obj){\n          for (var key in obj) {\n                obj[key]=null;\n              }\n      }\n      $scope.addNewContact = function(current) {\n            console.log('in add contact');\n            console.log(current);\n            if (current.firstname != null && current.lastname != null) {\n                $scope.contact=current;\n                $scope.contact.access = $scope.opportunity.acces;\n\n                if (current.phone != null) {\n                    $scope.contact.phones = [{'number': current.phone, 'type': 'work'}];\n                }\n                if (current.email != null) {\n                    $scope.contact.emails = [{'email': current.email}];\n                }\n                if (current.address != null) {\n                    $scope.contact.addresses = [{'formatted': current.address}];\n                }\n\n                Contact.insert($scope, $scope.contact)\n                $scope.currentContact = {};\n            } else {\n                $scope.currentContact = {};\n               /* $scope.newContactform = false;*/\n            }\n            console.log('hhhhhhhhhhhhhhhhhere save new contact');\n            console.log($scope.newcontacts);\n\n        }\n        $scope.contactInserted = function (resp) {\n            if ($scope.newcontacts == undefined) {\n                $scope.newcontacts = [];\n            }\n            ;\n            $scope.newcontacts.push(resp);\n            $scope.apply();\n            //$scope.opportunity.contact = resp.entityKey;   \n        }\n      $scope.addNote = function(){\n       $scope.opportunity.notes.push($scope.newnote)\n       $scope.newnote={}\n       console.log(\"adding notes\");\n     }\n      $scope.changeInitialStage=function(stage){\n        $scope.initialStage=stage;\n        console.log($scope.initialStage.probability);\n      }\n      $scope.pullElement=function(index,elem,arr){\n        if ($scope.customfields.indexOf(elem) != -1) {\n            $scope.customfields.splice(index, 1);\n        }\n      }\n      $scope.pullFromArray=function(index,elem,arr){\n        if (arr.indexOf(elem) != -1) {\n            arr.splice(index, 1);\n        }\n      }\n      $scope.showRemove=function(id){\n        $('#'+id).addClass('hidden');\n      }\n      $scope.hideRemove=function(id){\n       $('#'+id).removeClass('hidden');\n      }\n      $scope.pushElement=function(elem,arr){\n\n          if (arr.indexOf(elem) == -1) {\n          if (elem.field && elem.value) {\n                        var copyOfElement = angular.copy(elem);\n                        arr.push(copyOfElement);\n                        console.log(elem);\n                        $scope.initObject(elem); \n                      }\n\n                    }else{\n                      alert(\"item already exit\");\n                    }\n                }\n      $scope.runTheProcess = function(){\n           $scope.getCustomFields(\"opportunities\");\n           Opportunitystage.list($scope,{'order':'stage_number'});\n           ga('send', 'pageview', '/opportunities/new');\n           window.Intercom('update');\n       };\n        // We need to call this to refresh token when user credentials are invalid\n       $scope.refreshToken = function() {\n            Auth.refreshToken();\n       };\n       $scope.getCustomFields=function(related_object){\n            Customfield.list($scope,{related_object:related_object});\n        }\n        $scope.listResponse=function(items,related_object){\n            $scope[related_object].customfields=items;\n            $scope.apply();\n            \n        }\n        $scope.addCustomField = function (customField,option) {  \n            if (customField) {\n                    if (!customField.field) {\n                        customField.field=customField.name;\n                    };\n                    var custom_value=null;\n                        if (option) {\n                            \n                            if (!customField.value) {\n                                customField.value=[];\n                            };\n                            customField.value.push(option);\n                            custom_value=JSON.stringify(customField.value);\n                        }else{\n\n                             custom_value=customField.value;\n                        };\n\n                        \n                        \n                    if (customField.field && customField.value) {\n\n                        var params = {\n                                    \"field\": customField.field,\n                                    \"property_type\":customField.id,\n                                    \"value\": custom_value\n                                };\n                        $scope.customfields.push(params);\n                        console.log($scope.customfields);\n\n                    }\n            }\n            $('#customfields').modal('hide');\n            $scope.customfield = {};\n            $scope.showCustomFieldForm = false;\n\n        };\n\n\n\n\n  $scope.isEmptyArray=function(Array){\n                if (Array!=undefined && Array.length>0) {\n                return false;\n                }else{\n                    return true;\n                };    \n            \n        }\n      $scope.prepareInfonodes = function(){\n        var infonodes = [];\n\n        angular.forEach($scope.customfields, function(customfield){\n            var infonode = {\n                            'kind':'customfields',\n                            'fields':[\n                                    {\n                                    'field':customfield.field,\n                                    'property_type':customfield.property_type,\n                                    'value':customfield.value\n                                    }\n                            ]\n\n                          }\n            infonodes.push(infonode);\n        });\n        return infonodes;\n    };\n      var params_search_competitor ={};\n      $scope.$watch('searchCompetitorQuery', function() {\n        if($scope.searchCompetitorQuery){\n            if($scope.searchCompetitorQuery.length>1){\n              params_search_competitor['q'] = $scope.searchCompetitorQuery;\n              gapi.client.crmengine.accounts.search(params_search_competitor).execute(function(resp) {\n                if (resp.items){\n                $scope.competitorsResult = resp.items;\n                console.log($scope.competitorsResult);\n                $scope.apply();\n              };\n            });\n          }\n        }\n      });\n      $scope.selectCompetitor = function(){\n        console.log(\"enter fired\");\n        console.log($scope.searchCompetitorQuery);\n        if (typeof($scope.searchCompetitorQuery)=='object') {\n           console.log(\"enter object\");\n           $scope.competitors.push($scope.searchCompetitorQuery);\n           $scope.opportunity.competitors.push($scope.searchCompetitorQuery.entityKey);\n        }else{\n           if ($scope.searchCompetitorQuery!=\"\") {\n             console.log(\"enter string\");\n            $scope.competitors.push({name:$scope.searchCompetitorQuery});\n            $scope.opportunity.competitors.push($scope.searchCompetitorQuery);\n           };          \n        };   \n        $scope.searchCompetitorQuery=\"\";  \n        $scope.apply();        \n      };\n      var params_search_contact ={};\n      $scope.$watch('searchContactQuery', function() {\n        if($scope.searchContactQuery){\n            if($scope.searchContactQuery.length>1){\n              params_search_contact['q'] = $scope.searchContactQuery;\n              gapi.client.crmengine.contacts.search(params_search_contact).execute(function(resp) {\n                if (resp.items){\n                $scope.contactsResults = resp.items;\n                console.log($scope.contactsResults);\n                $scope.apply();\n              };\n            });\n          }\n        }\n      });\n     $scope.selectContact = function(){\n        if (typeof($scope.searchContactQuery)=='object') {\n\n          $scope.searchContactQuery.is_decesion_maker = false;\n          $scope.contacts.push($scope.searchContactQuery);\n\n\n        }else{\n          \n            console.log('test searchContactQuery');\n            console.log($scope.searchContactQuery);\n            if ($scope.searchContactQuery != \"\") {\n                $scope.contacts.push({full_name: $scope.searchContactQuery, is_decesion_maker: false});\n\n            };\n           \n\n        };   \n        $scope.searchContactQuery=\"\";    \n       \n        /*var account = {\n                      'entityKey':$scope.searchContactQuery.account.entityKey,\n                      'name':$scope.searchContactQuery.account.name\n                    };\n        $scope.opportunity.account = account;\n        $scope.searchAccountQuery = $scope.searchContactQuery.account.name;*/\n      };\n        // map search in\n\n\n        $scope.getResults = function (val, location) {\n            console.log('here executed');\n            var url = ROOT + location + '?alt=json'\n            var config = {\n                headers: {\n                    'Authorization': 'Bearer ' + localStorage['access_token'],\n                    'Accept': 'application/json'\n                }\n            }\n            var params = {\n                \"q\": val\n            };\n            return $http.post(url, params, config).then(function (response) {\n                if (response.data.items) {\n                    return response.data.items;\n                } else {\n                    return [];\n                }\n                ;\n                return response.data.items;\n            });\n        }\n        $scope.getAccountsResults = function (val) {\n            console.log('here executed');\n            var url = ROOT + '/crmengine/v1/accounts/search?alt=json'\n            var config = {\n                headers: {\n                    'Authorization': 'Bearer ' + localStorage['access_token'],\n                    'Accept': 'application/json'\n                }\n            }\n            var params = {\n                \"q\": val\n            };\n            return $http.post(url, params, config).then(function (response) {\n                if (response.data.items) {\n                    return response.data.items;\n                } else {\n                    return [];\n                }\n                ;\n                return response.data.items;\n            });\n        }\n\n      var params_search_account ={};\n      $scope.result = undefined;\n      $scope.q = undefined;\n        $scope.$watch('searchAcountQuery', function () {\n          params_search_account['q'] = $scope.searchAccountQuery;\n          Account.search($scope,params_search_account);\n      });\n\n      $scope.selectAccount = function(){\n          $scope.opportunity.account  = $scope.searchAccountQuery;\n      };\n      $scope.insertNewContact = function(account,access){\n          if($scope.searchContactQuery.length>0){\n            var firstName = $scope.searchContactQuery.split(' ').slice(0, -1).join(' ') || \" \";\n            var lastName = $scope.searchContactQuery.split(' ').slice(-1).join(' ') || \" \";\n            var params = {\n                          'firstname':  firstName ,\n                          'lastname': lastName ,\n                          'account': account,\n                          'access': access\n                        };\n            Contact.insert($scope,params);\n          };\n      }\n\n\n        $scope.$watch('opportunity', function (newVal, oldVal) {\n          if (newVal.name)  $scope.oppo_err.name=false;\n          if (newVal.amount_per_unit )$scope.oppo_err.amount_per_unit =false;\n          if (newVal.account )$scope.oppo_err.account =false;\n      }, true); \n      $scope.$watch('searchAccountQuery', function(newVal, oldVal){\n          if (newVal )$scope.oppo_err.account =false;\n      });   \n      $scope.$watch('searchContactQuery', function(newVal, oldVal){\n          if (newVal )$scope.oppo_err.contact =false;\n      });\n      $scope.showAddEventPopup=function(){\n        $('#newEventModalForm').modal(\"show\");  \n      }\n      $scope.validateBeforeSave=function(opportunity){\n           if (!opportunity.name) $scope.oppo_err.name=true;\n            else $scope.oppo_err.name=false;  \n          if (!opportunity.amount_per_unit) $scope.oppo_err.amount_per_unit=true;\n            else $scope.oppo_err.amount_per_unit=false;\n          if (!$scope.searchAccountQuery) $scope.oppo_err.account=true;\n            else $scope.oppo_err.account=false;\n          if (!$scope.searchContactQuery) $scope.oppo_err.contact=true;\n            else $scope.oppo_err.contact=false;\n          if (!$scope.oppo_err.name && !$scope.oppo_err.amount_per_unit && !($scope.oppo_err.account && $scope.oppo_err.contact) )  $scope.save(opportunity)\n      }\n      $scope.save = function(opportunity){\n          angular.forEach($scope.contacts, function (contact) {\n              if (contact.entityKey) {\n                  $scope.opportunity.contacts.push({\n                      'contact': contact.entityKey,\n                      is_decesion_maker: contact.is_decesion_maker\n                  });\n              } else {\n                  $scope.opportunity.contacts.push({\n                      'contact': contact.full_name,\n                      is_decesion_maker: contact.is_decesion_maker\n                  });\n              }\n              ;\n          });\n          console.log('opportunity contacts');\n          console.log($scope.opportunity.contacts);\n          opportunity.infonodes = $scope.prepareInfonodes();\n            // prepare amount attributes\n            \n            if (opportunity.duration_unit=='fixed'){\n              opportunity.amount_total = parseInt(opportunity.amount_per_unit);\n              opportunity.opportunity_type = 'fixed_bid';\n            }else{\n              opportunity.opportunity_type = 'per_' + opportunity.duration_unit;\n              opportunity.amount_total = opportunity.amount_per_unit * opportunity.duration;\n            }\n          if (typeof($scope.searchAccountQuery)=='object'){\n            var accountKey = $scope.searchAccountQuery.entityKey;\n            opportunity.account = accountKey;\n          }else{\n            opportunity.account=$scope.searchAccountQuery;\n          }\n        /*  if (typeof($scope.searchContactQuery)=='object'){\n            var contactKey = $scope.searchContactQuery.entityKey;\n            opportunity.contact = contactKey;\n          }else{\n            opportunity.contact=$scope.searchContactQuery;\n          }*/\n          var closed_date = $filter('date')(opportunity.closed_date,['yyyy-MM-dd']);\n          opportunity.stage=$scope.initialStage.entityKey;\n          opportunity.closed_date=closed_date;\n          console.log('hereeeeeeeeeeeeeee opportunity before save');\n          console.log(opportunity);\n          Opportunity.insert($scope,opportunity);\n      \n      };\n      $scope.accountInserted = function(resp){\n          $scope.opportunity.account = resp.entityKey;\n          console.log($scope.opportunity);\n          // Opportunity.insert($scope,$scope.opportunity);\n         \n      };\n      $scope.contactInserted = function(resp){\n          $scope.opportunity.contact = resp.entityKey;\n          // Opportunity.insert($scope,$scope.opportunity);\n          \n      }\n      $scope.opportunityInserted = function(resp){\n          window.location.replace('#/opportunities');\n      };\n         $scope.getLinkedinProfile=function(){\n              var params={\n                \"firstname\":$scope.currentContact.firstname,\n                \"lastname\":$scope.currentContact.lastname\n                }\n                var linkedurl=null;\n                $scope.inNoResults=false;\n                if ($scope.currentContact.sociallinks==undefined) {\n                  $scope.currentContact.sociallinks=[];\n                };\n                var savedEntityKey=null;\n                if ($scope.currentContact.sociallinks.length > 0) {\n                   angular.forEach($scope.currentContact.sociallinks, function(link){\n                                    if ($scope.linkedinUrl(link.url)) {\n                                      linkedurl=link.url;\n                                      savedEntityKey=link.entityKey;\n                                    };\n                                });\n                };\n                 if (linkedurl) {\n                    var par={'url' : linkedurl};\n                   Linkedin.profileGet(par,function(resp){\n                      if(!resp.code){\n                       $scope.inProfile.fullname=resp.fullname;\n                       $scope.inProfile.title=resp.title;\n                       $scope.inProfile.formations=resp.formations\n                       $scope.inProfile.locality=resp.locality;\n                       $scope.inProfile.relation=resp.relation;\n                       $scope.inProfile.industry=resp.industry;\n                       $scope.linkedProfileresume=resp.resume;\n                       $scope.inProfile.entityKey=savedEntityKey;\n                       $scope.inProfile.url=linkedurl;\n                       $scope.inProfile.resume=resp.resume;\n                       $scope.inProfile.skills=resp.skills;\n                       $scope.inProfile.current_post=resp.current_post;\n                       $scope.inProfile.past_post=resp.past_post;\n                       $scope.inProfile.certifications=JSON.parse(resp.certifications);\n                       $scope.inProfile.experiences=JSON.parse(resp.experiences);\n                       if($scope.inProfile.experiences){\n                       $scope.inProfile.experiences.curr=$scope.inProfile.experiences['current-position'];\n                       $scope.inProfile.experiences.past=$scope.inProfile.experiences['past-position'];\n                       }\n                       if ($scope.currentContact.addresses==undefined||$scope.currentContact.addresses==[]) {\n                          $scope.addGeo({'formatted':$scope.inProfile.locality});\n                        };\n                       $scope.linkedLoader=false;\n                       $scope.inIsLoading = false;\n                       $scope.isLoading = false;\n                       $scope.apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                          $scope.isLoading = false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n                }else{\n                  Linkedin.listPeople(params,function(resp){\n                     $scope.inIsSearching=true;\n                     $scope.inShortProfiles=[];\n                     $scope.inProfile={};\n                     if(!resp.code){\n                      $scope.inIsSearching=false;\n                      if (resp.items==undefined) {\n                        $scope.inList=[];\n                        $scope.inNoResults=true;\n                        $scope.inIsSearching=false;\n                      }else{\n                        $scope.inList=resp.items;\n                        if (resp.items.length < 4) {\n                          console.log(\"in check of 3\");\n                          angular.forEach(resp.items, function(item){\n                              console.log(item.url);\n                              $scope.getLinkedinByUrl(item.url);\n                        });\n                        }\n                      };\n                         $scope.isLoading = false;\n                         $scope.$apply();\n                        }else {\n                          console.log(\"no 401\");\n                           if(resp.code==401){\n                            // $scope.refreshToken();\n                           console.log(\"no resp\");\n                            $scope.isLoading = false;\n                            $scope.$apply();\n                           };\n                        }\n                  });            \n                };\n            }\n           $scope.saveLinkedinUrl=function(shortProfile){\n          //$scope.clearContact();\n          $scope.inList=[];\n          $scope.inShortProfiles=[];\n          $scope.inProfile={};\n          $scope.inProfile=shortProfile;\n          console.log(\"shoooort profile\");\n          console.log($scope.inProfile);\n          $scope.sociallink={'url':$scope.inProfile.url};\n          $scope.savedSociallink=$scope.inProfile.url;\n          $scope.currentContact.sociallinks.push($scope.sociallink);\n          $scope.imageSrc = $scope.inProfile.profile_picture;\n          $scope.currentContact.profile_img_url = $scope.inProfile.profile_picture;\n          if ($scope.inProfile.title) {\n            $scope.currentContact.title = $scope.inProfile.title;\n          };\n          if($scope.inProfile.current_post){\n                \n              }\n          if (!$scope.addressModel) {\n                    $scope.addressModel=$scope.inProfile.locality;\n                  }else{\n                    if ($scope.addressModel.length < $scope.inProfile.locality.length) {\n                          $scope.addressModel=$scope.inProfile.locality;\n                    };\n                  };\n          $scope.apply();\n      }\n       $scope.getLinkedinByUrl=function(url){\n               $scope.inIsLoading=true;\n               var par={'url' : url};\n               Linkedin.profileGet(par,function(resp){\n                      if(!resp.code){\n                         prof={};\n                         prof.fullname=resp.fullname;\n                         prof.url=url;\n                         prof.profile_picture=resp.profile_picture;\n                         prof.title=resp.title;\n                         prof.locality=resp.locality;\n                         prof.industry=resp.industry; \n                         prof.formations=resp.formations\n                         prof.resume=resp.resume;\n                         prof.skills=resp.skills;\n                         prof.current_post=resp.current_post;\n                         prof.past_post=resp.past_post;\n                         prof.experiences=JSON.parse(resp.experiences);  \n                         if(prof.experiences){\n                          prof.experiences.curr=prof.experiences['current-position'];\n                          prof.experiences.past=prof.experiences['past-position'];\n                         }         \n                         $scope.inShortProfiles.push(prof);\n                         $scope.inIsLoading=false;\n                         $scope.apply();\n                      }else {\n                         if(resp.code==401){\n                          $scope.inIsLoading=false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n            }\n               $scope.twitterUrl=function(url){\n                         var match=\"\";\n                         var matcher = new RegExp(\"twitter\");\n                         var test = matcher.test(url);                        \n                         return test;\n        }\n        $scope.getTwitterProfile=function(){\n              console.log(\"getTwitterProfile\");\n              var params={\n                \"firstname\":$scope.currentContact.firstname,\n                \"lastname\":$scope.currentContact.lastname\n                }\n                var twitterurl=null;\n                $scope.twNoResults=false;\n                if ($scope.currentContact.sociallinks==undefined) {\n                  $scope.currentContact.sociallinks=[];\n                };\n                var savedEntityKey=null;\n                if ($scope.currentContact.sociallinks.length > 0) {\n                   angular.forEach($scope.currentContact.sociallinks, function(link){\n                                    if ($scope.twitterUrl(link.url)) {\n                                      twitterurl=link.url;\n                                      savedEntityKey=link.entityKey;\n                                    };\n                                });\n                };\n                 if (twitterurl) {\n                    var par={'url' : twitterurl};\n                   Linkedin.getTwitterProfile(par,function(resp){\n                      if(!resp.code){\n                       $scope.twProfile.name=resp.name;\n                       $scope.twProfile.screen_name=resp.screen_name;\n                       $scope.twProfile.created_at=resp.created_at\n                       $scope.twProfile.description_of_user=resp.description_of_user;\n                       $scope.twProfile.followers_count=resp.followers_count;\n                       $scope.twProfile.friends_count=resp.friends_count; \n                       $scope.twProfile.id=resp.id; \n                       $scope.twProfile.lang=resp.lang; \n                       $scope.twProfile.language=resp.language; \n                       $scope.twProfile.last_tweet_favorite_count=resp.last_tweet_favorite_count; \n                       $scope.twProfile.last_tweet_retweet_count=resp.last_tweet_retweet_count; \n                       $scope.twProfile.last_tweet_text=resp.last_tweet_text; \n                       $scope.twProfile.location=resp.location; \n                       $scope.twProfile.nbr_tweets=resp.nbr_tweets; \n                       $scope.twProfile.profile_banner_url=resp.profile_banner_url+'/1500x500'; \n                       $scope.twProfile.profile_image_url_https=resp.profile_image_url_https; \n                       $scope.twProfile.url_of_user_their_company=resp.url_of_user_their_company; \n                       $scope.twProfile.entityKey=savedEntityKey;\n                       $scope.twProfile.url=twitterurl;\n                       if ($scope.currentContact.addresses==undefined||$scope.currentContact.addresses==[]) {\n                          $scope.addGeo({'formatted':$scope.twProfile.location});\n                        };\n                       $scope.twIsLoading = false;\n                       $scope.isLoading = false;\n                       $scope.apply();\n                      }else {\n                        console.log(\"no 401\");\n                         if(resp.code==401){\n                          // $scope.refreshToken();\n                          $scope.isLoading = false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n                }else{\n                  Linkedin.getTwitterList(params,function(resp){\n                     $scope.twIsSearching=true;\n                     $scope.twShortProfiles=[];\n                     $scope.twProfile={};\n                     if(!resp.code){\n                      $scope.twIsSearching=false;\n                      if (resp.items==undefined) {\n                        $scope.twList=[];\n                        $scope.twNoResults=true;\n                        $scope.twIsSearching=false;\n                      }else{\n                        console.log(resp.items);\n                        $scope.twList=resp.items;\n                        console.log($scope.twShortProfiles);\n                        $scope.apply();\n                        console.log($scope.twList.length)\n                        if (resp.items.length < 4) {\n                          console.log(\"in check of 3\");\n                          angular.forEach(resp.items, function(item){\n                              console.log(item.url);\n                              $scope.getTwitterByUrl(item.url);\n                        });\n                        }\n                      };\n                         $scope.isLoading = false;\n                         $scope.apply();\n                        }else {\n                          console.log(\"no 401\");\n                           if(resp.code==401){\n                            // $scope.refreshToken();\n                           console.log(\"no resp\");\n                            $scope.isLoading = false;\n                            $scope.$apply();\n                           };\n                        }\n                  });            \n                };\n            }\n        $scope.urlSource=function(url){\n            var links=[\"apple\",\"bitbucket\",\"dribbble\",\"dropbox\",\"facebook\",\"flickr\",\"foursquare\",\"github\",\"instagram\",\"linkedin\",\"pinterest\",\"trello\",\"tumblr\",\"twitter\",\"youtube\"];\n                    var match=\"\";\n                    angular.forEach(links, function(link){\n                         var matcher = new RegExp(link);\n                         var test = matcher.test(url);\n                         if(test){  \n                             match=link;\n                         }\n                    });\n                    if (match==\"\") {\n                        match='globe';\n                    };\n                    return match;\n        }\n              $scope.getTwitterByUrl=function(url){\n               $scope.twIsLoading=true;\n               var par={'url' : url};\n               Linkedin.getTwitterProfile(par,function(resp){\n                      if(!resp.code){\n                         prof={};\n                         prof.name=resp.name;\n                         prof.screen_name=resp.screen_name;\n                         prof.created_at=resp.created_at\n                         prof.description_of_user=resp.description_of_user;\n                         prof.followers_count=resp.followers_count;\n                         prof.friends_count=resp.friends_count; \n                         prof.id=resp.id; \n                         prof.lang=resp.lang; \n                         prof.language=resp.language; \n                         prof.last_tweet_favorite_count=resp.last_tweet_favorite_count; \n                         prof.last_tweet_retweet_count=resp.last_tweet_retweet_count; \n                         prof.last_tweet_text=resp.last_tweet_text; \n                         prof.location=resp.location; \n                         prof.nbr_tweets=resp.nbr_tweets; \n                         prof.profile_banner_url=resp.profile_banner_url+'/1500x500'; \n                         prof.profile_image_url_https=resp.profile_image_url_https; \n                         prof.url_of_user_their_company=resp.url_of_user_their_company; \n                         prof.url=url;\n                         $scope.twShortProfiles.push(prof);\n                         $scope.twIsLoading=false;\n                         $scope.apply();\n                      }else {\n                         if(resp.code==401){\n                          $scope.twIsLoading=false;\n                          $scope.apply();\n                         };\n                      }\n                   });\n            }\n              $scope.cancelSelection=function(arrayname){\n                  console.log(arrayname)\n                 $scope[arrayname]=[];\n                 console.log(\"canceling\");\n                  console.log(arrayname)\n                 $scope.apply();\n\n              }\n              $scope.saveTwitterUrl=function(shortProfile){\n              //$scope.clearContact();\n              $scope.twList=[];\n              $scope.twShortProfiles =[];\n              $scope.twProfile={};\n              $scope.twProfile=shortProfile;\n              $scope.sociallink={'url':$scope.twProfile.url};\n              $scope.website={'url':$scope.twProfile.url_of_user_their_company};\n              $scope.savedSociallink=$scope.twProfile.url;\n              $scope.currentContact.sociallinks.push($scope.sociallink);\n              /*$scope.currentContact.sociallinks.push($scope.sociallink);\n              $scope.pushElement($scope.sociallink,$scope.currentContact.sociallinks,'sociallinks');\n              $scope.pushElement($scope.website,$scope.currentContact.websites,'websites');*/\n              if ($scope.imageSrc=='/static/img/avatar_contact.jpg'||$scope.imageSrc=='') {\n                console.log(\"innnnnn no imageSrc\");\n                $scope.imageSrc=$scope.twProfile.profile_image_url_https;\n                $scope.profile_img.profile_img_url = $scope.twProfile.profile_image_url_https;\n              };\n              /*$scope.imageSrc = $scope.twProfile.profile_picture;*/\n            //  $scope.profile_img.profile_img_url = $scope.twProfile.profile_picture;\n              /*$scope.lead.source='Linkedin';\n              $scope.lead.industry=''\n              if (!$scope.lead.title) {\n                $scope.lead.title = $scope.twProfile.title;\n              };\n              if($scope.twProfile.current_post){\n                    if ($scope.twProfile.current_post[0]){\n                        $scope.lead.company = $scope.twProfile.current_post[0];\n                    }\n                  }\n              */\n              /*if ($scope.twProfile.location!=''&&$scope.twProfile.location!=null) {*/\n               if (!$scope.addressModel) {\n                    $scope.addressModel=$scope.twProfile.location; \n                  }else{\n                    if ($scope.addressModel.length < $scope.twProfile.location.length) {\n                      $scope.addressModel=$scope.twProfile.location;  \n                    };\n                  };\n              \n                 // $scope.addGeo({'formatted':$scope.twProfile.location});\n              /*};*/\n              $scope.apply();\n          }\n\n            $scope.prepareUrl=function(url){\n                    var pattern=/^[a-zA-Z]+:\\/\\//;\n                     if(!pattern.test(url)){                        \n                         url = 'http://' + url;\n                     }\n                     return url;\n        }\n        $scope.isEmpty=function(obj){\n          return jQuery.isEmptyObject(obj);\n        }\n        $scope.isEmptyArray=function(Array){\n                  if (Array!=undefined && Array.length>0) {\n                  return false;\n                  }else{\n                      return true;\n                  };    \n              \n          }\n        //HKA 10.11.2013 Add event\n        $scope.addTimeScale = function (timescale) {\n            if (timescale.title != null && timescale.title != \"\") {\n\n                var params = {}\n                $scope.allday = true;\n                var ends_at = moment(moment(timescale.starts_at_allday).format('YYYY-MM-DDT00:00:00.000000'))\n\n                params = {\n                    'title': timescale.title,\n                    'starts_at': $filter('date')(timescale.starts_at_allday, ['yyyy-MM-ddT00:00:00.000000']),\n                    'ends_at': ends_at.add('hours', 23).add('minute', 59).add('second', 59).format('YYYY-MM-DDTHH:mm:00.000000'),\n                    'allday': \"true\",\n                    'access': $scope.opportunity.access,\n                    'parent': $scope.opportunity.entityKey,\n                    'reminder': $scope.reminder,\n                    'timezone': $scope.timezoneChosen\n                }\n                $scope.opportunity.timeline.push(params);\n                $('#newEventModalForm').modal('hide');\n\n                $scope.timescale = {};\n                $scope.timezonepicker = false;\n                $scope.timezone = \"\";\n                $scope.remindme_show = \"\";\n                $scope.show_choice = \"\";\n                $scope.parent_related_to = \"\";\n                $scope.Guest_params = false;\n                $scope.searchRelatedQuery = \"\";\n                $scope.something_picked = false;\n                $scope.newEventform = false;\n                $scope.remindmeby = false;\n\n            }\n        }\n        $scope.deleteEvent =function(eventt){\n          var ind=$scope.opportunity.timeline.indexOf(eventt)\n          $scope.opportunity.timeline.splice(ind,1);\n           //$('#addLeadModal').modal('show');\n         }\n         $scope.deletePicked= function(){\n          $scope.something_picked=false;\n          $scope.remindme_show=\"\";\n          $scope.remindmeby=false;\n        }\n\n\n$scope.reminder=0;\n$scope.Remindme=function(choice){\n  $scope.reminder=0;\n  $scope.something_picked=true;\n $scope.remindmeby=true;  \n  switch(choice){\n    case 0: \n    $scope.remindme_show=\"No notification\";\n    $scope.remindmeby=false;  \n    break;\n    case 1:\n    $scope.remindme_show=\"At time of event\"; \n    $scope.reminder=1;\n    break;\n    case 2:\n    $scope.remindme_show=\"30 minutes before\";\n    $scope.reminder=2;  \n    break;\n    case 3: \n    $scope.remindme_show=\"1 hour\";\n    $scope.reminder=3; \n    break;\n    case 4: \n    $scope.remindme_show=\"1 day\"; \n    $scope.reminder=4;\n    break;\n    case 5:\n    $scope.remindme_show=\"1 week\";\n    $scope.reminder=5;  \n    break;\n  }\n \n  }\n        /*******************************************************/\n\n\n\n\n\n\n   // Google+ Authentication\n     Auth.init($scope);\n\n\n}]);\n",
			"file": "opportunitycontroller.js",
			"file_size": 153315,
			"file_write_time": 130990971130000000,
			"settings":
			{
				"buffer_size": 153245,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/base.html",
			"settings":
			{
				"buffer_size": 39305,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 354.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"linter",
				"SublimeLinter: Next Error"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"list pa",
				"Package Control: List Packages"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"ints",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"sublimeL",
				"SublimeLint: Show All Errors"
			],
			[
				"packeges",
				"Package Control: List Packages"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"tpack",
				"Package Control: Disable Package"
			],
			[
				"new d",
				"Tasks: New document"
			],
			[
				"task",
				"Tasks: New"
			],
			[
				"git pull",
				"Github: Pull Requests"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 557.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/y_hamidia/Documents/Dev/iogrow",
		"/Users/y_hamidia/Documents/Dev/iogrow/static",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/case_status",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/company",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/custom_fields",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/data_transfer",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/delete_all_records",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/lead_scoring"
	],
	"file_history":
	[
		"/Users/y_hamidia/Documents/Dev/hackerRank/savehumanity.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/cases/case_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/leads/lead_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/welcome/js/bootstrap.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/datetimepicker/jquery.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/leads/lead_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/casecontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/contactcontroller.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/userservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/accountcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/handlers.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/companyEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/activities/all_tasks.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/cases/case_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/contacts/contact_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/custom_fields/custom_fields_edit.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/company/company_edit.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/plugins/Wookmark-jQuery-master/example-amd/app.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/model.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/cases/case_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/bootstrap3/css/test.css",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/directives/directives.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/'linkedin_profile':{",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/settingservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/leadcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/iomodels/crmengine/leads.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/accounts/account_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/new_web_site/index.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/app.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/CustomFieldsEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/LeadScoringEditCtrl.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/lead_scoring/lead_scoring_edit.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/live/welcome.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/usercontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/billingController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/base.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/DeleteAllRecordsController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/searchcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/sync_ctrls_sers_scripts.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/delete_all_records/delete_all_records.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/edgeservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/taskservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/caseservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/opportunitycontroller.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/contactservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/opportunityservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/accountservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/leadservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/node_modules/stripe/lib/resources/ApplicationFees.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/LeadScoringCtrl.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/{",
		"/Users/y_hamidia/Documents/Dev/iogrow/iomodels/crmengine/accounts.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/app.yaml",
		"/usr/local/include/node/openssl/pqueue.h",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/search/list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/authservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/mapservices.js",
		"/Users/y_hamidia/Documents/css_animations/style.css",
		"/Users/y_hamidia/Documents/Dev/iogrow/gcloud/google-cloud-sdk/lib/googlecloudsdk/gcloud/sdktools/auth/activate_service_account.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/salesforce_callback.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/users/user_show.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/users/user_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/infonodeservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/views/accountlist.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/leads/lead_list.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/taskcontrollers.js",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/OpportunityEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/documentcontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/iomessages.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/iomodels/crmengine/documents.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunit_new.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/plugins/jquery-slimscroll/jquery.slimscroll.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/async_scripts_2.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/LeadStatusEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/first_sync_scripts.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/sync_scripts.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/node_modules/psi/node_modules/update-notifier/node_modules/configstore/node_modules/js-yaml/node_modules/argparse/lib/action_container.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/Package Control Messages",
		"/Users/y_hamidia/Documents/Dev/iogrow/people.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/ioendpoints.py",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/linkedinservices.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/node_modules/psi/node_modules/googleapis/node_modules/gapitoken/node_modules/request/node_modules/har-validator/node_modules/is-my-json-valid/test/json-schema-draft4/uniqueItems.json",
		"/Users/y_hamidia/Documents/.bash_profile",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/JavaScript.sublime-build",
		"/Users/y_hamidia/.bash_profile",
		"/Users/y_hamidia/Documents/testtt.js",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/Git/Git.sublime-settings",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/Git.sublime-settings",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/bootstrap3/plugins/bootstrap-editable/inputs-ext/wysihtml5/wysihtml5.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled.css",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/admin/RegionalEditController.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/css/admin.css",
		"/Users/y_hamidia/Desktop/tabs-to-add.htlm",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled.html",
		"/Users/y_hamidia/Documents/css_animations/touch",
		"/Users/y_hamidia/Documents/css_animations/day.html",
		"/Users/y_hamidia/Documents/test_animation/style.css",
		"/Users/y_hamidia/Documents/test_animation/index.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/controllers/settingscontrollers.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/opportunity/opportunity_edit.html",
		"/Users/y_hamidia/Documents/test2.js",
		"/Users/y_hamidia/Documents/node_test/public/public.html",
		"/Users/y_hamidia/Documents/node_test/express_server.js",
		"/Users/y_hamidia/Documents/node_test/public/hello.html",
		"/Users/y_hamidia/Documents/node_test/config.json",
		"/Users/y_hamidia/Documents/node_test/cus_server.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/build/js/async_scripts.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/admin/settings/settings.html",
		"/Users/y_hamidia/Desktop/test.html",
		"/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/vendor/bootstrap-gh-pages/ui-bootstrap-0.5.0.js",
		"/Users/y_hamidia/Documents/Dev/iogrow/templates/new_web_site/sign-in.html",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/untitled",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/User/Package Control.cache/console_log.sublime-snippe",
		"/Users/y_hamidia/Library/Application Support/Sublime Text 3/Packages/PlainTasks/messages/Tutorial.todo",
		"/Users/y_hamidia/Documents/Dev/iogrow/untitled.json"
	],
	"find":
	{
		"height": 73.0
	},
	"find_in_files":
	{
		"height": 194.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"iogrow.ioStorageCache.renderIfUpdated",
			"list2",
			"listV2",
			"renderIfUpdated",
			"iogrow.ioStorageCache.renderIfUpdated",
			"ioStorageCache.renderIfUpdated",
			"iogrow.ioStorageCache.renderIfUpdated",
			"ioStorageCache.renderIfUpdated",
			"iogrow.ioStorageCache.renderIfUpdated",
			"ioStorageCache.renderIfUpdated",
			"headerBtn",
			"ZHconnect",
			"organ",
			"lead_Sc",
			"ADMIN_TAb",
			"ng-clas",
			"updateOpportunityStage",
			"stageTo",
			"updateOpportunityStage",
			"gapi.client.crmengine.opportunities.listv3",
			"iogrow.ioStorageCache.renderIfUpdated",
			".list",
			"sortable",
			"as.sortable",
			"sv-handle",
			"element",
			"sv-handle",
			"sv-h",
			"sortCustomField",
			"updateOpportunityStage",
			"caption",
			"fa fa-tag",
			"tags",
			"80",
			"width: 80%",
			"customfield",
			"LeadScoringHandler",
			"delete_all_records",
			"admin_tabs",
			"admin",
			"addNote",
			"RelatedContact",
			"wizard",
			"in case ",
			"case ",
			"casesstatus ",
			"casestatus ",
			"status ",
			"Status ",
			"wizard",
			"showPage",
			"lunchMaps",
			"showPage",
			"address.formatted",
			"lunchMaps",
			"lunchMapsLinkedin",
			"lunchMaps",
			"var ROOT ",
			"ROOT",
			"opener",
			"showPage",
			"sho",
			"opener",
			"showPage slimForm col-md-12 margin-bottom-15",
			"beforedeleteOrganization",
			"beforedelete",
			"editbeforedisassociate",
			"prepareUrl",
			"$scope.prepareUrl",
			"itemDisassociated",
			"Edge",
			"edge",
			"disassociateItem",
			"Opportunitystage.list",
			"stage_number",
			" Opportunitystage.list",
			"$scope.runTheProcess",
			"custom_wizard",
			"Contact.delete",
			"new_contact",
			"new_contact_key",
			"contact",
			"new_contact",
			"new_contact_ke",
			"contact",
			"get_schema_request = AccountGetRequest(id=int(request.id), contacts=ListRequest(limit=15))",
			"patch",
			"Task.delete",
			"admin",
			"welcome",
			"welcome/",
			"/welcome/",
			"ROOt",
			"wizard",
			"Account.get",
			".get",
			"news-blocks blank-card blank-card-yellow newsCard",
			"saveLinkedinData",
			"$scope.saveLinkedinData",
			"opener",
			"lead",
			".get =",
			".get=",
			".get",
			"lead",
			"opener",
			"listPeople.length > 0 || lead.linkedin_profile",
			"listPeople.length > 0",
			"opener",
			"dropdown user",
			"INstall chrome",
			"chrome-item",
			"rel=\"chrome-webstore-item\"",
			"\",",
			",",
			"industry.",
			"opportunity",
			"casee.owner",
			"contact",
			"account.owner",
			"contact",
			"ng-show=\"contact.owner\"",
			"lead",
			"owner.google_user",
			"owner",
			"lead.owner|| showEdit",
			"is_lo",
			"opene"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\",\\n",
			",",
			",/s",
			",\\s",
			"'",
			":data.",
			"'",
			"</option>/n",
			"",
			"class=\"form-group\" style=\"margin-bottom:5px\"",
			"type=\"submit\" class=\"btn blue\" value=\"Add\" ng-disabled=\"!leads.customfield.name||!leads.customfield.field_type\"",
			"class=\"btn btn-default\" value=\"Clear\" type=\"button\"",
			"class=\"btn btn-default\" value=\"Cancel\" type=\"button\"",
			"{{ _(' Field preview') }}",
			"customfield.name",
			"customfield.field_type",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/opportunities/opportunity_list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 77941,
						"regions":
						{
						},
						"selection":
						[
							[
								33156,
								33162
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18710.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/static/app/scripts/services/opportunityservices.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17599,
						"regions":
						{
						},
						"selection":
						[
							[
								6795,
								6565
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4567.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "opportunitycontroller.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 153245,
						"regions":
						{
						},
						"selection":
						[
							[
								12076,
								12076
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 56.0,
						"translation.y": 9268.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/y_hamidia/Documents/Dev/iogrow/templates/base.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39305,
						"regions":
						{
						},
						"selection":
						[
							[
								25834,
								25834
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16773.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 73.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 58.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/JavaScript.sublime-build",
	"project": "new_iogrow.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"op",
				"templates/opportunities/opportunity_list.html"
			],
			[
				"oppocon",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"base",
				"templates/base.html"
			],
			[
				"oppose",
				"static/app/scripts/services/opportunityservices.js"
			],
			[
				"",
				"templates/base.html"
			],
			[
				"app",
				"static/app/scripts/app.js"
			],
			[
				"oppo",
				"templates/opportunities/opportunity_list.html"
			],
			[
				"oppoc",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"test",
				"static/bootstrap3/css/test.css"
			],
			[
				"h",
				"handlers.py"
			],
			[
				"company",
				"templates/admin/company/company_edit.html"
			],
			[
				"leads",
				"templates/admin/lead_scoring/lead_scoring_edit.html"
			],
			[
				"model",
				"model.py"
			],
			[
				"handler",
				"handlers.py"
			],
			[
				"account",
				"templates/accounts/account_show.html"
			],
			[
				"opposer",
				"static/app/scripts/services/opportunityservices.js"
			],
			[
				"oppocont",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"opo",
				"templates/opportunities/opportunity_list.html"
			],
			[
				"customfo",
				"static/app/scripts/controllers/admin/CustomFieldsEditController.js"
			],
			[
				"ecustomfiel",
				"templates/admin/custom_fields/custom_fields_edit.html"
			],
			[
				"cus",
				"templates/admin/custom_fields/custom_fields_edit.html"
			],
			[
				"tes",
				"static/bootstrap3/css/test.css"
			],
			[
				"custom",
				"templates/admin/custom_fields/custom_fields_edit.html"
			],
			[
				"cusfiel",
				"static/app/scripts/controllers/admin/CustomFieldsEditController.js"
			],
			[
				"direc",
				"static/app/scripts/directives/directives.js"
			],
			[
				"contact",
				"templates/contacts/contact_list.html"
			],
			[
				"alltasks",
				"templates/activities/all_tasks.html"
			],
			[
				"case",
				"templates/cases/case_list.html"
			],
			[
				"leadsc",
				"templates/admin/lead_scoring/lead_scoring_edit.html"
			],
			[
				"customf",
				"templates/admin/custom_fields/custom_fields_edit.html"
			],
			[
				"customfiel",
				"static/app/scripts/controllers/admin/CustomFieldsEditController.js"
			],
			[
				"hand",
				"handlers.py"
			],
			[
				"ha",
				"handlers.py"
			],
			[
				"apps.",
				"static/plugins/Wookmark-jQuery-master/example-amd/app.js"
			],
			[
				"apps.js",
				"node_modules/stripe/lib/resources/ApplicationFees.js"
			],
			[
				"app.js",
				"static/app/scripts/app.js"
			],
			[
				"accountn",
				"templates/accounts/account_new.html"
			],
			[
				"accounts",
				"templates/accounts/account_show.html"
			],
			[
				"accountcon",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"accoutncon",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"casec",
				"static/app/scripts/controllers/casecontrollers.js"
			],
			[
				"casecont",
				"static/app/scripts/controllers/casecontrollers.js"
			],
			[
				"oppocontr",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"casecon",
				"static/app/scripts/controllers/casecontrollers.js"
			],
			[
				"opp",
				"templates/opportunities/opportunity_new.html"
			],
			[
				"opponew",
				"templates/opportunities/opportunity_new.html"
			],
			[
				"casenew",
				"templates/cases/case_new.html"
			],
			[
				"lead",
				"templates/leads/lead_show.html"
			],
			[
				"leadcon",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"dire",
				"static/app/scripts/directives/directives.js"
			],
			[
				"contactcon",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"contactsh",
				"templates/contacts/contact_show.html"
			],
			[
				"direct",
				"static/app/scripts/directives/directives.js"
			],
			[
				"accountc",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"acountc",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"leadshow",
				"templates/leads/lead_show.html"
			],
			[
				"leadne",
				"templates/leads/lead_new.html"
			],
			[
				"accountsh",
				"templates/accounts/account_show.html"
			],
			[
				"accountnew",
				"templates/accounts/account_new.html"
			],
			[
				"accountcont",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"billi",
				"static/app/scripts/controllers/billingController.js"
			],
			[
				"comany",
				"templates/admin/company/company_edit.html"
			],
			[
				"comanye",
				"static/app/scripts/controllers/admin/companyEditController.js"
			],
			[
				"userser",
				"static/app/scripts/services/userservices.js"
			],
			[
				"accoun",
				"templates/accounts/account_new.html"
			],
			[
				"accountne",
				"templates/accounts/account_new.html"
			],
			[
				"userc",
				"static/app/scripts/controllers/usercontrollers.js"
			],
			[
				"billingcon",
				"static/app/scripts/controllers/billingController.js"
			],
			[
				"editco",
				"static/app/scripts/controllers/admin/companyEditController.js"
			],
			[
				"billing",
				"static/app/scripts/controllers/billingController.js"
			],
			[
				"comapycont",
				"static/app/scripts/controllers/admin/companyEditController.js"
			],
			[
				"admincomp",
				"templates/admin/company/company_edit.html"
			],
			[
				"handle",
				"handlers.py"
			],
			[
				"edge",
				"static/app/scripts/services/edgeservices.js"
			],
			[
				"edges",
				"static/app/scripts/services/edgeservices.js"
			],
			[
				"taskse",
				"static/app/scripts/services/taskservices.js"
			],
			[
				"accountse",
				"static/app/scripts/services/accountservices.js"
			],
			[
				"opportunitycon",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"contactse",
				"static/app/scripts/services/contactservices.js"
			],
			[
				"accounts.py",
				"iomodels/crmengine/accounts.py"
			],
			[
				"contactcont",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"casese",
				"static/app/scripts/services/caseservices.js"
			],
			[
				"leadse",
				"static/app/scripts/services/leadservices.js"
			],
			[
				"leadser",
				"static/app/scripts/services/leadservices.js"
			],
			[
				"dele",
				"static/app/scripts/controllers/admin/DeleteAllRecordsController.js"
			],
			[
				"accountser",
				"static/app/scripts/services/accountservices.js"
			],
			[
				"app.ya",
				"app.yaml"
			],
			[
				"accoutn",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"contacts",
				"templates/contacts/contact_show.html"
			],
			[
				"leadsho",
				"templates/leads/lead_show.html"
			],
			[
				"leadcont",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"leadcontrol",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"casessho",
				"templates/cases/case_show.html"
			],
			[
				"opposho",
				"templates/opportunities/opportunity_show.html"
			],
			[
				"contactshow",
				"templates/contacts/contact_show.html"
			],
			[
				"accountsho",
				"templates/accounts/account_show.html"
			],
			[
				"leadsh",
				"templates/leads/lead_show.html"
			],
			[
				"accountshow",
				"templates/accounts/account_show.html"
			],
			[
				"leads.py",
				"iomodels/crmengine/leads.py"
			],
			[
				"contactc",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"base.ht",
				"templates/base.html"
			],
			[
				"leadservice",
				"static/app/scripts/services/leadservices.js"
			],
			[
				"leadc",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"accoucon",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"bootstr",
				"static/welcome/js/bootstrap.js"
			],
			[
				"jq",
				"static/datetimepicker/jquery.js"
			],
			[
				"acccon",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"test.css",
				"static/bootstrap3/css/test.css"
			],
			[
				"opposerv",
				"static/app/scripts/services/opportunityservices.js"
			],
			[
				"sync",
				"static/build/js/sync_ctrls_sers_scripts.js"
			],
			[
				"test.c",
				"static/bootstrap3/css/test.css"
			],
			[
				"searchli",
				"templates/search/list.html"
			],
			[
				"accounrse",
				"static/app/scripts/services/accountservices.js"
			],
			[
				"search",
				"static/app/scripts/controllers/searchcontrollers.js"
			],
			[
				"ccountcon",
				"static/app/scripts/controllers/accountcontrollers.js"
			],
			[
				"acc",
				"templates/accounts/account_show.html"
			],
			[
				"contactnew",
				"templates/contacts/contact_new.html"
			],
			[
				"leadcontr",
				"static/app/scripts/controllers/leadcontrollers.js"
			],
			[
				"leas",
				"templates/leads/lead_show.html"
			],
			[
				"contactser",
				"static/app/scripts/services/contactservices.js"
			],
			[
				"users",
				"static/app/scripts/services/userservices.js"
			],
			[
				"contcatcon",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"oppoco",
				"static/app/scripts/controllers/opportunitycontroller.js"
			],
			[
				"userse",
				"static/app/scripts/services/userservices.js"
			],
			[
				"authse",
				"static/app/scripts/services/authservices.js"
			],
			[
				"setting",
				"static/app/scripts/services/settingservices.js"
			],
			[
				"contactcontr",
				"static/app/scripts/controllers/contactcontroller.js"
			],
			[
				"directi",
				"static/app/scripts/directives/directives.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 285.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
